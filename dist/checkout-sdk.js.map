{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/embedded-checkout/parse-origin.ts","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","StandardError","_super","message","_this","this","type","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","tslib__WEBPACK_IMPORTED_MODULE_0__","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","InstrumentActionType","CheckoutButtonActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ContentType","__webpack_exports__","CountryActionCreator","_countryRequestSender","loadCountries","options","Observable_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","error","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","OrderFinalizationNotRequiredError","external_tslib_","standard_error","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","MissingCheckout","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","top","location","href","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","post","Accept","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","handleSuccess","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_methodId","_googlePayOptions","_getGooglePayOptions","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","removeEventListener","_getPayment","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","MissingPayment","card_information","event","preventDefault","bind_decorator","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancel","cancellable_promise","iframe","promise","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","country","endpoint","ChasePayEventType","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","chasepay","_configureWallet","_chasePayClient","subtype","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","KlarnaScriptLoader","Klarna","Credit","MasterpassPaymentStrategy","_masterpassScriptLoader","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","googlepay_payment_strategy","create_googlepay_payment_processor","googlepay_braintree_initializer","wepay_payment_strategy","masterpass_payment_strategy","masterpass_script_loader","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","ConfigActionType","CountryActionType","ShippingCountryActionType","parseOrigin","url","test","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","createElement","hostname","port","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","DEFAULT_RESPONSE","RequestError","CheckoutActionType","OrderActionType","HOSTED","OFFLINE","isIframeEvent","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","CheckoutButtonStrategy","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","push","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","split","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","checkout_button_strategy","MasterpassButtonStrategy","_signInButton","_createSignInButton","parentNode","removeChild","buttonContainer","src","appendChild","cartAmount","GooglePayButtonStrategy","_getMethodId","googlePayButton","createButton","_onPaymentSelectComplete","_onError","PaypalButtonStrategy","clientId","actions","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_button_strategy","GOOGLEPAY_BRAINTREE","googlepay_button_strategy","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","result","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","createError","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","BillingAddressSelector","continueAsGuestError","ConfigSelector","getExternalSource","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","detail","step","storeCredit","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","create_freeze_proxy","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","mapToInternalCart","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","forEach","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","setPrototypeOf","__proto__","isPrivate","indexOf","PaymentMethodInvalidError","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","_is_equal__WEBPACK_IMPORTED_MODULE_0__","maps","bindDecorator","target","descriptor","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","set","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","createFreezeProxies","CheckoutRequestSender","params","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","JsonV1","include","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","put","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","_checkout_actions__WEBPACK_IMPORTED_MODULE_11__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_4__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_10__","DEFAULT_PARAMS","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","delete","PaymentMethodActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","PaymentMethodRequestSender","X-API-INTERNAL","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_parse_origin__WEBPACK_IMPORTED_MODULE_3__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","origin","_is_iframe_event__WEBPACK_IMPORTED_MODULE_2__","_common_utility__WEBPACK_IMPORTED_MODULE_1__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","_parse_origin__WEBPACK_IMPORTED_MODULE_0__","postMessage","setTarget","UnrecoverableError","mapFromPaymentErrorResponse","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","joinErrors","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutIncludes","consignment_action_creator_ConsignmentActionCreator","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","consignment_actions","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","createFrame","_iframe","hide","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","visibility","opacity","handleTransitionEnd","bottom","left","height","width","position","right","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","NotEmbeddableError","ResizableIframeCreator","not_embeddable_error","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","parse_origin","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","CustomerActionCreator","_customerRequestSender","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","omitDeep","predicate","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_3__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","CustomerStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_10__","_getCurrentOrderId","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","toSingleLine","input","line","trim","InvalidArgumentError","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","_common_utility__WEBPACK_IMPORTED_MODULE_2__","omitPrivate","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","_is_private__WEBPACK_IMPORTED_MODULE_0__","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","SquareCustomerStrategy","MasterpassCustomerStrategy","masterpassOptions","pathname","Masterpass","GooglePayCustomerStrategy","googlePayOptions","DefaultCustomerStrategy","_customerActionCreator","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","googlepay_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","INTERNAL_USE_ONLY","TimeoutError","selectorDecorator","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","selectorMethodDecorator","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","MissingDataErrorType","MissingDataError","MissingBillingAddress","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","encodeURIComponent","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","parse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","lastArg","param","isActionOptions","instanceMethods","fn","cache_key_resolver","cacheAction","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"2BACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,qBClFAhC,EAAAD,QAAAkC,QAAA,wBCAAjC,EAAAD,QAAAkC,QAAA,0CCAAjC,EAAAD,QAAAkC,QAAA,2DCIAC,EAAA,SAAAC,GAGI,SAAAD,EAAYE,0BAAZC,EACIF,EAAA/B,KAAAkC,KAAMF,GAAW,sCAAoCE,YAHzDD,EAAAE,KAAO,WAKH5B,OAAA6B,EAAA,EAAA7B,CAAe0B,EAAMI,EAAWZ,WAEO,mBAA5Ba,MAAMC,kBACbD,MAAMC,kBAAkBN,EAAII,GAE5BJ,EAAKO,MAAQ,IAAKF,MAAML,EAAKD,SAAUQ,QAGnD,OAd2CC,EAAA,UAAAX,EAAAC,GAc3CD,EAdA,CAA2CQ,2CCE3C,IAAYI,kCAAZ,SAAYA,GACRA,EAAA,4DACAA,EAAA,4DACAA,EAAA,sDAEAA,EAAA,0DACAA,EAAA,0DACAA,EAAA,oDAEAA,EAAA,0DACAA,EAAA,0DACAA,EAAA,oDAEAA,EAAA,iEACAA,EAAA,iEACAA,EAAA,2DAEAA,EAAA,+DACAA,EAAA,+DACAA,EAAA,yDAnBJ,CAAYA,0CCJZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,gDACAA,EAAA,sDACAA,EAAA,sDACAA,EAAA,kDACAA,EAAA,wDACAA,EAAA,wDACAA,EAAA,uDACAA,EAAA,6DACAA,EAAA,6DACAA,EAAA,2DACAA,EAAA,iEACAA,EAAA,iEACAA,EAAA,wEACAA,EAAA,0EACAA,EAAA,sEAfJ,CAAYA,yCCEZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,gDACAA,EAAA,sDACAA,EAAA,sDACAA,EAAA,kDACAA,EAAA,wDACAA,EAAA,wDACAA,EAAA,sDACAA,EAAA,4DACAA,EAAA,4DACAA,EAAA,0DACAA,EAAA,gEACAA,EAAA,gEACAA,EAAA,uEACAA,EAAA,yEACAA,EAAA,qEAfJ,CAAYA,0BCJZhD,EAAAD,QAAAkC,QAAA,iDCEA,IAAYgB,kCAAZ,SAAYA,GACRA,EAAA,8DACAA,EAAA,oEACAA,EAAA,oEACAA,EAAA,4DACAA,EAAA,kEACAA,EAAA,kEACAA,EAAA,uDACAA,EAAA,6DACAA,EAAA,6DACAA,EAAA,2DACAA,EAAA,iEACAA,EAAA,iEAZJ,CAAYA,yCCIZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,8CACAA,EAAA,8CACAA,EAAA,wCAEAA,EAAA,gDACAA,EAAA,gDACAA,EAAA,0CAPJ,CAAYA,yCCFZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,iEACAA,EAAA,iEACAA,EAAA,2DAEAA,EAAA,uDACAA,EAAA,uDACAA,EAAA,iDAPJ,CAAYA,yCCAZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,iEACAA,EAAA,iEACAA,EAAA,2DAEAA,EAAA,mEACAA,EAAA,mEACAA,EAAA,6DAPJ,CAAYA,yCCCZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,2DACAA,EAAA,2DACAA,EAAA,qDAEAA,EAAA,6DACAA,EAAA,6DACAA,EAAA,uDAPJ,CAAYA,0CCDZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,sDACAA,EAAA,sDACAA,EAAA,gDAEAA,EAAA,wDACAA,EAAA,wDACAA,EAAA,kDAPJ,CAAYA,yCCEZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,kDACAA,EAAA,wDACAA,EAAA,wDAEAA,EAAA,sDACAA,EAAA,4DACAA,EAAA,4DAPJ,CAAYA,0BCNZvD,EAAAD,QAAAkC,QAAA,iCCAAjC,EAAAD,QAAAkC,QAAA,yCCAAjC,EAAAD,QAAAkC,QAAA,oDCGA,IAAYuB,kCAAZ,SAAYA,GACRA,EAAA,qCACAA,EAAA,+BACAA,EAAA,iCACAA,EAAA,yBACAA,EAAA,2BACAA,EAAA,uBANJ,CAAYA,0CCCZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,uEACAA,EAAA,uEACAA,EAAA,iEAEAA,EAAA,yEACAA,EAAA,yEACAA,EAAA,mEAEAA,EAAA,uEACAA,EAAA,uEACAA,EAAA,iEAEAA,EAAA,6DACAA,EAAA,6DACAA,EAAA,uDAEAA,EAAA,oEACAA,EAAA,oEACAA,EAAA,8DAEAA,EAAA,8CArBJ,CAAYA,yCCJZ,IAAKC,GAAL,SAAKA,GACDA,EAAA,wBACAA,EAAA,oCAFJ,CAAKA,WAKLC,EAAA,kLCKA,WACI,SAAAC,EACYC,GAAAvB,KAAAuB,wBAiBhB,OAdID,EAAA/B,UAAAiC,cAAA,SAAcC,GAAd,IAAA1B,EAAAC,KACI,OAAO0B,EAAA,WAAWzC,OAAO,SAAC0C,GACtBA,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAayD,EAAA,EAAkBC,yBAE7ChC,EAAKwB,sBAAsBC,cAAcC,GACpCO,KAAK,SAAAC,GACFN,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAayD,EAAA,EAAkBI,uBAAwBD,EAASE,KAAKC,OACnFT,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkByD,EAAA,EAAkBU,oBAAqBP,SAI5FX,EAnBA,KCJA,WACI,SAAAmB,EACYC,EACAC,GADA3C,KAAA0C,iBACA1C,KAAA2C,UAWhB,OARIF,EAAAlD,UAAAiC,cAAA,SAAcoB,OAAEC,QAAA,IAAAD,QAAAC,QAENC,GACFC,kBAAmB/C,KAAK2C,QAAQK,QAGpC,OAAOhD,KAAK0C,eAAelE,IALf,mCAK0BsE,QAAOA,EAAED,QAAOA,KAE9DJ,EAdA,6HCJA,SAAA5C,GACI,SAAAoD,IAAA,IAAAlD,EACIF,EAAA/B,KAAAkC,KAAM,mEAAiEA,YAEvED,EAAKE,KAAO,oCAEpB,OAN+DiD,EAAA,UAAAD,EAAApD,GAM/DoD,EANA,CAA+DE,EAAA,YC2B/D,WACI,SAAAC,EACYC,EACAC,GADAtD,KAAAqD,oBACArD,KAAAsD,sBAgJhB,OA7IIF,EAAA7D,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,WAAI/B,EAAA,WAAW,SAACC,GAC5B,IAII+B,EAJEC,EAAQF,EAAMG,WACZhB,EAAAY,EAAAK,eAAA,IAAAjB,OAAyBkB,EAAAN,EAAAM,eAC3BC,GAASC,SAAUH,EAAQG,UAIjC,GAAIL,EAAME,QAAQI,sBAAsBH,GAAiB,CACrD,IAAMI,EAASP,EAAMQ,eAAeC,iBAAiBP,EAAQG,SAAUH,EAAQQ,WAE/E,IAAKH,EACD,MAAM,IAAII,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpDb,EAAW3D,EAAKsD,kBAAkBmB,YAAYN,QAE9CR,EAAW3D,EAAKsD,kBAAkB7E,IAAI,yBAG1CmD,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAaoG,EAAA,EAA0BC,sBAAkBC,EAAWZ,IAElFL,EACKH,QAAQC,EAAON,EAAA,YAAOzB,GAASuC,SAAUH,EAAQG,SAAUK,UAAWR,EAAQQ,aAC9ErC,KAAK,WACFL,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAaoG,EAAA,EAA0BG,sBAAkBD,EAAWZ,IAClFpC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkBoG,EAAA,EAA0BI,cAAetC,EAAOwB,UAKjGX,EAAA7D,UAAAuF,SAAA,SAASrD,GAAT,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAApF,OAAA0G,EAAA,OAAA1G,CACZA,OAAA2G,EAAA,GAAA3G,CAAGA,OAAAwD,EAAA,aAAAxD,CAAaoG,EAAA,EAA0BQ,oBAC1ClF,EAAKmF,2BAA2BzB,EAAOhC,GACvCpD,OAAA8G,EAAA,MAAA9G,CAAM,WACF,IAAMsF,EAAQF,EAAMG,WACdC,EAAUF,EAAME,QAAQuB,eAE9B,IAAKvB,EACD,MAAM,IAAIwB,EAGd,IAAMnB,EAASP,EAAMQ,eAAeC,iBAAiBP,EAAQyB,WAAYzB,EAAQQ,WAEjF,IAAKH,EACD,MAAM,IAAII,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,OAAOxE,EAAKsD,kBAAkBmB,YAAYN,GACrCY,SAAQ5B,EAAA,YAAMzB,GAASuC,SAAUE,EAAOqB,GAAIlB,UAAWH,EAAOsB,WAC9DxD,KAAK,WAAM,OAAA3D,OAAAwD,EAAA,aAAAxD,CAAaoG,EAAA,EAA0BgB,uBAAmBd,GAAaX,SAAUH,EAAQyB,kBAE/GI,KACErH,OAAAsH,EAAA,WAAAtH,CAAW,SAAAkE,GACP,IACMsB,EADQJ,EAAMG,WACEC,QAAQuB,eAE9B,OAAO/G,OAAAuH,EAAA,EAAAvH,CAAiBoG,EAAA,EAA0BoB,eAAgBtD,GAASyB,SAAUH,GAAWA,EAAQyB,kBAKpHlC,EAAA7D,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/B,IAAMgC,EAAQF,EAAMG,WACZI,EAAAvC,EAAAuC,SAAUK,EAAA5C,EAAA4C,UACZH,EAASP,EAAMQ,eAAeC,iBAAiBJ,EAAUK,GAE/D,IAAKH,EACD,MAAM,IAAII,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD5C,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAaoG,EAAA,EAA0BsB,yBAAqBpB,GAAaX,SAAQA,KAE/FjE,EAAKsD,kBAAkBmB,YAAYN,GAC9B4B,WAAU5C,EAAA,YAAMzB,GAASuC,SAAQA,EAAEK,UAASA,KAC5CrC,KAAK,WACFL,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAaoG,EAAA,EAA0BuB,yBAAqBrB,GAAaX,SAAQA,KAC/FrC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkBoG,EAAA,EAA0BwB,iBAAkB1D,GAASyB,SAAQA,WAK9GZ,EAAA7D,UAAA2G,aAAA,SAAazE,GAAb,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/B,IAAMgC,EAAQF,EAAMG,WACZI,EAAAvC,EAAAuC,SAAUK,EAAA5C,EAAA4C,UACZH,EAASP,EAAMQ,eAAeC,iBAAiBJ,EAAUK,GAE/D,IAAKH,EACD,MAAM,IAAII,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD5C,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAaoG,EAAA,EAA0B0B,2BAAuBxB,GAAaX,SAAQA,KAEjGjE,EAAKsD,kBAAkBmB,YAAYN,GAC9BgC,aAAYhD,EAAA,YAAMzB,GAASuC,SAAQA,EAAEK,UAASA,KAC9CrC,KAAK,WACFL,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAaoG,EAAA,EAA0B2B,2BAAuBzB,GAAaX,SAAQA,KACjGrC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkBoG,EAAA,EAA0B4B,mBAAoB9D,GAASyB,SAAQA,WAKhHZ,EAAA7D,UAAA+G,kBAAA,SAAkBpC,EAA4BzC,GAC1C,OAAO,SAAAgC,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/B,IACMoC,GAASC,SADEvC,GAAWA,EAAQuC,UAGpCrC,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAaoG,EAAA,EAA0B8B,8BAA0B5B,EAAWZ,IAE1FG,IAASlC,KAAK,WACVL,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAaoG,EAAA,EAA0B+B,+BAA2B7B,EAAWZ,IAC3FpC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkBoG,EAAA,EAA0BgC,wBAAyBlE,EAAOwB,UAK/FX,EAAA7D,UAAA2F,2BAAR,SAAmCzB,EAA8BhC,GAC7D,IACMiF,EADQjD,EAAMG,WACG8C,SAASC,cAEhC,OAAID,GAAYA,EAASE,QACd5G,KAAKsD,oBAAoBuD,kBAAkBH,EAASE,QAASnF,GAGjEpD,OAAAyI,EAAA,MAAAzI,IAEf+E,EAnJA,6CC3BA,SAAAvD,GACI,SAAAkH,IAAA,IAAAhH,EACIF,EAAA/B,KAAAkC,KAAM,2GAAyGA,YAE/GD,EAAKE,KAAO,iBAEpB,OAN8CiD,EAAA,UAAA6D,EAAAlH,GAM9CkH,EANA,CAA8C5D,EAAA,KCS9C,WACI,SAAA6D,EACYC,GAAAjH,KAAAiH,yBA+BhB,OA5BID,EAAAzH,UAAA2H,SAAA,SAASR,EAAqBjF,GAA9B,IAAA1B,EAAAC,KACI,IAAK0G,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,OAAOnH,KAAKiH,uBAAuBG,aAAaV,EAASnB,GAAI9D,GACxDO,KAAK,SAAAC,GACF,IAAMoF,EAAa,IAAIC,EAAA,EAEvB,KAAIZ,EAASa,aAAetF,EAASE,KAAKoF,YACnCxH,EAAKyH,gBAAgBd,EAASe,QAASxF,EAASE,KAAKsF,UACrD1H,EAAK2H,yBAAyBhB,EAASiB,iBAAkB1F,EAASE,KAAKwF,mBACvEN,EAAWO,QAAQlB,EAASmB,KAAM5F,EAASE,KAAK0F,OAKvD,MAAM,IAAIC,KAIdd,EAAAzH,UAAAiI,gBAAR,SAAwBO,EAAoBC,GACxC,OAAO3J,OAAA4J,EAAA,QAAA5J,CAAQA,OAAA4J,EAAA,IAAA5J,CAAI0J,EAAU,QAAS1J,OAAA4J,EAAA,IAAA5J,CAAI2J,EAAU,UAGhDhB,EAAAzH,UAAAmI,yBAAR,SAAiCQ,EAAsCC,GACnE,OAAO9J,OAAA4J,EAAA,QAAA5J,CAAQA,OAAA4J,EAAA,IAAA5J,CAAI6J,EAAmB,QAAS7J,OAAA4J,EAAA,IAAA5J,CAAI8J,EAAmB,UAE9EnB,EAjCA,0FCTc,SAAAoB,GAA8BC,GACxC,OAAOC,QAASD,EAAiCE,kBCgEzCC,GAYAC,eCrDZ,WACI,SAAAC,EACYC,EACArF,GADAtD,KAAA2I,wBACA3I,KAAAsD,sBA8GhB,OA3GIoF,EAAAnJ,UAAAqJ,cAAA,SAAc/E,GAAd,IAAA9D,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAApF,OAAA0G,EAAA,OAAA1G,CACZA,OAAA2G,EAAA,GAAA3G,CAAGA,OAAAwD,EAAA,aAAAxD,CAAawK,GAAA,EAAkBC,yBAClCzK,OAAA0K,EAAA,KAAA1K,CAAK0B,EAAK4I,sBAAsBC,cAC5B7I,EAAKiJ,uBAAuBnF,EAASJ,EAAMG,cAE1C8B,KACGrH,OAAAsH,EAAA,UAAAtH,CAAU,SAACuE,OAAET,EAAAS,EAAAT,KAAW,OAAA9D,OAAA0G,EAAA,OAAA1G,CACpB0B,EAAKuD,oBAAoB2F,kBAAzBlJ,CAA4C0D,GAC5CpF,OAAA2G,EAAA,GAAA3G,CAAGA,OAAAwD,EAAA,aAAAxD,CAAawK,GAAA,EAAkBK,uBAAwB/G,SAGxEuD,KACErH,OAAAsH,EAAA,WAAAtH,CAAW,SAAAkE,GAAS,OAAAlE,OAAAuH,EAAA,EAAAvH,CAAiBwK,GAAA,EAAkBM,oBAAqB5G,QAIpFmG,EAAAnJ,UAAA6J,yBAAA,SAAyBvF,GAAzB,IAAA9D,EAAAC,KACI,OAAO,SAAAyD,GACH,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAGf,OAFAA,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAawK,GAAA,EAAkBQ,oCAEtCtJ,EAAK4I,sBAAsBS,yBAC9BrJ,EAAKiJ,uBAAuBnF,EAASJ,EAAMG,aAE1C5B,KAAK,WACFL,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAawK,GAAA,EAAkBS,oCAC7C3H,EAASU,aAEZC,MAAM,WACHX,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkBwK,GAAA,EAAkBU,uCAK/Db,EAAAnJ,UAAAyJ,uBAAR,SAA+BnF,EAAkBF,GAC7C,IAAKE,EAAQ2F,YACT,MAAM,IAAIC,EAAA,EAAqB,sFAGnC,IAAMC,EAAiB/F,EAAM+F,eAAeC,oBACtCjD,EAAW/C,EAAM+C,SAASC,cAC1BiD,EAAWjG,EAAMiG,SAASC,cAC1BC,EAAQnG,EAAMmG,MAAMC,WACpBC,EAAgBhK,KAAKiK,kBAAkBpG,EAASF,EAAMQ,gBACtD+F,EAAkBvG,EAAMuG,gBAAgBC,qBACxCC,EAAezG,EAAMyG,aAAaC,kBAClCC,EAAiB3G,EAAMyG,aAAaG,oBACpCC,EAAc7G,EAAM8G,OAAOC,iBAC3BC,EAAgBhH,EAAM8G,OAAOG,mBAC7BC,EAAiBlH,EAAMmH,YAAYC,qBACnCC,EAAcrH,EAAMQ,eAAe8G,wBACnCC,EAAYvH,EAAMmG,MAAMqB,eACxBC,EAAmBxB,GAAYF,GAAkBrL,OAAAgN,EAAA,EAAAhN,CAAsBuL,EAAUF,GAEjF4B,EAAYT,GAAkBzC,GAAoBvE,EAAQ2F,aACzD7F,EAAME,QAAQ0H,kBAAiB,KAAKV,EAAeW,iBACtD7H,EAAME,QAAQ0H,kBAElB,IAAKD,EACD,MAAM,IAAInI,EAAA,EAGd,OACImI,UAASA,EACTtB,cAAaA,EACbJ,SAAUwB,EACV1B,eAAgBA,GAAkBrL,OAAAoN,EAAA,EAAApN,CAAqBqL,GACvDQ,gBAAiBA,GAAmB7L,OAAAoN,EAAA,EAAApN,CAAqB6L,EAAiBE,GAC1EE,eAAgBA,GAAkBjM,OAAAqN,GAAA,EAAArN,CAA4BiM,GAAgB,GAC9EzC,KAAMnB,GAAYrI,OAAAsN,EAAA,EAAAtN,CAAkBqI,GACpCoD,MAAOA,GAASzL,OAAAuN,EAAA,EAAAvN,CAAmByL,EAAOoB,GAC1CA,UAASA,EACTrH,QAASA,EAAQ2F,YACjBqC,WACIC,QAAO5I,EAAA,YACA8H,GACHe,eAAgBpB,GAAiBA,EAAcoB,kBAGvDC,OAAQ,8BACRvI,MAAOpF,OAAA4J,EAAA,KAAA5J,CAAKmM,GAAeA,EAAYyB,cACnC,YACA,UACA,gBACA,gBAKJvD,EAAAnJ,UAAA0K,kBAAR,SAA0BpG,EAAkBqI,GACxC,IAAMlC,EAAgBkC,EAAsB9H,iBAAiBP,EAAQG,SAAUH,EAAQQ,WAEvF,GAAK2F,EAIL,MAA6B,iBAAzBA,EAAc9F,QAA8B8F,EAAcxE,QAI1DwE,EAAcmC,oBAAsBnC,EAAcmC,mBAAmB3G,QACrEtC,EAAA,YAAY8G,GAAezE,GAAIyE,EAAcmC,mBAAmB3G,UAG7DwE,EAPH9G,EAAA,YAAY8G,GAAexE,QAASwE,EAAczE,MAS9DmD,EAjHA,MCnBA,WAKI,SAAA0D,EACYC,GAAArM,KAAAqM,UA6BhB,OA1BID,EAAA7M,UAAAqJ,cAAA,SAAcpF,GAAd,IAAAzD,EAAAC,KACI,OAAO,IAAIsM,QAAQ,SAACC,EAASC,GACzBzM,EAAKsM,QAAQzD,cAAcpF,EAAS,SAACjB,EAAYN,GACzCM,EACAiK,EAAOzM,EAAK0M,mBAAmBlK,IAE/BgK,EAAQxM,EAAK0M,mBAAmBxK,SAMhDmK,EAAA7M,UAAA6J,yBAAA,SAAyB5F,GAAzB,IAAAzD,EAAAC,KACI,OAAO,IAAIsM,QAAQ,WACfvM,EAAKsM,QAAQjD,yBAAyB5F,MAItC4I,EAAA7M,UAAAkN,mBAAR,SAA2BxK,GACvB,OACIa,WACAX,KAAMF,EAASG,KACfsK,OAAQzK,EAASyK,OACjBC,WAAY1K,EAAS0K,aAGjCP,EAnCA,yBCKA,SAAAvM,GACI,SAAA+M,EACYC,EACRpL,GAFJ,IAAA1B,EAIIF,EAAA/B,KAAAkC,KAAMyB,IAAQzB,YAHND,EAAA8M,WAwDhB,OA1DqD3J,EAAA,UAAA0J,EAAA/M,GAQjD+M,EAAArN,UAAAiF,YAAA,SAAYwF,GACR,IAAKA,EACD,OAAOhK,KAAKxB,MAGhB,IAAMsO,EAAQ9M,KAAK+M,UAAU/C,GACvBgD,EAAahD,EAAcxE,SAAWwE,EAAczE,GAE1D,OAAOvF,KAAKxB,IAAIsO,EAAOE,IAGnBJ,EAAArN,UAAAwN,UAAR,SAAkB/C,GACd,IAAMhG,EAAWgG,EAAcxE,SAAWwE,EAAczE,GAExD,OAAIvF,KAAKiN,YAAYjJ,GACVA,EAGPgG,EAAc/J,OAASiN,GAAA,EAChB,UAGPlN,KAAKmN,gBAAgBnD,GACd,SAGPA,EAAc/J,OAASiN,GAAA,EAChB,UAGJ,cAGHN,EAAArN,UAAA4N,gBAAR,SAAwBnD,GACpB,IAAMS,EAASzK,KAAK6M,OAAOjJ,WAAW6G,OAAOC,iBAE7C,IAAKD,EACD,MAAM,IAAInG,EAAA,EAAiBA,EAAA,EAAqB8I,uBAG5C,IAAAC,EAAA5C,EAAA6C,gBAAAD,2BAER,SAAKA,GAAwD,UAA1BrD,EAAcxE,WAIzCnH,OAAA4J,EAAA,KAAA5J,CAAKgP,EAA4B,SAAA9H,GACrC,OAAAyE,EAAczE,KAAOA,GAAMyE,EAAcxE,UAAYD,KAGjEqH,EA1DA,CAAqDW,GAAA,gBCVrD,SAAA1N,GACI,SAAA2N,EAAYC,GAAZ,IACQ3N,EAAU,gFAEV2N,IACA3N,EAAaA,EAAO,2DAA2D2N,EAAcC,KAAK,MAAK,KAG3G7N,EAAA/B,KAAAkC,KAAMF,IAAQE,KAEtB,OAVyDkD,EAAA,UAAAsK,EAAA3N,GAUzD2N,EAVA,CAAyD/D,EAAA,MCIzD,WAGI,SAAAkE,EACcd,GAAA7M,KAAA6M,SAHJ7M,KAAA4N,gBAAiB,EAuB/B,OAfID,EAAApO,UAAAuF,SAAA,SAASrD,GACL,OAAO6K,QAAQE,OAAO,IAAInH,IAG9BsI,EAAApO,UAAAuG,WAAA,SAAWrE,GAGP,OAFAzB,KAAK4N,gBAAiB,EAEftB,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAGvC+J,EAAApO,UAAA2G,aAAA,SAAazE,GAGT,OAFAzB,KAAK4N,gBAAiB,EAEftB,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAE3C+J,EAxBA,MCQA,SAAA9N,GAGI,SAAAgO,EACIpK,EACQqK,EACAxK,EACAyK,EACAC,EACAC,EACAC,GAPZ,IAAAnO,EASIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAPJD,EAAA+N,qBACA/N,EAAAuD,sBACAvD,EAAAgO,wBACAhO,EAAAiO,8BACAjO,EAAAkO,+BACAlO,EAAAmO,0BAuHhB,OAjIqDhL,EAAA,UAAA2K,EAAAhO,GAejDgO,EAAAtO,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,GAAIA,KAAK4N,eACL,OAAO/N,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,GAG5B,IAAMkC,EAAQ3D,KAAK6M,OAAOjJ,WACpBoG,EAAgBrG,EAAMQ,eAAeC,iBAAiB3C,EAAQuC,SAAUvC,EAAQ4C,WAChFoG,EAAS9G,EAAM8G,OAAOC,iBACtByD,EAAmB1D,EAASA,EAAOwB,aAAamC,aAAe,GAErE,IAAKpE,EACD,MAAM,IAAI1F,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,OAAOvE,KAAKkO,sBAAsBG,KAAKrE,EAAehK,KAAKsO,kBAAkBH,IACxEnM,KAAK,SAAAuM,GACFxO,EAAKyO,aAAeD,IAEvBvM,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrCoM,EAAAtO,UAAA2G,aAAA,SAAazE,GACT,OAAKzB,KAAK4N,gBAIN5N,KAAKwO,eACLxO,KAAKwO,kBAAe7J,GAGjB9E,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAPf5B,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAUlCoM,EAAAtO,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACUyO,EAAYjL,EAAQK,SAAWL,EAAQK,QAAQQ,UAErD,IAAKoK,EACD,MAAM,IAAIC,IAA6B,sBAG3C,IAAM5K,IAAmBN,EAAQM,eAE3B2G,EADQzK,KAAK6M,OAAOjJ,WACL6G,OAAOC,iBACtByD,EAAmB1D,EAASA,EAAOwB,aAAamC,aAAe,GAErE,OAAOpO,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6BW,kBAAkBH,GAAa3K,eAAcA,KAE9E9B,KAAK,SAAA2B,GAAS,OAAA5D,EAAK+N,mBAAmB5G,SAASvD,EAAM+C,SAASC,cAAelF,KAC7EO,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SACpB5O,EAAKiO,4BAA4Ba,kBAAkBJ,EAAWhN,MAEjEO,KAAK,SAAA2B,GAAS,OAAA5D,EAAK+O,cAAcX,EAAkBxK,EAAMQ,eAAeC,iBAAiBqK,MAEzFzM,KAAK,WAAM,WAAIsK,QAAe,iBAGvCuB,EAAAtO,UAAAuF,SAAA,SAASrD,GAAT,IAAA1B,EAAAC,KACI,OAAOA,KAAK6M,OAAO8B,SAAS3O,KAAKiO,6BAA6Bc,aAAatN,EAAQuC,WAC9EhC,KAAK,SAAA2B,GACF,IAAME,EAAUF,EAAME,QAAQuB,eACxBqF,EAAS9G,EAAM8G,OAAOG,mBACtBoE,EAAWrL,EAAMsL,eAAetI,YAAY,YAElD,IAAK9C,EACD,MAAM,IAAIS,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAKsD,IAAWA,EAAO5G,QAAQiJ,MAC3B,MAAM,IAAIxI,EAAA,EAAiBA,EAAA,EAAqB8I,uBAGpD,IAAK4B,IAAaA,EAASE,SACvB,MAAM,IAAIC,GAAA,EAAoBA,GAAA,EAAwBC,uBAG1D,IAAMC,GACFvL,eAAgBkL,EAASE,SAASpL,gBAGhCwL,GACFtL,SAAUH,EAAQyB,WAClBkE,aAAe+F,MAAO9E,EAAO5G,QAAQiJ,QAGzC,OAAO/M,EAAK8M,OAAO8B,SAAS5O,EAAKuD,oBAAoBkM,YAAYH,EAAc5N,IAC1EO,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,cAAc0G,SAIlFzB,EAAAtO,UAAAuP,cAAR,SAAsBW,EAAqBzF,GACvC,IAAKhK,KAAKwO,eAAiBxE,IAAkBA,EAAc0F,YACvD,MAAM,IAAIP,GAAA,EAAoBA,GAAA,EAAwBC,uBAG1DpP,KAAKwO,aAAa1I,YAAa6J,YAAa3P,KAAKsO,kBAAkBmB,KACnEzP,KAAKwO,aAAaoB,SAAU9C,MAAO9C,EAAc0F,eAG7C7B,EAAAtO,UAAA+O,kBAAR,SAA0BmB,GACtB,OAAQA,GACR,IAAK,YACD,MAAO,KAEX,IAAK,cACD,MAAO,KAEX,IAAK,gBACD,MAAO,KAEX,QACI,MAAO,OAGnB5B,EAjIA,CAAqDgC,8CCKrD,SAAAhQ,GAKI,SAAAiQ,EACIrM,EACQH,EACAyM,EACA9B,EACA+B,GALZ,IAAAjQ,EAOIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YALJD,EAAAuD,sBACAvD,EAAAgQ,+BACAhQ,EAAAkO,+BACAlO,EAAAiQ,gBAIRjQ,EAAKkQ,QAAUC,SAwLvB,OAtMsDhN,EAAA,UAAA4M,EAAAjQ,GAiBlDiQ,EAAAvQ,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,GAAIA,KAAK4N,eACL,OAAO/N,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,GAGpB,IAAA0O,EAAA1O,EAAA2O,OAAuBpM,EAAAvC,EAAAuC,SAEzBgG,EADQhK,KAAK6M,OAAOjJ,WACEO,eAAeC,iBAAiBJ,GAE5D,IAAKmM,EACD,MAAM,IAAI1G,EAAA,EAAqB,mFAGnC,IAAKO,EACD,MAAM,IAAI1F,EAAA,EAAiBA,EAAA,EAAqBC,sBAMpD,OAHAvE,KAAKqQ,eAAiBF,EACtBnQ,KAAKsQ,eAAiBtG,EAEf,IAAIsC,QAAQ,SAACC,EAASC,GAOzBzM,EAAKiQ,cAAcO,WAAWvG,EANd,WACZjK,EAAKyQ,cAAcL,GACdnO,KAAKuK,GACLjK,MAAMkK,KAIVlK,MAAMkK,KAEVxK,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrCqO,EAAAvQ,UAAA2G,aAAA,SAAazE,GACT,OAAKzB,KAAK4N,gBAIV5N,KAAKqQ,oBAAiB1L,EAEf9E,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IALf5B,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAQlCqO,EAAAvQ,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACUyQ,EAAczQ,KAAK0Q,uBAEzB,IAAKD,EACD,MAAM,IAAItB,GAAA,EAAoBA,GAAA,EAAwBC,uBAG1D,IAAK5L,EAAQK,QACT,MAAM,IAAI4F,EAAA,EAAqB,kFAG3B,IAAA7G,EAAAY,EAAAK,QAAwByL,GAAb1M,EAAA4G,YAAatG,EAAA,OAAAN,GAAA,iBAAqB+N,EAAAnN,EAAAM,sBAAA,IAAA6M,KAErD,OAAO3Q,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6BW,kBAAkBU,EAAetL,UAAYyM,YAAWA,EAAE3M,eAAcA,KAEzG9B,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SACpB5O,EAAKuD,oBAAoBkM,YAAWtM,EAAA,YAC7BM,GACHK,QAASyL,IACV7N,MAENa,MAAM,SAAAC,GACH,OAAIA,aAAiBqO,GAAA,GAAoC,0BAApBrO,EAAMJ,KAAKlC,MAAoCF,EAAKsQ,eAC9EtQ,EAAKyQ,cAAczQ,EAAKsQ,gBAC1BrO,KAAK,WAAM,OAAAsK,QAAQE,OAAOjK,KAG5B+J,QAAQE,OAAOjK,MAI1BuN,EAAAvQ,UAAAsR,eAAR,WACI,OAAO7Q,KAAKsQ,gBAAkBtQ,KAAKsQ,eAAe7F,OAAOqG,YAGrDhB,EAAAvQ,UAAAmR,qBAAR,WACI,IACMN,EADQpQ,KAAK6M,OAAOjJ,WACLqL,eAAetI,YAAY,UAEhD,OAAOyJ,EAASA,EAAOK,iBAAc9L,GAGjCmL,EAAAvQ,UAAAiR,cAAR,SAAsB/O,GAAtB,IAAA1B,EAAAC,KACI,OAAO,IAAIsM,QAAQ,SAACC,EAASC,GACjB,IAAAuE,EAAAtP,EAAAsP,UAAWnO,EAAAnB,EAAAuP,eAAA,IAAApO,EAAAqF,EAAA,KAAArF,EAAgB+N,EAAAlP,EAAAwP,uBAAA,IAAAN,EAAA1I,EAAA,KAAA0I,EAAwBO,EAAAzP,EAAA0P,eAAA,IAAAD,EAAAjJ,EAAA,KAAAiJ,EACrDT,EAAc1Q,EAAK2Q,uBACnBI,EAAa/Q,EAAK8Q,iBAExB,IAAKO,SAASC,eAAeN,GACzB,OAAOvE,EAAO,IAAI/C,EAAA,EAAqB,yEAG3C,IAAK1J,EAAKkQ,QAAQqB,kBACd,OAAO9E,EAAO,IAAI2C,GAAA,EAAoBA,GAAA,EAAwBC,wBAGlE,IAAK0B,EACD,OAAOtE,EAAO,IAAIlI,EAAA,EAAiBA,EAAA,EAAqBC,uBAG5D,IAAMgN,GACFC,uBAAwBf,EACxBgB,QAAUC,WAAY,cACtBC,MAAO,6EACPC,SAAUd,EACVE,QAAS,SAAAzO,GACLiK,EAAOjK,GACPyO,EAAQzO,IAEZ0O,gBAAiB,SAAAY,GACb9R,EAAK+R,6BACA9P,KAAK,WAAM,OAAAiP,EAAgBY,KAC3BvP,MAAM0O,IAEfG,QAAS,SAAAU,GACLtF,IACA4E,EAAQU,KAIXN,EAAcC,yBACfD,EAAcJ,QAAU,SAAAU,GACpB9R,EAAKgS,sBAAsBF,GACtB7P,KAAK,WACFuK,IACA4E,EAAQU,KAEXvP,MAAM0O,KAInB,IAAMgB,EAAS,IAAIjS,EAAKkQ,QAAQqB,kBAAkBW,QAAQC,OAAOX,GAIjE,OAFAS,EAAO7S,KAAK4R,GAELiB,KAIPlC,EAAAvQ,UAAAuS,2BAAR,eAAA/R,EAAAC,KACUyQ,EAAczQ,KAAK0Q,uBACnB1M,EAAWhE,KAAKsQ,gBAAkBtQ,KAAKsQ,eAAe/K,GAE5D,IAAKvB,IAAayM,EACd,MAAM,IAAI0B,GAAA,EAGd,OAAOnS,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6BmE,kBAAkBpO,GAAYyM,YAAWA,KAE1EzO,KAAK,SAAA2B,GACF,IAAMyM,EAASzM,EAAMsL,eAAetI,YAAY,UAC1C0L,EAAgBjC,GAAUA,EAAOkC,SAAWlC,EAAOkC,QAAQC,QAC3D7I,EAAiB/F,EAAM+F,eAAeC,oBACtC6I,EAAyB9I,GAAkBrL,OAAAoN,EAAA,EAAApN,CAAqBqL,GAEtE,IAAsB,IAAlB2I,EACA,MAAM,IAAIF,GAAA,EAGd,OAAKE,GAAiBhU,OAAAoU,GAAA,EAAApU,CAAuBgU,EAAeG,OACjDzS,EAAK8M,OAAOjJ,WAGhB7D,EAAK8M,OAAO8B,SACf5O,EAAKgQ,6BAA6B2C,cAAcrU,OAAAsU,GAAA,EAAAtU,CAAuBgU,QAK/EvC,EAAAvQ,UAAAwS,sBAAR,SAA8BF,GAC1B,OAAO7R,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6B2E,eAAe,UAC7CnC,YAAaoB,EAAegB,gCAI5C/C,EAtMA,CAAsDD,OCXtD,SAAAhQ,GACI,SAAAiT,EACIrP,EACQH,EACAyK,GAHZ,IAAAhO,EAKIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAHJD,EAAAuD,sBACAvD,EAAAgO,0BAkBhB,OAtBuD7K,EAAA,UAAA4P,EAAAjT,GASnDiT,EAAAvT,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACY6D,EAAAL,EAAAK,QAASiG,EAAA5G,EAAA,OAAAM,GAAA,YACXgG,EAAc3F,GAAWA,EAAQ2F,YAEvC,IAAK3F,IAAY2F,EACb,MAAM,IAAIkF,IAA6B,wBAG3C,OAAO1O,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,YAAY1F,EAAOrI,IACnEO,KAAK,WACF,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,cAAa1F,EAAA,YAAMW,GAAS2F,YAAWA,SAGvGsJ,EAtBA,CAAuDjD,OCNvD,SAAAhQ,GACI,SAAAkT,IAAA,IAAAhT,EACIF,EAAA/B,KAAAkC,KAAM,mCAAiCA,YAEvCD,EAAKE,KAAO,sBAEpB,OANyDiD,EAAA,UAAA6P,EAAAlT,GAMzDkT,EANA,CAAyD5P,EAAA,eCiBzD,SAAAtD,GAII,SAAAmT,EACIvP,EACQH,EACA0K,EACAC,EACAgF,GALZ,IAAAlT,EAOIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YALJD,EAAAuD,sBACAvD,EAAAiO,8BACAjO,EAAAkO,+BACAlO,EAAAkT,wBA+GhB,OAxHmD/P,EAAA,UAAA8P,EAAAnT,GAc/CmT,EAAAzT,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,OAAIA,KAAK4N,eACE/N,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,GAGrBzB,KAAKiT,oBAAoB5E,OAC3BrM,KAAK,SAAAkR,GAAkBnT,EAAKoT,cAAgBD,IAC5ClR,KAAK,WAUF,OATAjC,EAAKqT,aAAerT,EAAK8M,OAAOwG,UAC5B,WAAM,OAAAtT,EAAK6N,gBAAkB7N,EAAKuT,YAAY7R,IAC9C,SAAAkC,GACI,IAAM+C,EAAW/C,EAAM+C,SAASC,cAEhC,OAAOD,GAAYA,EAASa,aAI7BxH,EAAKuT,YAAY7R,KAE3BO,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrCuR,EAAAzT,UAAA2G,aAAA,SAAazE,GAKT,OAJIzB,KAAKoT,cACLpT,KAAKoT,eAGFvT,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAG9BuR,EAAAzT,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACI,IAAKwD,EAAQK,QACT,MAAM,IAAI4F,EAAA,EAAqB,yEAGnC,IAAQ7G,EAAAY,EAAAK,QAAwByL,GAAb1M,EAAA4G,YAAatG,EAAA,OAAAN,GAAA,iBAEhC,OAAO5C,KAAKuT,aACPvR,KAAK,SAACY,OAAE4Q,EAAA5Q,EAAA6Q,oBAA8C,OAAA1T,EAAK8M,OAAO8B,SAC/D5O,EAAKkO,6BAA6BW,kBAAkBU,EAAetL,UAAYwP,mBAAkBA,OAEpGxR,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SACpB5O,EAAKuD,oBAAoBkM,YAAWtM,EAAA,YAC7BM,GACHK,QAASyL,EAGTxL,gBAAgB,IACjBrC,OAIPuR,EAAAzT,UAAA+T,YAAR,SAAoB7R,GAApB,IAAA1B,EAAAC,KACI,IAAKyB,EAAQiS,OACT,MAAM,IAAIjK,EAAA,EAAqB,4EAG3B,IAAAzF,EAAAvC,EAAAuC,SAAUpB,EAAAnB,EAAAiS,OAAU3C,EAAAnO,EAAAmO,UAAW4C,EAAA/Q,EAAA+Q,OAEvC,OAAO3T,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkB7K,IAC1EhC,KAAK,SAAA2B,GAAS,WAAI2I,QAA4B,SAACC,EAASC,GACrD,IAAMxC,EAAgBrG,EAAMQ,eAAeC,iBAAiBJ,GAE5D,IAAKgG,EACD,MAAM,IAAI1F,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,IAAKxE,EAAKoT,gBAAkBnJ,EAAc0F,YACtC,MAAM,IAAIP,GAAA,EAAoBA,GAAA,EAAwBC,uBAG1DrP,EAAKoT,cAAcS,MAAOC,aAAc7J,EAAc0F,cAEtD3P,EAAKoT,cAAc9E,MAAO0C,UAASA,GAAI,SAAA9O,GAC/B0R,GACAA,EAAO1R,GAGNA,EAAS6R,UAGVvH,EAAQtK,GAFRuK,EAAO,IAAIuH,GAAA,UAQvBf,EAAAzT,UAAAgU,WAAR,eAAAxT,EAAAC,KACI,OAAO,IAAIsM,QAAQ,SAACC,EAASC,GACzB,IAAKzM,EAAKoT,cACN,MAAM,IAAIhE,GAAA,EAAoBA,GAAA,EAAwBC,uBAG1DrP,EAAKoT,cAAca,aAAc,SAAAC,GAC7B,OAAIA,EAAIC,SACG3H,EAAQ0H,GAGfA,EAAIH,UACGtH,EAAO,IAAI2H,SAGtB3H,EAAO,IAAIuH,GAAA,QAI3Bf,EAxHA,CAAmDnD,OCbnD,SAAAhQ,GACI,SAAAuU,EACI3Q,EACQH,GAFZ,IAAAvD,EAIIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAFJD,EAAAuD,wBAQhB,OAXmDJ,EAAA,UAAAkR,EAAAvU,GAQ/CuU,EAAA7U,UAAAgE,QAAA,SAAQC,EAA2B/B,GAC/B,OAAOzB,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,YAAYhM,EAAS/B,KAElF2S,EAXA,CAAmDvE,OCAnD,SAAAhQ,GACI,SAAAwU,EACI5Q,EACQH,GAFZ,IAAAvD,EAIIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAFJD,EAAAuD,wBAahB,OAhBoDJ,EAAA,UAAAmR,EAAAxU,GAQhDwU,EAAA9U,UAAAgE,QAAA,SAAQC,EAA2B/B,GAC/B,IAAM6S,EAAStU,KAAKsD,oBAAoBkM,YAAWtM,EAAA,YAC5CM,GACHK,QAASL,EAAQK,SAAYG,SAAUR,EAAQK,QAAQG,eAAaW,IACrElD,GAEH,OAAOzB,KAAK6M,OAAO8B,SAAS2F,IAEpCD,EAhBA,CAAoDxE,gBCGpD,SAAAhQ,GACI,SAAA0U,EACI9Q,EACQH,EACAyK,GAHZ,IAAAhO,EAKIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAHJD,EAAAuD,sBACAvD,EAAAgO,0BAyChB,OA7CoD7K,EAAA,UAAAqR,EAAA1U,GAShD0U,EAAAhV,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACY6D,EAAAL,EAAAK,QAASiG,EAAA5G,EAAA,OAAAM,GAAA,YACXgG,EAAc3F,GAAWA,EAAQ2F,YACjC6F,EAAerP,KAAKwU,yBAAyB3Q,GAAWL,EAAUsG,EAExE,IAAKjG,IAAY2F,EACb,MAAM,IAAIkF,IAA6B,wBAG3C,OAAO1O,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,YAAYH,EAAc5N,IAC1EO,KAAK,WACF,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsB3E,yBAAwBlG,EAAA,YAAMW,GAAS2F,YAAWA,SAI9G+K,EAAAhV,UAAAuF,SAAA,SAASrD,GACL,IAAMkC,EAAQ3D,KAAK6M,OAAOjJ,WACpBkG,EAAQnG,EAAMmG,MAAMC,WACpB2C,EAAS/I,EAAME,QAAQ4Q,mBAE7B,OAAI3K,GAAU4C,IAAWgI,GAAA,GAAkChI,IAAWgI,GAAA,EAI/D7U,EAAAN,UAAMuF,SAAQhH,KAAAkC,MAHVA,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBqR,cAAc7K,EAAMlD,QAASnF,KAMlF8S,EAAAhV,UAAAiV,yBAAR,SAAiC3Q,GAG7B,QAAKA,IAIwB,UAAtBA,EAAQQ,WAA8C,iBAArBR,EAAQG,WAExDuQ,EA7CA,CAAoD1E,OCApD,SAAAhQ,GACI,SAAA+U,EACInR,EACQH,EACAyK,GAHZ,IAAAhO,EAKIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAHJD,EAAAuD,sBACAvD,EAAAgO,0BAiChB,OArCsD7K,EAAA,UAAA0R,EAAA/U,GASlD+U,EAAArV,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACI,GAAIA,KAAK6U,yBACL,OAAO7U,KAAK6M,OAAO8B,SACf3O,KAAKsD,oBAAoBkM,YAAWtM,EAAA,YAC7BM,GACHK,QAASL,EAAQK,SAAYG,SAAUR,EAAQK,QAAQG,eAAaW,IACrElD,IAIH,IAAAoC,EAAAL,EAAAK,QAASiG,EAAA5G,EAAA,OAAAM,GAAA,YACXgG,EAAc3F,GAAWA,EAAQ2F,YAEvC,IAAK3F,IAAY2F,EACb,MAAM,IAAIkF,IAA6B,wBAG3C,OAAO1O,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,YAAY1F,EAAOrI,IACnEO,KAAK,WACF,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,cAAa1F,EAAA,YAAMW,GAAS2F,YAAWA,SAI3FoL,EAAArV,UAAAsV,uBAAR,WAGI,OAFc7U,KAAK6M,OAAOjJ,WAEbC,QAAQ4Q,qBAAuBC,GAAA,GAEpDE,EArCA,CAAsD/E,OCEtD,SAAAhQ,GAKI,SAAAiV,EACIrR,EACQH,EACA0M,EACAC,QAAA,IAAAA,MAAAC,QAJZ,IAAAnQ,EAMIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAJJD,EAAAuD,sBACAvD,EAAAiQ,gBACAjQ,EAAAkQ,UANJlQ,EAAAgV,kBAA4B,IAoHxC,OAvH0D7R,EAAA,UAAA4R,EAAAjV,GActDiV,EAAAvV,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACU2D,EAAQ3D,KAAK6M,OAAOjJ,WAK1B,OAHA5D,KAAKsQ,eAAiB3M,EAAMQ,eAAeC,iBAAiB3C,EAAQuC,UACpEhE,KAAK+U,kBAAwF,KAApEtT,EAAQuT,eAAiBvT,EAAQuT,cAAcC,kBAEnEjV,KAAKkV,uBAAyBlV,KAAK4N,eAC7B/N,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,GAGrBzB,KAAKgQ,cAAcmF,aACrBnT,KAAK,SAAAoT,GAGF,GAFArV,EAAKsV,WAAaD,GAEbrV,EAAKuQ,iBAAmBvQ,EAAKuQ,eAAe7F,OAAOqG,WACpD,MAAM,IAAIxM,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpDxE,EAAKsV,WAAW3O,SAAS4O,MAAMvV,EAAKuQ,eAAe7F,OAAOqG,YACtDyE,OAAQ,gBACRC,YAAazV,EAAKuQ,eAAe7F,OAAOgL,SAAW,UAAY,iBAGtEzT,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrCqT,EAAAvV,UAAA2G,aAAA,WACI,OAAKlG,KAAK4N,gBAIN5N,KAAKkV,uBAAyBlV,KAAKqV,aACnCrV,KAAKqV,WAAW3O,SAASgP,YACzB1V,KAAKqV,gBAAa1Q,GAGf9E,EAAAN,UAAM2G,aAAYpI,KAAAkC,OARdH,EAAAN,UAAM2G,aAAYpI,KAAAkC,OAWjC8U,EAAAvV,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACUoV,EAASpV,KAAKqV,WAEpB,GAAIrV,KAAK2V,6BACL,OAAO3V,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,YAAYhM,EAAS/B,IAG9E,IAAKzB,KAAKkV,uBAAyBlV,KAAK+U,iBACpC,OAAO/U,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,YAAYhM,EAAS/B,IACrEO,KAAK,SAAA2B,GACF,IAAMiS,EAAcjS,EAAME,QAAQgS,wBAOlC,OALID,IACA7V,EAAKkQ,QAAQ6F,IAAIC,SAASC,KAAOJ,GAI9B,IAAItJ,QAAe,gBAItC,IAAK8I,EACD,MAAM,IAAIjG,GAAA,EAAoBA,GAAA,EAAwBC,uBAK1D,OAFAgG,EAAO1O,SAASuP,SAETjW,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,YAAYhM,EAAS/B,IACrEO,KAAK,SAAA2B,GACF,IAAMiS,EAAcjS,EAAME,QAAQgS,wBAOlC,OALID,GACAR,EAAO1O,SAASwP,UAAUN,GAIvB,IAAItJ,QAAe,gBAE7BhK,MAAM,SAAAC,GAGH,OAFA6S,EAAO1O,SAASgP,YAETpJ,QAAQE,OAAOjK,MAIlCuS,EAAAvV,UAAAuF,SAAA,SAASrD,GACL,IACMqI,EADQ9J,KAAK6M,OAAOjJ,WACNkG,MAAMC,WAE1B,OAAID,GAAS9J,KAAK2V,6BACP3V,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBqR,cAAc7K,EAAMlD,QAASnF,IAG/E5B,EAAAN,UAAMuF,SAAQhH,KAAAkC,OAGjB8U,EAAAvV,UAAAoW,2BAAR,WACI,IAAMhS,EAAQ3D,KAAK6M,OAAOjJ,WAE1B,OAAOD,EAAME,QAAQ4Q,qBAAuBC,GAAA,GACrC/Q,EAAME,QAAQ4Q,qBAAuBC,GAAA,GAGxCI,EAAAvV,UAAA2V,oBAAR,WACI,SAAUlV,KAAKsQ,iBAAkBtQ,KAAKsQ,eAAe7F,OAAOqG,aAEpEgE,EAvHA,CAA0DjF,OCC1D,SAAAhQ,GACI,SAAAsW,EACI1S,EACQH,EACAyK,EACAqI,GAJZ,IAAArW,EAMIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAJJD,EAAAuD,sBACAvD,EAAAgO,wBACAhO,EAAAqW,gBA0ChB,OA/CoDlT,EAAA,UAAAiT,EAAAtW,GAUhDsW,EAAA5W,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACY6D,EAAAL,EAAAK,QAASiG,EAAA5G,EAAA,OAAAM,GAAA,YACXgG,EAAc3F,GAAWA,EAAQ2F,YAEvC,IAAK3F,IAAY2F,EACb,MAAM,IAAIkF,IAA6B,wBAG3C,OAAO1O,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,YAAY1F,EAAOrI,IACnEO,KAAK,WACF,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,cAAa1F,EAAA,YAAMW,GAAS2F,YAAWA,QAE1FlH,MAAM,SAAAC,GACH,OAAMA,aAAiBqO,GAAA,GAAkBvS,OAAA4J,EAAA,KAAA5J,CAAKkE,EAAMJ,KAAKkU,QAAUC,KAAM,4BAIlE,IAAIhK,QAAQ,WACfvM,EAAKqW,YAAYG,SAAShU,EAAMJ,KAAKqU,gBAAgBC,SACjDC,MAAOnU,EAAMJ,KAAKqU,gBAAgBG,mBAClCC,QAASrU,EAAMJ,KAAKqU,gBAAgBK,aACpCC,GAAIvU,EAAMJ,KAAKqU,gBAAgBO,kBAP5BzK,QAAQE,OAAOjK,MAatC4T,EAAA5W,UAAAuF,SAAA,SAASrD,GACL,IAAMkC,EAAQ3D,KAAK6M,OAAOjJ,WACpBkG,EAAQnG,EAAMmG,MAAMC,WAE1B,OAAID,GAASnG,EAAME,QAAQ4Q,qBAAuBC,GAAA,EACvC1U,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBqR,cAAc7K,EAAMlD,QAASnF,IAG/E5B,EAAAN,UAAMuF,SAAQhH,KAAAkC,OAE7BmW,EA/CA,CAAoDtG,iBCVpD,SAAAhQ,GACI,SAAAmX,EAAYlX,GAAZ,IAAAC,EACIF,EAAA/B,KAAAkC,KAAMF,GAAW,8BAA4BE,YAE7CD,EAAKE,KAAO,wBAEpB,OANqDiD,EAAA,UAAA8T,EAAAnX,GAMrDmX,EANA,CAAqD7T,EAAA,cjBiErD,SAAYqF,GACRA,EAAA,mCACAA,EAAA,oBACAA,EAAA,iCACAA,EAAA,UACAA,EAAA,wBACAA,EAAA,0BACAA,EAAA,sBACAA,EAAA,YACAA,EAAA,8BATJ,CAAYA,aAYZ,SAAYC,GACRA,EAAA,oBACAA,EAAA,wBACAA,EAAA,YAHJ,CAAYA,akBxCZ,gBAAA5I,GAMI,SAAAoX,EACIxT,EACQyT,EACA5T,EACAyK,EACAC,EACAmJ,EACAzU,EACAsN,GARZ,IAAAjQ,EAUIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YARJD,EAAAmX,yBACAnX,EAAAuD,sBACAvD,EAAAgO,wBACAhO,EAAAiO,8BACAjO,EAAAoX,gCACApX,EAAA2C,iBACA3C,EAAAiQ,kBA8NhB,OA5OmD9M,EAAA,UAAA+T,EAAApX,GAmB/CoX,EAAA1X,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACYgE,EAAAvC,EAAAuC,SAGR,OAFAhE,KAAKoX,mBAAmBpT,GAEjBhE,KAAKgQ,cAAc3B,OACrBrM,KAAK,SAAAqV,GACF,WAAI/K,QAAQ,SAACC,EAASC,GAClBzM,EAAKuX,aAAeD,EAChBtX,EAAKwX,gBAAgB9V,GAAW8K,QAAOA,EAAEC,OAAMA,KAEnDzM,EAAKuX,aAAaE,YAEzBxV,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrCwV,EAAA1X,UAAAgE,QAAA,SAAQkU,EAAgChW,GAAxC,IAAA1B,EAAAC,KACY6D,EAAA4T,EAAA5T,QAER,IAAKA,IAAYA,EAAQG,SACrB,MAAM,IAAIyF,EAAA,EAAqB,yFAKnC,OAFAzJ,KAAKoX,mBAAmBvT,EAAQG,UAEzBhE,KAAK0X,oBAAoB7T,EAAQG,UACnChC,KAAK,SAAAwH,GACF,OAAAzJ,EAAK8M,OAAO8B,SAAS5O,EAAKuD,oBAAoBkM,YAAYnR,OAAA4J,EAAA,KAAA5J,CAAKoZ,EAAc,WAAYhW,IACxFO,KAAK,WACF,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,cAAa1F,EAAA,YAAMW,GAAS2F,YAAWA,WAI/FyN,EAAA1X,UAAA6X,mBAAR,SAA2BpT,GACvB,IAAML,EAAQ3D,KAAK6M,OAAOjJ,WAG1B,GAFA5D,KAAKsQ,eAAiB3M,EAAMQ,eAAeC,iBAAiBJ,IAEvDhE,KAAKsQ,iBAAmBtQ,KAAKsQ,eAAenE,mBAC7C,MAAM,IAAI7H,EAAA,EAAiBA,EAAA,EAAqBC,uBAIhD0S,EAAA1X,UAAAoY,gBAAR,SAAwBlI,GACpB,OAAQA,EAAYmI,eAChB,IAAK,aACD,MAAO,KACX,IAAK,YACD,MAAO,KACX,QACI,MAAO,OAIXX,EAAA1X,UAAAmY,oBAAR,SAA4B1T,GAA5B,IAAAjE,EAAAC,KAEUgK,EADQhK,KAAK6M,OAAOjJ,WACEO,eAAeC,iBAAiBJ,GAE5D,GAAIgG,EAAe,CACP,IAAAmC,EAAAnC,EAAAmC,mBACR,GAAIA,GAAsBA,EAAmB3C,YAAY+F,MACrD,OAAOjD,QAAQC,SAAUgD,MAAOvF,EAAcmC,mBAAmB3C,YAAY+F,QAIrF,OAAO,IAAIjD,QAAyB,SAACC,EAASC,GAC1C,IAAKzM,EAAKuX,aACN,MAAM,IAAInI,GAAA,EAAoBA,GAAA,EAAwBC,uBAGtDrP,EAAK8X,uBACL9X,EAAK8X,sBAAsBrL,OAAO,IAAIsL,GAAA,GAG1C/X,EAAK8X,uBAA0BtL,QAAOA,EAAEC,OAAMA,GAC9CzM,EAAKuX,aAAaS,sBAIlBd,EAAA1X,UAAAgY,gBAAR,SAAwB9V,EAAmCuW,GAA3D,IAAAjY,EAAAC,KACYiY,EAAAxW,EAAAyW,OAER,IAAKD,IAAkBjY,KAAKsQ,eACxB,MAAM,IAAI7G,EAAA,EAAqB,wEAKnC,OAFAzJ,KAAKmY,eAAiBF,EAEtB/U,EAAA,YACOlD,KAAKmY,eACLnY,KAAKsQ,eAAenE,oBACvBiM,WACIC,0BAA2B,SAAChC,EAAQ9G,EAAO+I,EAAUC,EAAgBC,GAC7DF,GAAYA,EAASG,sBAAwBhQ,GAAkBiQ,KAC/D3Y,EAAK4Y,2BAA2BtC,EAAQ9G,EAAO+I,EAAUC,EAAgBC,GAEzEzY,EAAK6Y,yBAAyBvC,EAAQ9G,IAG9CsJ,qBAAsB,WAAM,OAAA9Y,EAAK+Y,0BACjCC,iBAAkB,SAAAC,GACN,IAAAC,EAAAhB,EAAAgB,WAEJA,GACAlZ,EAAKmZ,oBAAoBF,EAASC,IAG1CE,kBAAmB,WACfnB,EAASzL,UACTxM,EAAKqZ,kBAETC,2BAA4B,WAAM,OAAArB,EAASxL,OAAO,IAAI8M,SAK1DrC,EAAA1X,UAAAoZ,2BAAR,SAAmCtC,EAAiC9G,EAAgB+I,EAAqBC,EAA0BC,GAAnI,IAAAzY,EAAAC,KACQqW,GAAUrW,KAAKmY,gBAAkBnY,KAAKmY,eAAenH,QACrDhR,KAAKmY,eAAenH,QAAQqF,GACrB9G,GAASvP,KAAKsQ,gBACrBtQ,KAAKuZ,2BAA2BvZ,KAAKsQ,eAAe/K,GAAIgK,EAAO+I,EAAUC,EAAgBC,GACpFxW,KAAK,WAAM,OAAAjC,EAAKoY,gBAAkBpY,EAAKoY,eAAelH,iBAAmBlR,EAAKoY,eAAelH,oBAC7F3O,MAAM,SAAAC,GAAS,OAAAxC,EAAKoY,gBAAkBpY,EAAKoY,eAAenH,SAAWjR,EAAKoY,eAAenH,QAAQzO,MAItG0U,EAAA1X,UAAAqZ,yBAAR,SAAiCvC,EAAiC9G,GAC9D,IAAKvP,KAAK6X,sBACN,MAAM,IAAI1U,EAAA,EAGVkT,GAAUrW,KAAKmY,gBAAkBnY,KAAKmY,eAAenH,SACrDhR,KAAKmY,eAAenH,QAAQqF,GAC5BrW,KAAK6X,sBAAsBrL,OAAO6J,IAC3B9G,GACPvP,KAAK6X,sBAAsBtL,SAAUgD,MAAKA,KAI1C0H,EAAA1X,UAAAga,2BAAR,SACIvV,EACAuL,EACA+I,EACAC,EACAC,GALJ,IAAAzY,EAAAC,KAOI,OAAOA,KAAK6M,OAAO8B,SAAS3O,KAAKmX,8BAA8B7Q,kBAAkB,WAC7E,OAAOvG,EAAKyZ,yBAAyBjK,EAAO+I,EAAUC,EAAgBC,GACrExW,KAAK,WACF,OAAAsK,QAAQmN,KACR1Z,EAAK8M,OAAO8B,SAAS5O,EAAKmX,uBAAuBwC,uBACjD3Z,EAAK8M,OAAO8B,SAAS5O,EAAKiO,4BAA4Ba,kBAAkB7K,UAE3EA,SAAQA,KAAO2V,QAAS,uBAGzB1C,EAAA1X,UAAAuZ,uBAAR,WACI,IAAMnV,EAAQ3D,KAAK6M,OAAOjJ,WACpB8C,EAAW/C,EAAM+C,SAASC,cAC1B6D,EAAc7G,EAAM8G,OAAOC,iBAEjC,IAAKhE,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAKqD,EACD,MAAM,IAAIlG,EAAA,EAAiBA,EAAA,EAAqB8I,uBAGpD,OACIwM,wBAAwB,EACxBC,oBAAoB,EACpBC,aAActP,EAAYuP,SAASzD,KACnC3G,YAAa3P,KAAK2X,gBAAgBnN,EAAYyB,aAAamC,cAC3D4L,OACIC,MAAOzP,EAAYyB,aAAaiO,UAChCC,OAAQC,OAAO1T,EAAS2T,UACxBC,SAAS,KAKbrD,EAAA1X,UAAAia,yBAAR,SAAiCjK,EAAgB+I,EAAqBC,EAA0BC,GAC5F,OAAOxY,KAAK0C,eAAe6X,KAAK,iBAC5BzX,SACI0X,OAAQ,YACRC,eAAgB,qCAEpBtY,KAAM9D,OAAAqc,GAAA,EAAArc,EACFkR,MAAKA,EACLoL,SAAU,WACVrG,OAAQ,wBACRgE,SAAUsC,KAAKC,UAAUvC,GACzBC,eAAgBqC,KAAKC,UAAUtC,GAC/BC,gBAAiBoC,KAAKC,UAAUrC,QAKpCvB,EAAA1X,UAAA6Z,eAAR,WACI,IACM1P,EADQ1J,KAAK6M,OAAOjJ,WACG8F,eAAeC,oBAE5C,IAAK3J,KAAKsX,aACN,MAAM,IAAInI,GAAA,EAAoBA,GAAA,EAAwBC,uBAGtD1F,GAAkBA,EAAeoR,YACjC9a,KAAKsX,aAAayD,cAAcrR,EAAeoR,aAI/C7D,EAAA1X,UAAA2Z,oBAAR,SAA4BF,EAAqCgC,GAC7D,IAAMC,EAAgB7J,SAASC,eAAe2J,EAAQE,WAElDD,GAAiBjC,EAAQC,aACzBgC,EAAcE,MAAMvL,QAAU,iBAG1CqH,EA5OA,CAAmDpH,OC/BnD,SAAAhQ,GACI,SAAAub,EACI3X,EACQH,GAFZ,IAAAvD,EAIIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAFJD,EAAAuD,wBAUhB,OAbkEJ,EAAA,UAAAkY,EAAAvb,GAQ9Dub,EAAA7b,UAAAgE,QAAA,SAAQkU,EAAgChW,GACpC,OAAOzB,KAAK6M,OAAO8B,SACf3O,KAAKsD,oBAAoBkM,YAAYnR,OAAA4J,EAAA,KAAA5J,CAAKoZ,EAAc,WAAYhW,KAGhF2Z,EAbA,CAAkEvL,ICMlE,gBAAAhQ,GAGI,SAAAwb,EACI5X,EACQH,EACAyK,EACAC,EACAsN,GALZ,IAAAvb,EAOIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YALJD,EAAAuD,sBACAvD,EAAAgO,wBACAhO,EAAAiO,8BACAjO,EAAAub,+BA0FhB,OAlGgEpY,EAAA,UAAAmY,EAAAxb,GAa5Dwb,EAAA9b,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,OAAOA,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkBpN,EAAQuC,WAClFhC,KAAK,SAAA2B,GACF,IAAMqG,EAAgBrG,EAAMQ,eAAeC,iBAAiB3C,EAAQuC,UAEpE,IAAKgG,IAAkBA,EAAc0F,YACjC,MAAM,IAAIpL,EAAA,EAAiBA,EAAA,EAAqBC,sBAMpD,OAHAxE,EAAKub,2BAA2BxV,WAAWkE,EAAc0F,YAAajO,EAAQ8Z,WAC9Exb,EAAKyb,cAAgBxR,EAAcS,OAAOgR,aAEnC5b,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,KAE3Ba,MAAM,SAACC,GAAiB,OAAAxC,EAAK2b,aAAanZ,MAGnD8Y,EAAA9b,UAAAgE,QAAA,SAAQkU,EAAgChW,GAAxC,IAAA1B,EAAAC,KACY6D,EAAA4T,EAAA5T,QAASiG,EAAA5G,EAAA,OAAAuU,GAAA,YAEjB,IAAK5T,EACD,MAAM,IAAI6K,IAA6B,YAG3C,OAAO1O,KAAK6M,OAAO8B,SACf3O,KAAKsD,oBAAoBkM,YAAY1F,EAAOrI,IAE3CO,KAAK,SAAA2B,GACF,OAAAA,EAAME,QAAQI,sBAAsB6F,EAAMhG,iBAAmBD,EACzD9D,EAAK4b,oBAAoB9X,GACzByI,QAAQC,QAAQ1I,KAEvB7B,KAAK,SAAA6B,GACF,OAAA9D,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,cAAc/E,MAEjEvB,MAAM,SAACC,GAAiB,OAAAxC,EAAK2b,aAAanZ,MAGnD8Y,EAAA9b,UAAA2G,aAAA,SAAazE,GAAb,IAAA1B,EAAAC,KACI,OAAOA,KAAKsb,2BAA2BpV,eAClClE,KAAK,WAAM,OAAAnC,EAAAN,UAAM2G,aAAYpI,KAAAiC,EAAC0B,MAG/B4Z,EAAA9b,UAAAmc,aAAR,SAAqBnZ,GACjB,GAAmB,mBAAfA,EAAMrE,KACN,MAAM,IAAIiF,EAAA,EAAcZ,EAAMzC,SAGlC,MAAMyC,GAGF8Y,EAAA9b,UAAAqc,iBAAR,SAAyBpS,GACrB,OC5EM,SAA2BnB,GACrC,IAAMwT,EAAOxT,EAEb,OAAQD,GAAoByT,IACD,iBAAhBA,EAAKC,QACa,iBAAlBD,EAAKE,UACW,iBAAhBF,EAAKG,QACa,iBAAlBH,EAAKI,UACmB,iBAAxBJ,EAAKI,SAASC,OACS,iBAAvBL,EAAKI,SAASE,KDmEjBC,CAAiB5S,GACVlB,QAAQkB,EAAY6S,sBAGxBjU,GAAoBoB,IAGvB6R,EAAA9b,UAAAoc,oBAAR,SAA4B9X,GAChB,IAAA2F,EAAA3F,EAAA2F,YACF7F,EAAQ3D,KAAK6M,OAAOjJ,WAE1B,GAAI4F,GAAexJ,KAAK4b,iBAAiBpS,GACrC,OAAO8C,QAAQC,QAAQ1I,GAG3B,IAAM6C,EAAW/C,EAAM+C,SAASC,cAC1B+C,EAAiB/F,EAAM+F,eAAeC,oBAE5C,IAAKjD,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAKuC,EACD,MAAM,IAAIpF,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAMmV,EAAgBtc,KAAKwb,cACvBxb,KAAKsb,2BAA2BiB,WAAW1Y,EAAS6F,EAAgBhD,EAASa,YAC7EvH,KAAKsb,2BAA2BkB,aAAa3Y,EAAS6F,GAE1D,OAAO1J,KAAKsb,2BAA2BmB,gBAAgBH,GAClDta,KAAK,SAAAwH,GAAe,OAAAtG,EAAA,YAAMW,GAAS2F,YAAWA,OAE3D6R,EAlGA,CAAgExL,OEDhE,SAAAhQ,GAGI,SAAA6c,EACIjZ,EACQH,EACAyK,EACAC,EACAsN,EACAqB,QAAA,IAAAA,OAAA,GANZ,IAAA5c,EAQIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YANJD,EAAAuD,sBACAvD,EAAAgO,wBACAhO,EAAAiO,8BACAjO,EAAAub,6BACAvb,EAAA4c,YAsFhB,OA/F4DzZ,EAAA,UAAAwZ,EAAA7c,GAcxD6c,EAAAnd,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACY4c,EAAAnb,EAAA8Z,UAA6BvX,EAAAvC,EAAAuC,SAIrC,OAFAhE,KAAKsQ,eAAiBtQ,KAAK6M,OAAOjJ,WAAWO,eAAeC,iBAAiBJ,GAEzEhE,KAAKsQ,gBAAkBtQ,KAAKsQ,eAAef,MACpC1P,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,GAGrBzB,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkB7K,IAC1EhC,KAAK,SAAA2B,GAGF,GAFA5D,EAAKuQ,eAAiB3M,EAAMQ,eAAeC,iBAAiBJ,IAEvDjE,EAAKuQ,iBAAmBvQ,EAAKuQ,eAAeZ,YAC7C,MAAM,IAAIpL,EAAA,EAAiBA,EAAA,EAAqBC,sBAKpD,OAFAxE,EAAKub,2BAA2BxV,WAAW/F,EAAKuQ,eAAeZ,YAAakN,GAErE7c,EAAKub,2BAA2BuB,kBAE1C7a,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,KAC5Ba,MAAM,SAACC,GAAiB,OAAAxC,EAAK2b,aAAanZ,MAGnDma,EAAAnd,UAAAgE,QAAA,SAAQkU,EAAgChW,GAAxC,IAAA1B,EAAAC,KACY6D,EAAA4T,EAAA5T,QAASiG,EAAA5G,EAAA,OAAAuU,GAAA,YAEjB,IAAK5T,EACD,MAAM,IAAI6K,IAA6B,YAG3C,OAAQ7K,EAAU7D,KAAK2b,oBAAoB9X,GAAWyI,QAAQC,QAAQ1I,IACjE7B,KAAK,SAAA6B,GAAW,OAAAyI,QAAQmN,KAAK5V,EAAS9D,EAAK8M,OAAO8B,SAAS5O,EAAKuD,oBAAoBkM,YAAY1F,EAAOrI,QACvGO,KAAK,SAACY,OAACiB,EAAAjB,EAAA,GAAa,OAAA7C,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,cAAc/E,MAClFvB,MAAM,SAACC,GAAiB,OAAAxC,EAAK2b,aAAanZ,MAGnDma,EAAAnd,UAAA2G,aAAA,SAAazE,GAAb,IAAA1B,EAAAC,KACI,OAAOA,KAAKsb,2BAA2BpV,eAClClE,KAAK,WAAM,OAAAnC,EAAAN,UAAM2G,aAAYpI,KAAAiC,EAAC0B,MAG/Bib,EAAAnd,UAAAmc,aAAR,SAAqBnZ,GACjB,GAAmB,mBAAfA,EAAMrE,KACN,MAAM,IAAIiF,EAAA,EAAcZ,EAAMzC,SAGlC,MAAMyC,GAGFma,EAAAnd,UAAAoc,oBAAR,SAA4B9X,GACxB,IAAMF,EAAQ3D,KAAK6M,OAAOjJ,WACpB8C,EAAW/C,EAAM+C,SAASC,cAC1B8D,EAAS9G,EAAM8G,OAAOC,iBAE5B,IAAKhE,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAKsD,EACD,MAAM,IAAInG,EAAA,EAAiBA,EAAA,EAAqB8I,uBAGpD,IAAKpN,KAAKsQ,eACN,MAAM,IAAInB,GAAA,EAAoBA,GAAA,EAAwBC,uBAGlD,IAAA2K,EAAAtP,EAAAsP,SAA0B+C,EAAArS,EAAAwB,aAAA6Q,cAC5Bla,EAAA5C,KAAAsQ,eAAEpM,EAAAtB,EAAAsB,OAAQqL,EAAA3M,EAAA2M,MAEhB,GAAIA,EACA,OAAOjD,QAAQC,QAAOrJ,EAAA,YAAMW,GAAS2F,aAAe+F,MAAKA,EAAErL,OAAMA,MAGrE,IAAMoY,EAAgBtc,KAAKsb,2BACtBlG,OAAO1O,EAASa,WAAYuV,EAAe/C,EAASzD,KAAMtW,KAAK2c,SAEpE,OAAO3c,KAAKsb,2BAA2BmB,gBAAgBH,GAClDta,KAAK,SAAAwH,GAAe,OAAAtG,EAAA,YAAMW,GAAS2F,YAAWtG,EAAA,YAAOsG,GAAatF,OAAMA,SAErFwY,EA/FA,CAA4D7M,OCG5D,SAAAhQ,GAGI,SAAAkd,EACItZ,EACQyT,EACAlJ,EACAmJ,EACApJ,EACAzK,EACA0Z,EACAC,GARZ,IAAAld,EAUIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YARJD,EAAAmX,yBACAnX,EAAAiO,8BACAjO,EAAAoX,gCACApX,EAAAgO,wBACAhO,EAAAuD,sBACAvD,EAAAid,yCACAjd,EAAAkd,8BAkHhB,OA7HkE/Z,EAAA,UAAA6Z,EAAAld,GAgB9Dkd,EAAAxd,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACYkd,EAAAzb,EAAA0b,sBAA4CnZ,EAAAvC,EAAAuC,SAEpD,IAAKkZ,EACD,MAAM,IAAIzT,EAAA,EAAqB,kGAGnC,OAAOzJ,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkB7K,IAC1EhC,KAAK,SAAA2B,GACF5D,EAAKuQ,eAAiB3M,EAAMQ,eAAeC,iBAAiBJ,GAE5D,IAAM0C,EAAW/C,EAAM+C,SAASC,cAC1B6D,EAAc7G,EAAM8G,OAAOC,iBAEjC,IAAKhE,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAKqD,EACD,MAAM,IAAIlG,EAAA,EAAiBA,EAAA,EAAqB8I,uBAGpD,IAAKrN,EAAKuQ,iBAAmBvQ,EAAKuQ,eAAeZ,YAC7C,MAAM,IAAIpL,EAAA,EAAiBA,EAAA,EAAqBC,sBAIhD,IAAA3B,EAAAsa,EAAAlM,eAAA,IAAApO,EAAA,aAAAA,EACA+N,EAAAuM,EAAAjM,uBAAA,IAAAN,EAAA,aAAAA,EAGEyM,GACFpa,OAAQwH,EAAYyB,aAAa6Q,cACjCO,iBAAiB,EACjBhD,SAAU3T,EAAS2T,SACnBP,aAActP,EAAYuP,SAASzD,MAGvC,OAAOhK,QAAQmN,KACX1Z,EAAKkd,0BAA0B5O,KAAKtO,EAAKuQ,eAAe7F,OAAOgL,UAC/D1V,EAAKid,uCAAuClX,WAAW/F,EAAKuQ,eAAeZ,YAAa0N,KAE3Fpb,KAAK,SAACY,OAAC0a,EAAA1a,EAAA,GAAc2a,EAAA3a,EAAA,GAClB0a,EAAa1J,KAAK2J,GAClBD,EAAaE,GAAG,kBAAmB,SAACC,GAChC,OAAA1d,EAAKwZ,2BAA2BkE,GAC3Bzb,KAAK,WAAM,OAAAiP,MACX3O,MAAM,SAAAC,GAAS,OAAAyO,EAAQzO,OAEhC+a,EAAaE,GAAG,gBAAiB,SAAC3Z,EAAStB,GAAU,OAAAyO,EAAQzO,SAGpEP,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrCsb,EAAAxd,UAAAgE,QAAA,SAAQkU,EAAgChW,GAAxC,IAAA1B,EAAAC,KACY6D,EAAA4T,EAAA5T,QAASiG,EAAA5G,EAAA,OAAAuU,GAAA,YAEjB,IAAK5T,EACD,MAAM,IAAI4F,EAAA,EAAqB,gFAGnC,IAAKzJ,KAAKsQ,iBAAmBtQ,KAAKsQ,eAAenE,qBAAuBnM,KAAKsQ,eAAenE,mBAAmBoD,MAC3G,MAAM,IAAIjL,EAAA,EAAiBA,EAAA,EAAqBC,sBAG5C,IAAAgL,EAAAvP,KAAAsQ,eAAAnE,mBAAAoD,MAER,OAAOvP,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,YAAY1F,EAAOrI,IACnEO,KAAK,WACF,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,cAAa1F,EAAA,YAAMW,GAAS2F,aAAe+F,MAAKA,SAEnGjN,MAAM,SAACC,GAAiB,OAAAxC,EAAK2b,aAAanZ,MAGnDwa,EAAAxd,UAAA2G,aAAA,SAAazE,GAAb,IAAA1B,EAAAC,KACI,OAAOA,KAAKgd,uCAAuC9W,eAC9ClE,KAAK,WAAM,OAAAnC,EAAAN,UAAM2G,aAAYpI,KAAAiC,EAAC0B,MAG/Bsb,EAAAxd,UAAAga,2BAAR,SAAmCkE,GAAnC,IAAA1d,EAAAC,KACU2D,EAAQ3D,KAAK6M,OAAOjJ,WAE1B,IAAK5D,KAAKsQ,eACN,MAAM,IAAIlQ,MAAM,kCAGZ,IAAA4D,EAAAhE,KAAAsQ,eAAA/K,GAER,OAAOvF,KAAK6M,OAAO8B,SAAS3O,KAAKmX,8BAA8B7Q,kBAAkB,WAC7E,OAAOvG,EAAKid,uCAAuCU,cAC/CD,EACA9Z,EAAMuG,gBAAgBC,qBACtBxG,EAAM+F,eAAeC,qBAExB3H,KAAK,WAAM,OAAAsK,QAAQmN,KAChB1Z,EAAK8M,OAAO8B,SAAS5O,EAAKmX,uBAAuBwC,uBACjD3Z,EAAK8M,OAAO8B,SAAS5O,EAAKiO,4BAA4Ba,kBAAkB7K,UAE3EA,SAAQA,KAAO2V,QAAS,uBAGzBoD,EAAAxd,UAAAmc,aAAR,SAAqBnZ,GACjB,GAAmB,mBAAfA,EAAMrE,KACN,MAAM,IAAIiF,EAAA,EAAcZ,EAAMzC,SAGlC,MAAMyC,GAEdwa,EA7HA,CAAkElN,gBCKlE,SAAAhQ,GAKI,SAAA8d,EACIla,EACQyT,EACAlJ,EACAmJ,EACApJ,EACAzK,EACAsa,GAPZ,IAAA7d,EASIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAPJD,EAAAmX,yBACAnX,EAAAiO,8BACAjO,EAAAoX,gCACApX,EAAAgO,wBACAhO,EAAAuD,sBACAvD,EAAA6d,+BAwJhB,OApKsD1a,EAAA,UAAAya,EAAA9d,GAiBlD8d,EAAApe,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KAGI,OAFAA,KAAK6d,UAAYpc,EAAQuC,SAElBhE,KAAK4d,2BAA2B9X,WAAW9F,KAAK6d,WAClD7b,KAAK,WAGF,GAFAjC,EAAK+d,kBAAoB/d,EAAKge,qBAAqBtc,IAE9C1B,EAAK+d,kBACN,MAAM,IAAIrU,EAAA,EAAqB,sFAGnC,IAAMuU,EAAeje,EAAK+d,kBAAkBE,cAAgB5M,SAASC,eAAetR,EAAK+d,kBAAkBE,cAO3G,OALIA,IACAje,EAAKke,cAAgBD,EACrBje,EAAKke,cAAcC,iBAAiB,QAASne,EAAKoe,2BAG/Cte,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAIpCkc,EAAApe,UAAA2G,aAAA,SAAazE,GAAb,IAAA1B,EAAAC,KAOI,OANIA,KAAKie,eACLje,KAAKie,cAAcG,oBAAoB,QAASpe,KAAKme,0BAGzDne,KAAKie,mBAAgBtZ,EAEd3E,KAAK4d,2BAA2B1X,eAClClE,KAAK,WAAM,OAAAnC,EAAAN,UAAM2G,aAAYpI,KAAAiC,EAAC0B,MAGvCkc,EAAApe,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACI,IAAKA,KAAK8d,kBACN,MAAM,IAAIrU,EAAA,EAAqB,sFAG7B,IAAA7G,EAAA5C,KAAA8d,kBACFnN,EAAA/N,EAAAoO,eAAA,IAAAL,EAAA,aAAAA,EACAO,EAAAtO,EAAAqO,uBAAA,IAAAC,EAAA,aAAAA,EAGJ,OAAO5E,QAAQC,QAAQvM,KAAKqe,eACvBrc,KAAK,SAAA6B,GACF,OAAKA,EAAQ2F,YAAY+F,OAAU1L,EAAQ2F,YAAY8U,gBAahDza,EAXI9D,EAAK6d,2BAA2BW,gBAClCvc,KAAK,SAAAwH,GAAe,OAAAzJ,EAAKwZ,2BAA2B/P,KACpDxH,KAAK,WAAM,OAAAiP,MACXjP,KAAK,WAAM,OAAAjC,EAAKse,gBAChB/b,MAAM,SAAAC,GACsB,aAArBA,EAAMic,YACNxN,EAAQzO,OAO3BP,KAAK,SAAA6B,GACF,OAAA9D,EAAK8M,OAAO8B,SAAS5O,EAAKuD,oBAAoBkM,aAAc1L,eAAgBN,EAAQM,gBAAkBrC,IACjGO,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,cAAc7I,EAAKse,qBAIvFV,EAAApe,UAAAga,2BAAR,SAAmC/P,GAAnC,IAAAzJ,EAAAC,KACI,IAAKA,KAAK6d,UACN,MAAM,IAAI1O,GAAA,EAAoBA,GAAA,EAAwBC,uBAG1D,IAAMpL,EAAWhE,KAAK6d,UAGtB,OAAO7d,KAAK4d,2BAA2BF,cAAclU,GAChDxH,KAAK,WAAM,OAAAsK,QAAQmN,KAChB1Z,EAAK8M,OAAO8B,SAAS5O,EAAKmX,uBAAuBwC,uBACjD3Z,EAAK8M,OAAO8B,SAAS5O,EAAKiO,4BAA4Ba,kBAAkB7K,SAI5E2Z,EAAApe,UAAAwe,qBAAR,SAA6Btc,GACzB,GAAyB,uBAArBA,EAAQuC,UAAqCvC,EAAQgd,mBACrD,OAAOhd,EAAQgd,mBAGnB,GAAyB,oBAArBhd,EAAQuC,UAAkCvC,EAAQid,gBAClD,OAAOjd,EAAQid,gBAGnB,MAAM,IAAIjV,EAAA,GAGNkU,EAAApe,UAAA8e,YAAR,WACI,IAAKre,KAAK6d,UACN,MAAM,IAAI1O,GAAA,EAAoBA,GAAA,EAAwBC,uBAG1D,IACMpF,EADQhK,KAAK6M,OAAOjJ,WACEO,eAAeC,iBAAiBpE,KAAK6d,WAEjE,IAAK7T,EACD,MAAM,IAAI1F,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,IAAKyF,EAAcmC,mBAAmBoD,MAClC,MAAM,IAAIjL,EAAA,EAAiBA,EAAA,EAAqBqa,gBAGpD,IAAMnV,GACFtF,OAAQlE,KAAK6d,UACbtO,MAAOvF,EAAcmC,mBAAmBoD,MACxC+O,gBAAiBtU,EAAcmC,mBAAmByS,kBAGtD,OACI5a,SAAUhE,KAAK6d,UACfrU,YAAWA,IAKXmU,EAAApe,UAAA4e,yBAAR,SAAiCU,GADjC,IAAA9e,EAAAC,KAII,GAFA6e,EAAMC,kBAED9e,KAAK6d,YAAc7d,KAAK8d,kBACzB,MAAM,IAAI3O,GAAA,EAAoBA,GAAA,EAAwBC,uBAG1D,IAAMpL,EAAWhE,KAAK6d,UAEhBjb,EAAA5C,KAAA8d,kBACFnN,EAAA/N,EAAAoO,eAAA,IAAAL,EAAA,aAAAA,EACAO,EAAAtO,EAAAqO,uBAAA,IAAAC,EAAA,aAAAA,EAGJ,OAAOlR,KAAK6M,OAAO8B,SAAS3O,KAAKmX,8BAA8B7Q,kBAAkB,WAC7E,OAAOvG,EAAK6d,2BAA2BW,gBAClCvc,KAAK,SAAAwH,GAAe,OAAAzJ,EAAKwZ,2BAA2B/P,KACpDxH,KAAK,WAAM,OAAAiP,MACX3O,MAAM,SAAAC,GACsB,aAArBA,EAAMic,YACNxN,EAAQzO,OAGnByB,SAAQA,KAAO2V,QAAS,uBAvBjCzW,EAAA,YADC6b,GAAA,gDA0BLpB,EApKA,CAAsD9N,OCXtD,SAAAhQ,GACI,SAAAmf,EACIvb,EACAwb,EACAC,EACQC,GAJZ,IAAApf,EAMIF,EAAA/B,KAAAkC,KAAMyD,EAAOwb,EAAoBC,IAAqBlf,YAF9CD,EAAAof,qBAuBhB,OA5BkDjc,EAAA,UAAA8b,EAAAnf,GAU9Cmf,EAAAzf,UAAAuG,WAAA,SAAWrE,GAGP,OAFAzB,KAAKmf,iBAAiBrZ,aAEfjG,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,IAG5Bud,EAAAzf,UAAAgE,QAAA,SAAQC,EAA2B/B,GAC/B,IAAMqL,EAAQ9M,KAAKmf,iBAAiBC,eAC9BC,EAAmBhhB,OAAA4J,EAAA,MAAA5J,IAAUmF,GAC/BK,SACI2F,aACI8V,gBAAiBxS,MAK7B,OAAOjN,EAAAN,UAAMgE,QAAOzF,KAAAkC,KAACqf,EAAkB5d,IAE/Cud,EA5BA,CAAkDO,ICE5CC,GACI,0CADJA,GAEO,kDAGPC,GACI,0CADJA,GAEO,wDAIb,WACI,SAAAC,EACY1P,GAAAhQ,KAAAgQ,gBAuBhB,OAhBI0P,EAAAngB,UAAA8O,KAAA,SAAKnK,EAAuByL,GACxB,IAAM8F,EAAWvR,EAAOuG,OAAOgL,WAAY,EACrCkK,EAAY3f,KAAK4f,cAAcjQ,EAAa8F,GAElD,OAAOzV,KAAKgQ,cAAc6P,WAAWF,GAChC3d,KAAK,WAAM,OAACkO,OAA0B4P,YAGvCJ,EAAAngB,UAAAqgB,cAAR,SAAsBjQ,EAAqB8F,GACvC,MAAoB,OAAhB9F,EACO8F,EAAWgK,GAAqBA,GAGpChK,EAAW+J,GAA0BA,IAGpDE,EAzBA,0BCZA,WAGI,SAAAK,EACYC,GAAAhgB,KAAAggB,uBA4GhB,OAzGID,EAAAxgB,UAAAuG,WAAA,SAAW4J,EAAqBjO,GAC5BzB,KAAKggB,qBAAqBla,WAAW4J,GACrC1P,KAAKigB,qBAAuBxe,GAAWA,EAAQye,cAGnDH,EAAAxgB,UAAAsd,cAAA,WACI,OAAO7c,KAAKggB,qBAAqBG,aAGrCJ,EAAAxgB,UAAAid,aAAA,SAAa3Y,EAAkC6F,GACnC,IAAAF,EAAA3F,EAAA2F,YACF4W,EAAcpgB,KAAKqgB,iBAAiB7W,EAAqCE,GAE/E,OAAO1J,KAAKggB,qBAAqBM,YAC5Bte,KAAK,SAAAue,GAAU,OAAAA,EAAOzU,QAAQsU,KAC9Bpe,KAAK,SAACY,GAAoB,OACvB2M,MADK3M,EAAA4d,YACc,GAAGjR,UAIlCwQ,EAAAxgB,UAAA6V,OAAA,SAAO+E,EAAgB2C,EAAuB/C,EAAkB0G,GAC5D,OAAOzgB,KAAKggB,qBAAqBG,YAC5Bne,KAAK,SAAAoT,GAAU,OAAAA,EAAOsL,UACnBvG,OAAMA,EACNJ,SAAQA,EACR4G,uBAAuB,EACvBC,KAAM,WACN5d,OAAQ8Z,EACR2D,YAAWA,EACXI,WAAY,cAIxBd,EAAAxgB,UAAAgd,WAAA,SAAW1Y,EAAkC6F,EAAyByQ,GAClE,IAAKna,KAAKigB,qBACN,MAAM,IAAI9Q,GAAA,EAAoBA,GAAA,EAAwBC,uBAGpD,IAAAxM,EAAA5C,KAAAigB,qBAAEa,EAAAle,EAAAke,SAAUC,EAAAne,EAAAme,YAElB,OAAOzU,QAAQmN,KACXzZ,KAAKwc,aAAa3Y,EAAS6F,GAC3B1J,KAAKggB,qBAAqBgB,WAC3Bhf,KAAK,SAACY,OAAC4G,EAAA5G,EAAA,GAAasd,EAAAtd,EAAA,GACX2M,EAAA/F,EAAA+F,MACF0R,EAAmB,WAAM,OAAAf,EAAae,mBACvCjf,KAAK,SAAAC,GAGF,OAFAif,EAAaC,OAAO,IAAIhN,IAEjBlS,KAGTif,EAAe,IAAIE,GAAA,EACrBlB,EAAa3D,YACTuE,SAAU,SAACve,EAAO8e,GACdP,EAASve,EAAO8e,EAAQJ,IAE5B9G,OAAMA,EACN5K,MAAKA,EACLwR,YAAWA,KAInB,OAAOG,EAAaI,WAI5BvB,EAAAxgB,UAAAkd,gBAAA,SAAgB8E,GAAhB,IAAAxhB,EAAAC,KACI,OAAOuhB,EACFvf,KAAK,SAAAwH,GAAe,OAAA8C,QAAQmN,KAAKjQ,EAAazJ,EAAKigB,qBAAqBwB,uBACxExf,KAAK,SAACY,OAAC4G,EAAA5G,EAAA,GAAe6e,EAAA7e,EAAA,GAAA6e,WAAkB,OAAAve,EAAA,YAAMsG,GAAa8V,gBAAiBmC,OAGrF1B,EAAAxgB,UAAA2G,aAAA,WACI,OAAOlG,KAAKggB,qBAAqB0B,YAG7B3B,EAAAxgB,UAAA8gB,iBAAR,SAAyBsB,EAAkCjY,GACvD,IAAIkY,EAAgBlY,EAAemY,SAMnC,OAJInY,EAAeoY,WACfF,EAAgB,IAAIlY,EAAeoY,WAInC1f,MACIuf,YACII,eAAgBJ,EAAW7F,OAC3BkG,OAAQL,EAAW5F,SACnBkG,IAAKN,EAAWO,MAChBC,eAAmBR,EAAW1F,SAASC,MAAK,IAAIyF,EAAW1F,SAASE,KACpE1a,SACIyF,UAAU,GAEdwC,gBACI+F,YAAa/F,EAAe0Y,QAC5BtH,WAAYpR,EAAeoR,WAC3B8G,cAAaA,KAIzBS,SAAU,+BACVne,OAAQ,SAGpB6b,EAhHA,2BCXYuC,iCAAZ,SAAYA,GACRA,EAAA,8BACAA,EAAA,oCACAA,EAAA,gCAHJ,CAAYA,aCqBZ,gBAAAziB,GAMI,SAAA0iB,EACI9e,EACQyT,EACA5T,EACAyK,EACAC,EACAmJ,EACAzU,EACA8f,EACArD,GATZ,IAAApf,EAWIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YATJD,EAAAmX,yBACAnX,EAAAuD,sBACAvD,EAAAgO,wBACAhO,EAAAiO,8BACAjO,EAAAoX,gCACApX,EAAA2C,iBACA3C,EAAAyiB,wBACAziB,EAAAof,mBAIRpf,EAAK0iB,cAAgB,IAAIC,GAAA,UA+MjC,OAlOqDxf,EAAA,UAAAqf,EAAA1iB,GAsBjD0iB,EAAAhjB,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KAGI,GAFAA,KAAK6d,UAAYpc,EAAQuC,UAEpBvC,EAAQkhB,SACT,MAAM,IAAIlZ,EAAA,EAAqB,qFAGnC,IAAMuU,EAAevc,EAAQkhB,SAAS3E,cAAgB5M,SAASC,eAAe5P,EAAQkhB,SAAS3E,cAO/F,OALIA,IACAhe,KAAKie,cAAgBD,EACrBhe,KAAKie,cAAcC,iBAAiB,QAASle,KAAKme,2BAG/Cne,KAAK4iB,iBAAiBnhB,EAAQkhB,UAChC3gB,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrC8gB,EAAAhjB,UAAA2G,aAAA,SAAazE,GAQT,OAPIzB,KAAKie,eACLje,KAAKie,cAAcG,oBAAoB,QAASpe,KAAKme,0BAGzDne,KAAKie,mBAAgBtZ,EACrB3E,KAAK6iB,qBAAkBle,EAEhB9E,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAG9B8gB,EAAAhjB,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACI,OAAOA,KAAKqe,cACP/b,MAAM,SAAAC,GACH,GAAIA,EAAMugB,UAAYxe,EAAA,EAAqBqa,eACvC,OAAO5e,EAAKgjB,iBACP/gB,KAAK,WAAM,OAAAjC,EAAKse,gBAGzB,MAAM9b,IAETP,KAAK,SAAA6B,GACF,OAAA9D,EAAKijB,aAAanf,EAASL,EAAQM,eAAgBrC,MAIvD8gB,EAAAhjB,UAAAqjB,iBAAR,SAAyBnhB,GAAzB,IAAA1B,EAAAC,KACU2D,EAAQ3D,KAAK6M,OAAOjJ,WACpBoG,EAAgBrG,EAAMQ,eAAeC,iBAAiBpE,KAAK6d,WAC3DrT,EAAc7G,EAAM8G,OAAOC,iBAEjC,IAAKV,EACD,MAAM,IAAI1F,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,IAAKiG,EACD,MAAM,IAAIlG,EAAA,EAAiBA,EAAA,EAAqB8I,uBAGpD,OAAOpN,KAAKwiB,sBAAsBnU,KAAKrE,EAAcS,OAAOgL,UACvDzT,KAAK,SAACY,OAAEqgB,EAAArgB,EAAAqgB,SACLljB,EAAK8iB,gBAAkBI,EAEnBxhB,EAAQyhB,eAAiB9R,SAASC,eAAe5P,EAAQyhB,gBACzDnjB,EAAK8iB,gBAAgBM,iBACjBC,MAAO,QACPC,YAAa5hB,EAAQyhB,iBAI7BnjB,EAAK8iB,gBAAgBS,WACjBC,SAAU/Y,EAAYyB,aAAa6Q,gBAGvC/c,EAAK8iB,gBAAgBrF,GAAG8E,GAAkBkB,eAAgB,WACtDzjB,EAAK0iB,cAAc7gB,MAAO3B,KAAMqiB,GAAkBkB,iBAE9C/hB,EAAQgiB,UACRhiB,EAAQgiB,aAIhB1jB,EAAK8iB,gBAAgBrF,GAAG8E,GAAkBoB,iBAAkB,SAAClgB,GACzDzD,EAAK4jB,iBAAiBngB,EAAQogB,cACzB5hB,KAAK,WACFjC,EAAK0iB,cAAc7gB,MAAO3B,KAAMqiB,GAAkBoB,mBAE9CjiB,EAAQwP,iBACRxP,EAAQwP,yBAO5BsR,EAAAhjB,UAAAwjB,eAAR,eAAAhjB,EAAAC,KACI,OAAOA,KAAK6M,OAAO8B,SAAS3O,KAAKmX,8BAA8B7Q,kBAAkB,WAkB7E,OAjBAvG,EAAK8M,OAAO8B,SAAS5O,EAAKiO,4BAA4Ba,kBAAkB9O,EAAK8d,YACxE7b,KAAK,SAAA2B,GACF,IAAMqG,EAAgBrG,EAAMQ,eAAeC,iBAAiBrE,EAAK8d,WAEjE,IAAK9d,EAAK8iB,gBACN,MAAM,IAAI1T,GAAA,EAAoBA,GAAA,EAAwBC,uBAG1D,IAAKpF,EACD,MAAM,IAAI1F,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpDxE,EAAK8iB,gBAAgBgB,uBACrB9jB,EAAK8iB,gBAAgBiB,cAAc9Z,EAAcmC,mBAAmB4X,oBAIrE,IAAIzX,QAAQ,SAACC,EAASC,GACzBzM,EAAK0iB,cAAcuB,KAAK,GACnB3Q,UAAU,SAACwL,GACJA,EAAM5e,OAASqiB,GAAkBkB,eACjChX,EAAO,IAAI2H,IACJ0K,EAAM5e,OAASqiB,GAAkBoB,kBACxCnX,UAIfvI,SAAUhE,KAAK6d,aAAgBlE,QAAS,uBAGzC4I,EAAAhjB,UAAAokB,iBAAR,SAAyBC,GAAzB,IAAA7jB,EAAAC,KAEUgK,EADQhK,KAAK6M,OAAOjJ,WACEO,eAAeC,iBAAiBpE,KAAK6d,WAC3DoG,EAAoBja,GAAiBA,EAAcmC,mBAAmB8X,kBAE5E,OAAOjkB,KAAK0C,eAAe6X,KAAK,gBAC5BzX,SACI0X,OAAQ,YACRC,eAAgB,oDAEpBtY,KAAM9D,OAAAqc,GAAA,EAAArc,EACFiW,OAAQ,wBACRqG,SAAU3a,KAAK6d,UACf+F,aAAYA,EACZK,kBAAiBA,MAIpBjiB,KAAK,WAAM,OAAAsK,QAAQmN,KAChB1Z,EAAK8M,OAAO8B,SAAS5O,EAAKmX,uBAAuBwC,uBACjD3Z,EAAK8M,OAAO8B,SAAS5O,EAAKiO,4BAA4Ba,kBAAkB9O,EAAK8d,gBAEhF7b,KAAK,WAAM,OAAAjC,EAAK8M,OAAOjJ,cAGxB2e,EAAAhjB,UAAA8e,YAAR,eAAAte,EAAAC,KACI,OAAOA,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkB7O,KAAK6d,YAC/E7b,KAAK,WACF,MAAuB,UAAnBjC,EAAK8d,UACE9d,EAAKof,iBAAiBrZ,aACxB9D,KAAK,SAAAue,GAAU,OAAAA,EAAOnB,iBAGxB,KAEVpd,KAAK,SAAAkiB,GACF,IACMla,EADQjK,EAAK8M,OAAOjJ,WACEO,eAAeC,iBAAiBrE,EAAK8d,WAEjE,IAAK7T,EACD,MAAM,IAAI1F,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,IAAKyF,EAAcmC,mBAAmBgY,kBAClC,MAAM,IAAI7f,EAAA,EAAiBA,EAAA,EAAqBqa,gBAGpD,IAAMnV,GACFtF,OAAQnE,EAAK8d,UACbuG,aAAcpa,EAAcmC,mBAAmBgY,kBAC/CE,IAAKra,EAAcmC,mBAAmBkY,IACtCC,cAAeC,KAAKva,EAAcmC,mBAAmBqY,YACrDvI,UACIC,MAAOlS,EAAcmC,mBAAmBsY,QAAQC,WAAWC,OAAO,EAAG,GACrExI,KAAMnS,EAAcmC,mBAAmBsY,QAAQC,WAAWC,OAAO,EAAG,IAExE5I,SAAU/R,EAAcmC,mBAAmByY,WAC3CC,YAAa7a,EAAcmC,mBAAmB0Y,YAC9CC,UAAWZ,GAAcA,UAASA,QAAKvf,GAG3C,OACIX,SAAUjE,EAAK8d,UACfrU,YAAWA,MAKnB+Y,EAAAhjB,UAAAyjB,aAAR,SAAqBnf,EAAkBC,EAA0BrC,GAAjE,IAAA1B,EAAAC,KACI,OAAOA,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,aAAc1L,eAAcA,GAAIrC,IAChFO,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,cAAc/E,OAI1E0e,EAAAhjB,UAAA4e,yBAAR,SAAiCU,GAC7BA,EAAMC,iBAEN9e,KAAK+iB,kBAHT7f,EAAA,YADC6b,GAAA,gDAMLwD,EAlOA,CAAqD1S,+CCdrD,WACI,SAAAkV,EACY/U,GAAAhQ,KAAAgQ,gBAOhB,OAJI+U,EAAAxlB,UAAA8O,KAAA,WACI,OAAOrO,KAAKgQ,cAAc6P,WARlB,wCASH7d,KAAK,WAAM,OAACkO,OAAwB8U,OAAOC,UAExDF,EATA,MCSA,SAAAllB,GAKI,SAAAqlB,EACIzhB,EACQH,EACAyK,EACAC,EACAmX,GALZ,IAAAplB,EAOIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YALJD,EAAAuD,sBACAvD,EAAAgO,wBACAhO,EAAAiO,8BACAjO,EAAAolB,4BA8GhB,OAxHuDjiB,EAAA,UAAAgiB,EAAArlB,GAenDqlB,EAAA3lB,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACYgE,EAAAvC,EAAAuC,SAIR,GAFAhE,KAAKsQ,eAAiBtQ,KAAK6M,OAAOjJ,WAAWO,eAAeC,iBAAiBJ,IAExEhE,KAAKsQ,eACN,MAAM,IAAIhM,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,OAAOvE,KAAKmlB,wBAAwB9W,KAAKrO,KAAKsQ,eAAe7F,OAAOgL,UAC/DzT,KAAK,SAAAiX,GAGF,GAFAlZ,EAAKqlB,kBAAoBnM,GAEpBxX,EAAQwX,WACT,MAAM,IAAIxP,EAAA,EAAqB,uFAGnC,IAAMuU,EAAgBvc,EAAQwX,WAAW+E,cAAgB5M,SAASC,eAAe5P,EAAQwX,WAAW+E,cAOpG,OALIA,IACAje,EAAKke,cAAgBD,EACrBje,EAAKke,cAAcC,iBAAiB,QAASne,EAAKoe,2BAG/Cte,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAIpCyjB,EAAA3lB,UAAA2G,aAAA,SAAazE,GAUT,OATAzB,KAAKsQ,oBAAiB3L,EAElB3E,KAAKie,eACLje,KAAKie,cAAcG,oBAAoB,QAASpe,KAAKme,0BAGzDne,KAAKie,mBAAgBtZ,EACrB3E,KAAKolB,uBAAoBzgB,EAElB9E,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAG9ByjB,EAAA3lB,UAAAgE,QAAA,SAAQC,EAA2B/B,GAAnC,IAAA1B,EAAAC,KACU8J,GAAUhG,eAAgBN,EAAQM,gBAExC,IAAK9D,KAAKsQ,eACN,MAAM,IAAIhM,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,IAAMiB,EAAUxF,KAAKsQ,eAAenE,mBAAmB3G,QAGjDgE,EAAcxJ,KAAKsQ,eAAenE,mBAAmB3C,YAE3D,IAAKhE,EACD,MAAM,IAAIiE,EAAA,EAAqB,kGAInC,IAAKD,EACD,MAAM,IAAIC,EAAA,EAAqB,sGAGnC,OAAOzJ,KAAK6M,OAAO8B,SAAS3O,KAAKsD,oBAAoBkM,YAAY1F,EAAOrI,IACnEO,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKiO,4BAA4Ba,kBAAkBrJ,MACnFxD,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKgO,sBAAsBnF,eAAgB5E,SAAUwB,EAASgE,YAAWA,QAG1G0b,EAAA3lB,UAAA8lB,yBAAR,WACI,IAAM1hB,EAAQ3D,KAAK6M,OAAOjJ,WACpB8C,EAAW/C,EAAM+C,SAASC,cAC1B6D,EAAc7G,EAAM8G,OAAOC,iBAEjC,IAAKhE,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAKqD,EACD,MAAM,IAAIlG,EAAA,EAAiBA,EAAA,EAAqB8I,uBAGpD,IAAKpN,KAAKsQ,iBAAmBtQ,KAAKsQ,eAAenE,mBAC7C,MAAM,IAAI7H,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,OACI+gB,WAAYtlB,KAAKsQ,eAAenE,mBAAmBmZ,WACnDC,iBAAkBvlB,KAAKsQ,eAAenE,mBAAmBoZ,iBACzDpL,OAAQzT,EAAS2T,SAASmL,QAAQ,GAClCzL,SAAUvP,EAAYuP,SAASzD,KAC/BmP,OAAQ/e,EAASmB,KAAKtC,GACtBmgB,yBAAyB,IAKzBR,EAAA3lB,UAAA4e,yBAAR,SAAiCU,GAG7B,GAFAA,EAAMC,iBAED9e,KAAKolB,kBAAV,CAIA,IAAM5hB,EAAUxD,KAAKqlB,2BACrBrlB,KAAKolB,kBAAkB1e,SAASlD,KARpCN,EAAA,YADC6b,GAAA,gDAWLmG,EAxHA,CAAuDrV,2BCXvD,WACI,SAAA8V,EACY3V,GAAAhQ,KAAAgQ,gBAWhB,OARI2V,EAAApmB,UAAA8O,KAAA,WAGI,OAAOrO,KAAKgQ,cAAc6P,WAFR,oCAGb7d,KAAK,WAAM,gBAACP,GACT,WAAKyO,OAAwB0V,cAAcnkB,OAG3DkkB,EAbA,MCIA,WAGI,SAAAE,EACY7V,GAAAhQ,KAAAgQ,gBAmBhB,OAhBI6V,EAAAtmB,UAAAuG,WAAA,eAAA/F,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAXM,8CAYN7d,KAAK,WAAM,OAAAjC,EAAK+lB,YAAe5V,OAAuB6V,MAAMC,OAC5DhkB,KAAK,WAAM,OAAAjC,KAGpB8lB,EAAAtmB,UAAA6f,aAAA,WACI,IAAKpf,KAAK8lB,YACN,MAAM,IAAI3W,GAAA,EAAoBA,GAAA,EAAwBC,uBAK1D,OAFApP,KAAK8lB,YAAYG,sBAEVjmB,KAAK8lB,YAAYI,kBAEhCL,EAvBA,GC2Cc,SAAAM,GACV1iB,EACA2iB,EACAC,GAEA,IAAMC,EAAW,IAAIC,GAAwB9iB,GAAS+iB,aAAc,eAC9DC,EAAepoB,OAAAqoB,EAAA,gBAAAroB,GACfsoB,EAA8B,IAAIC,EAAA,EAA4B,IAAIC,EAAA,EAA4BR,IAC9FS,ECtDI,SAA0CL,GACpD,IAAMM,EAAwB,IAAIC,GAAA,EAAsBP,GAClDQ,EAAsB,IAAIC,GAAA,EAAoBH,GAEpD,OAAO,IAAII,GAA0BF,GDkDHG,CAAgCX,GAE5DY,EAAwB,IAAIC,EAAA,EAAsBjB,GAClDkB,EAAoB,IAAIC,EAAkBH,GAC1CpI,EAAqB,IAAIwI,EAAA,EAC3B,IAAIC,EAAA,EAAmBrB,GACvBkB,GAEErI,EAAuB,IAAIyI,GAC7B,IAAIC,GAAqBxB,GACzBnH,GAGE4I,EAA6B,IAAIC,EAAA,EAA2B,IAAIC,EAAA,EAA2B1B,IAC3F2B,EAA8B,IAAIC,EAAA,EACpC,IAAIC,EAAA,EAA4B7B,IAE9B8B,EAAsB,IAAIC,EAAA,EAAoB/B,GAC9CgC,EAAsB,IAAIC,EAAA,EAAoBH,GAC9CI,EAAwB,IAAIC,EAAA,EAAsBnB,EAAuBgB,GACzEI,EAA+B,IAAIC,EAA6BpC,EAAUrH,GAoOhF,OAlOAqH,EAASqC,SAAS,WAAY,WAC1B,WAAIC,GACAnlB,EACA8jB,EACAtI,EACAC,EACA2I,EACAG,EACA,IAAIa,GAAqBpC,MAIjCH,EAASqC,SAAS,SAAU,WACxB,WAAIG,GACArlB,EACAwb,EACA0H,EACAqB,EACA,IAAIe,GAAA,EAAsBtC,MAIlCH,EAASqC,SAAS,aAAc,WAC5B,WAAIpJ,GACA9b,EACAwb,EACAC,KAIRoH,EAASqC,SAAS,SAAU,WACxB,WAAIK,GACAvlB,EACAwb,EACA4I,EACAG,EACA,IAAIiB,GAAmBxC,MAI/BH,EAASqC,SAAS,SAAU,WACxB,WAAIO,GACAzlB,EACAwb,KAIRqH,EAASqC,SAAS,UAAW,WACzB,WAAIQ,GACA1lB,EACAwb,KAIRqH,EAASqC,SAAS,UAAW,WACzB,WAAIS,GACA3lB,EACAwb,EACAC,KAIRoH,EAASqC,SAAS,SAAU,WACxB,WAAIU,GACA5lB,EACAwb,EACAC,KAIRoH,EAASqC,SAAS,gBAAiB,WAC/B,WAAIW,GACA7lB,EACAwb,EACA,IAAIsK,GAAA,EAAmB9C,MAI/BH,EAASqC,SAAS,sBAAuB,WACrC,WAAIW,GACA7lB,EACAwb,EACA,IAAIsK,GAAA,EAAmB9C,MAI/BH,EAASqC,SAAS,UAAW,WACzB,WAAIa,GACA/lB,EACAwb,EACAC,EACA7gB,OAAAorB,EAAA,iBAAAprB,MAIRioB,EAASqC,SAAS,WAAY,WAC1B,WAAIe,GACAjmB,EACA8kB,EACAtJ,EACAC,EACA2I,EACAY,EACApC,EACA,IAAIsD,GAAmBlD,MAI/BH,EAASqC,SAAS,wBAAyB,WACvC,WAAIiB,GACAnmB,EACAwb,KAIRqH,EAASqC,SAAS,YAAa,WAC3B,WAAIkB,GACApmB,EACAwb,EACAC,EACA2I,EACAf,KAIRR,EAASqC,SAAS,kBAAmB,WACjC,WAAImB,GACArmB,EACAwb,EACAC,EACA2I,EACAf,KAIRR,EAASqC,SAAS,wBAAyB,WACvC,WAAImB,GACArmB,EACAwb,EACAC,EACA2I,EACAf,GACA,KAIRR,EAASqC,SAAS,wBAAyB,WACvC,WAAIoB,GACAtmB,EACA8kB,EACAV,EACAY,EACAvJ,EACAD,EACA5gB,OAAA2rB,GAAA,EAAA3rB,CAA4CooB,EAAcJ,GAC1D,IAAI4D,GAAA,EAAyBxD,MAIrCH,EAASqC,SAAS,WAAY,WAC1B,WAAIuB,GACAzmB,EACA8kB,EACAtJ,EACAC,EACA2I,EACAY,EACApC,EACA,IAAI8D,GAAA,EAAqB1D,GACzB,IAAI2D,GAAgB3D,MAI5BH,EAASqC,SAAS,qBAAsB,WACpC,WAAI0B,GACA5mB,EACA8kB,EACAV,EACAY,EACAvJ,EACAD,EACA5gB,OAAAisB,GAAA,EAAAjsB,CACIoF,EACA,IAAI8mB,GAAA,EACA,IAAIrD,GAAA,EACA,IAAIF,GAAA,EAAsBP,SAO9CH,EAASqC,SAAS,QAAS,WACvB,WAAI6B,GACA/mB,EACAwb,EACAC,EACA,IAAIkL,GAAgB3D,MAI5BH,EAASqC,SAAS,aAAc,WAC5B,WAAI8B,GACAhnB,EACAwb,EACAC,EACA2I,EACA,IAAI6C,GAAA,EAAuBjE,MAInCH,EAASqC,SAAS,kBAAmB,WACjC,WAAI0B,GACA5mB,EACA8kB,EACAV,EACAY,EACAvJ,EACAD,EACA5gB,OAAAisB,GAAA,EAAAjsB,CACIoF,EACA,IAAIknB,GAAA,MAKTrE,kBEvSX,WACI,SAAAsE,EACYC,GAAA7qB,KAAA6qB,2BAuHhB,OApHID,EAAArrB,UAAAurB,gBAAA,eAAA/qB,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/BA,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa0sB,GAAA,EAAqBC,2BAEhD,IAAMC,EAAUlrB,EAAKmrB,mBAAmBznB,GAClCqJ,EAAQ/M,EAAKorB,uBAAuB1nB,GACpCyG,EAAkBnK,EAAKqrB,oBAAoB3nB,GAEjD,OAAO1D,EAAKsrB,qBAAqBve,GAC5B9K,KAAK,SAAAspB,GACF,OAAAvrB,EAAK8qB,yBAAyBC,gBAAe5nB,EAAA,YAClC+nB,GACH3f,UAAWggB,EAAa9f,mBAE5BtB,GAEClI,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CACV0sB,GAAA,EAAqBQ,yBACrBppB,EACAmpB,IAEJ3pB,EAASU,eAGpBC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkB0sB,GAAA,EAAqBS,sBAAuBvpB,UAK7F2oB,EAAArrB,UAAAksB,iBAAA,SAAiBljB,GAAjB,IAAAxI,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/BA,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa0sB,GAAA,EAAqBW,+BAA2B/mB,GAAa4D,aAAYA,KAEpG,IAAM0iB,EAAUlrB,EAAKmrB,mBAAmBznB,GAClCqJ,EAAQ/M,EAAKorB,uBAAuB1nB,GAE1C,OAAO1D,EAAKsrB,qBAAqBve,GAC5B9K,KAAK,SAAAspB,GACF,OAAAvrB,EAAK8qB,yBAAyBY,iBAAgBvoB,EAAA,YACvC+nB,GACH3f,UAAWggB,EAAa9f,mBACzBjD,GACEvG,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa0sB,GAAA,EAAqBY,0BAA2BxpB,EAAIe,EAAA,UAC3EqF,aAAYA,GACT+iB,KAEP3pB,EAASU,eAGpBC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkB0sB,GAAA,EAAqBa,uBAAwB3pB,GAAYsG,aAAYA,WAK9GqiB,EAAArrB,UAAAssB,yBAAR,SAAiC/e,GAC7B,IAAKA,IAAUA,EAAMtB,iBACjB,OAAO,EAMX,OCpFM,SAAmBsgB,GAC7B,OAAOA,EAAKC,UAAYC,KAAKC,MDmFlBC,CEpFD,SAAqBJ,EAAY3R,GAC3C,IAAMgS,EAAU,IAAIH,KAAKF,EAAKM,WAI9B,OAFAD,EAAQE,WAAWP,EAAKQ,aAAenS,GAEhCgS,EF6EYI,CAAW,IAAIP,KAAKlf,EAAM0f,mBADpB,KAMjB5B,EAAArrB,UAAA4rB,uBAAR,SAA+B1nB,GACnB,IACFM,EADEN,EAAAG,WAAAkH,YACiBC,qBAEzB,GAAKhH,EAIL,OACIyH,iBAAkBzH,EAAKyH,iBACvBghB,kBAAmBzoB,EAAKyoB,oBAIxB5B,EAAArrB,UAAA8rB,qBAAR,SAA6Bve,GACzB,OAAOA,GAAS9M,KAAK6rB,yBAAyB/e,GAC1CR,QAAQC,QAAQO,GAChB9M,KAAK6qB,yBAAyB4B,sBAAsBzqB,KAAK,SAACY,GAAa,OAAXA,EAAAT,QAG5DyoB,EAAArrB,UAAA6rB,oBAAR,SAA4B3nB,GAGxB,OAFcA,EAAMG,WAEPsG,gBAAgBC,sBAGzBygB,EAAArrB,UAAA2rB,mBAAR,SAA2BznB,GACvB,IAAME,EAAQF,EAAMG,WACd6G,EAAS9G,EAAM8G,OAAOC,iBACtB7C,EAAOlE,EAAMkE,KAAK6kB,UAExB,IAAKjiB,EACD,MAAM,IAAInG,EAAA,EAAiBA,EAAA,EAAqB8I,uBAGpD,IAAKvF,EACD,MAAM,IAAIvD,EAAA,EAAiBA,EAAA,EAAqBqoB,aAMpD,OACIC,WAJI/kB,EAAA+kB,WAKJC,QAJIpiB,EAAAwB,aAAA4gB,UAOhBjC,EAzHA,MGCA,oBAAAkC,KAsDA,OArDIA,EAAAvtB,UAAAwtB,kBAAA,SACI9qB,GAEA,IAAMW,EAAA5C,KAAAyM,mBAAAxK,GAAEE,EAAAS,EAAAT,KAAMqB,EAAAN,EAAA,OAAAN,GAAA,SAEd,OAAAM,EAAA,YACOM,GACHrB,MACI6qB,mBAAoBhtB,KAAKitB,6BAA6B9qB,EAAK+qB,yBAKvEJ,EAAAvtB,UAAA4tB,uBAAA,SACIlrB,GAEA,OAAOjC,KAAKyM,mBAAmBxK,IAGnC6qB,EAAAvtB,UAAA6tB,6BAAA,SACInrB,GAEA,OAAAiB,EAAA,YACOjB,GACHE,MACIqJ,iBAAkBvJ,EAASE,KAAKC,KAAK0K,MACrC0f,kBAAmBvqB,EAASE,KAAKC,KAAKirB,eAK1CP,EAAAvtB,UAAA0tB,6BAAR,SAAqCD,GACjC,YADiC,IAAAA,UAC1BA,EAAmBM,IAAI,SAAAjlB,GAAc,OACxCklB,YAAallB,EAAWmlB,aACxBC,kBAAmBplB,EAAWqlB,mBAC9B/S,SAAUtS,EAAWsS,SACrBgT,IAAKtlB,EAAWslB,IAChBC,MAAOvlB,EAAWwlB,OAClBC,YAAazlB,EAAW0lB,aACxBC,WAAY3lB,EAAW4lB,YACvBC,MAAO7lB,EAAW6lB,MAClBC,uBAAwB9lB,EAAW+lB,6BAInCtB,EAAAvtB,UAAAkN,mBAAR,SAA8BxK,GAClB,IAAAE,EAAAF,EAAAG,KAAYoB,EAAAN,EAAA,OAAAjB,GAAA,SAEpB,OAAAiB,EAAA,YACOM,GACHrB,KAAIA,KAGhB2qB,EAtDA,MCAA,WAGI,SAAAuB,EACYhiB,EACA3J,GADA1C,KAAAqM,UACArM,KAAA0C,iBAER1C,KAAKsuB,aAAe,IAAIC,GAkFhC,OA/EIF,EAAA9uB,UAAAktB,oBAAA,SACI7pB,OAAEC,QAAA,IAAAD,QAAAC,QAIF,OAAO7C,KAAK0C,eAAelE,IAFf,wDAE0BqE,QAAOA,IAAIb,KAAK,SAAAC,GAAY,OAAAiB,EAAA,YAC3DjB,GACHE,MACIqJ,iBAAkBvJ,EAASE,KAAKC,KAAK0K,MACrC0f,kBAAmBvqB,EAASE,KAAKC,KAAKirB,iBAKlDgB,EAAA9uB,UAAAurB,gBAAA,SACI0D,EACAtkB,GAEA,OAAO,EACHlK,KAAKyuB,4BAA4BD,EAAgBtkB,GACjDlK,KAAK0uB,iBAAiBF,IAG9BH,EAAA9uB,UAAAksB,iBAAA,SACI+C,EACAjmB,GAFJ,IAAAxI,EAAAC,KAIUwD,EAAON,EAAA,YACNsrB,GACHjmB,aAAYA,IAGhB,OAAO,IAAI+D,QAAQ,SAACC,EAASC,GACzBzM,EAAKsM,QAAQsiB,wBACTnrB,EAAS,SACLorB,EACA3sB,GACE,OAAA2sB,EACFpiB,EAAOzM,EAAKuuB,aAAanB,uBAAuByB,IAChDriB,EAAQxM,EAAKuuB,aAAavB,kBAAkB9qB,SAKpDosB,EAAA9uB,UAAAmvB,iBAAR,SACIF,GADJ,IAAAzuB,EAAAC,KAGI,OAAO,IAAIsM,QAAQ,SAACC,EAASC,GACzBzM,EAAKsM,QAAQye,gBACT0D,EAAgB,SACZI,EACA3sB,GACC,OAAA2sB,EACDpiB,EAAOzM,EAAKuuB,aAAanB,uBAAuByB,IAChDriB,EAAQxM,EAAKuuB,aAAavB,kBAAkB9qB,SAKpDosB,EAAA9uB,UAAAkvB,4BAAR,SACID,EACAtkB,GAFJ,IAAAnK,EAAAC,KAIUwD,EAAON,EAAA,YACNsrB,GACHtkB,gBAAiB7L,OAAAoN,EAAA,EAAApN,CAAqB6L,KAG1C,OAAO,IAAIoC,QAAQ,SAACC,EAASC,GACzBzM,EAAKsM,QAAQwiB,2BACTrrB,EAAS,SACLorB,EACA3sB,GACC,OAAA2sB,EACDpiB,EAAOzM,EAAKuuB,aAAanB,uBAAuByB,IAChDriB,EAAQxM,EAAKuuB,aAAavB,kBAAkB9qB,SAIhEosB,EAzFA,0ECkBA,WAqBI,SAAAS,EAAYC,GACR/uB,KAAKgvB,gBAAkBD,EAAUrlB,eACjC1J,KAAKivB,MAAQF,EAAUlnB,KACvB7H,KAAKkvB,UAAYH,EAAUroB,SAC3B1G,KAAK2C,QAAUosB,EAAUtkB,OACzBzK,KAAKmvB,cAAgBJ,EAAU3kB,aAC/BpK,KAAKovB,WAAaL,EAAUM,UAC5BrvB,KAAKsvB,SAAWP,EAAUtnB,QAC1BzH,KAAKuvB,UAAYR,EAAUnlB,SAC3B5J,KAAKwvB,MAAQT,EAAUU,KACvBzvB,KAAK0vB,kBAAoBX,EAAUpnB,iBACnC3H,KAAK2vB,aAAeZ,EAAUjkB,YAC9B9K,KAAK4vB,OAASb,EAAUjlB,MACxB9J,KAAK6vB,SAAWd,EAAUlrB,QAC1B7D,KAAK8vB,gBAAkBf,EAAU5qB,eACjCnE,KAAK+vB,iBAAmBhB,EAAU7kB,gBAClClK,KAAKgwB,mBAAqBjB,EAAUkB,kBA6R5C,OArRInB,EAAAvvB,UAAAoH,YAAA,WACI,OAAO3G,KAAKkvB,UAAUvoB,eAQ1BmoB,EAAAvvB,UAAAwK,SAAA,WACI,OAAO/J,KAAK4vB,OAAO7lB,YAQvB+kB,EAAAvvB,UAAA2wB,UAAA,WACI,OAAOlwB,KAAK2C,QAAQ+H,kBAYxBokB,EAAAvvB,UAAA4K,mBAAA,WACI,IAAMD,EAAkBlK,KAAK+vB,iBAAiB5lB,qBACxCgmB,EAAUnwB,KAAK2C,QAAQiI,mBAE7B,IAAKV,EAAiB,CAClB,IAAKimB,IAAYA,EAAQpkB,eACrB,OAGJ,OACIqkB,UAAW,GACXC,SAAU,GACVC,QAAS,GACTzO,SAAU,GACVC,SAAU,GACVyO,KAAM,GACNC,gBAAiB,GACjBC,oBAAqB,GACrB3V,WAAY,GACZsH,QAAS,GACTsO,MAAO,GACPC,gBACAhhB,YAAawgB,EAAQpkB,gBAI7B,OAAO7B,GAWX4kB,EAAAvvB,UAAAqxB,mBAAA,WACI,IAAMxmB,EAAepK,KAAKmvB,cAAc9kB,kBAExC,GAAID,GAAgBA,EAAaymB,OAC7B,OAAOzmB,EAAa,GAAG0mB,0BAc/BhC,EAAAvvB,UAAA8K,gBAAA,WACI,OAAOrK,KAAKmvB,cAAc9kB,mBAS9BykB,EAAAvvB,UAAAwxB,0BAAA,WACI,IAAM3mB,EAAepK,KAAKmvB,cAAc9kB,kBAExC,GAAKD,GAAiBA,EAAaymB,OAInC,OAAOzmB,EAAa,GAAG4mB,wBAQ3BlC,EAAAvvB,UAAA0xB,qBAAA,WACI,OAAOjxB,KAAKgwB,mBAAmBiB,wBAQnCnC,EAAAvvB,UAAAoK,kBAAA,WACI,OAAO3J,KAAKgvB,gBAAgBrlB,qBAQhCmlB,EAAAvvB,UAAA2xB,oBAAA,WACI,OAAOlxB,KAAKovB,WAAW+B,gBAQ3BrC,EAAAvvB,UAAA6xB,kBAAA,WACI,OAAOpxB,KAAK8vB,gBAAgBsB,qBAgBhCtC,EAAAvvB,UAAA6E,iBAAA,SAAiBJ,EAAkBK,GAC/B,OAAOrE,KAAK8vB,gBAAgB1rB,iBAAiBJ,EAAUK,IAS3DyqB,EAAAvvB,UAAA8xB,yBAAA,WACI,IAAMxtB,EAAU7D,KAAK6vB,SAASzqB,eAE9B,OAAOvB,GAAW7D,KAAK8vB,gBAAgB1rB,iBAAiBP,EAAQyB,WAAYzB,EAAQQ,YAQxFyqB,EAAAvvB,UAAAmtB,QAAA,WACI,OAAO1sB,KAAKivB,MAAMvC,WAQtBoC,EAAAvvB,UAAA+xB,WAAA,WACI,OAAOtxB,KAAKsvB,SAASgC,cAQzBxC,EAAAvvB,UAAAgyB,oBAAA,WACI,OAAOvxB,KAAK0vB,kBAAkB6B,uBASlCzC,EAAAvvB,UAAAsK,YAAA,WACI,OAAO7J,KAAKuvB,UAAU1lB,eAqB1BilB,EAAAvvB,UAAA0E,sBAAA,SAAsBH,GAClB,OAAO9D,KAAK6vB,SAAS5rB,sBAAsBH,IAc/CgrB,EAAAvvB,UAAAiyB,uBAAA,SAAuBxtB,EAAkBK,GACrC,OAAOrE,KAAK6vB,SAAS2B,uBAAuBxxB,KAAKoE,iBAAiBJ,EAAUK,KAQhFyqB,EAAAvvB,UAAAkyB,eAAA,WACI,OAAOzxB,KAAK2vB,aAAa8B,kBAW7B3C,EAAAvvB,UAAAmyB,wBAAA,SAAwB/hB,GACpB,OAAO3P,KAAKwvB,MAAMkC,wBAAwB1xB,KAAKkxB,sBAAuBvhB,IAW1Emf,EAAAvvB,UAAAoyB,yBAAA,SAAyBhiB,GACrB,OAAO3P,KAAKwvB,MAAMmC,yBAAyB3xB,KAAKixB,uBAAwBthB,IAhU3Dmf,EAAqB5rB,EAAA,YADzC0uB,GAAA,GACoB9C,GAArB,MCRA,WAoBI,SAAA+C,EAAY9C,GACR/uB,KAAKgvB,gBAAkBD,EAAUrlB,eACjC1J,KAAKivB,MAAQF,EAAUlnB,KACvB7H,KAAKkvB,UAAYH,EAAUroB,SAC3B1G,KAAK2C,QAAUosB,EAAUtkB,OACzBzK,KAAKmvB,cAAgBJ,EAAU3kB,aAC/BpK,KAAKovB,WAAaL,EAAUM,UAC5BrvB,KAAKsvB,SAAWP,EAAUtnB,QAC1BzH,KAAK8xB,oBAAsB/C,EAAUgD,mBACrC/xB,KAAK0vB,kBAAoBX,EAAUpnB,iBACnC3H,KAAK2vB,aAAeZ,EAAUjkB,YAC9B9K,KAAK4vB,OAASb,EAAUjlB,MACxB9J,KAAK8vB,gBAAkBf,EAAU5qB,eACjCnE,KAAKgyB,mBAAqBjD,EAAUkD,kBACpCjyB,KAAKgwB,mBAAqBjB,EAAUkB,kBACpCjwB,KAAKkyB,oBAAsBnD,EAAUoD,mBA0U7C,OAjUIN,EAAAtyB,UAAA6yB,SAAA,WACI,OAAOpyB,KAAKqyB,wBACRryB,KAAKsyB,uBACLtyB,KAAKuyB,yBACLvyB,KAAKwyB,qBACLxyB,KAAKyyB,oBACLzyB,KAAK0yB,gCACL1yB,KAAK2yB,iCACL3yB,KAAK4yB,8BACL5yB,KAAK6yB,6BACL7yB,KAAK8yB,6BACL9yB,KAAK+yB,+BACL/yB,KAAKgzB,gCACLhzB,KAAKizB,kBACLjzB,KAAKkzB,mBACLlzB,KAAKmzB,8BACLnzB,KAAKozB,iCACLpzB,KAAKqzB,gCACLrzB,KAAKszB,2BACLtzB,KAAKuzB,6BACLvzB,KAAKwzB,8BACLxzB,KAAKyzB,6BACLzzB,KAAK0zB,8BACL1zB,KAAK2zB,uBACL3zB,KAAK4zB,wBACL5zB,KAAK6zB,gCACL7zB,KAAK8zB,iCACL9zB,KAAK+zB,2BACL/zB,KAAKg0B,4BACLh0B,KAAKi0B,sBAQbpC,EAAAtyB,UAAA8yB,qBAAA,WACI,OAAOryB,KAAKkvB,UAAUgF,gBAQ1BrC,EAAAtyB,UAAA40B,uBAAA,WACI,OAAOn0B,KAAKkvB,UAAUkF,kBAQ1BvC,EAAAtyB,UAAA+yB,oBAAA,WACI,OAAOtyB,KAAKgyB,mBAAmBqC,mBAQnCxC,EAAAtyB,UAAAgzB,sBAAA,WACI,OAAOvyB,KAAKgyB,mBAAmBsC,oBAQnCzC,EAAAtyB,UAAAizB,kBAAA,WACI,OAAOxyB,KAAK4vB,OAAOsE,gBAQvBrC,EAAAtyB,UAAAkzB,iBAAA,WACI,OAAOzyB,KAAKivB,MAAMiF,gBAQtBrC,EAAAtyB,UAAAmzB,6BAAA,WACI,OAAO1yB,KAAKovB,WAAW8E,gBAQ3BrC,EAAAtyB,UAAAozB,8BAAA,WACI,OAAO3yB,KAAKgwB,mBAAmBkE,gBAQnCrC,EAAAtyB,UAAAqzB,2BAAA,WACI,OAAO5yB,KAAK8vB,gBAAgBoE,gBAShCrC,EAAAtyB,UAAAszB,0BAAA,SAA0B7uB,GACtB,OAAOhE,KAAK8vB,gBAAgByE,mBAAmBvwB,IASnD6tB,EAAAtyB,UAAAuzB,0BAAA,SAA0B9uB,GACtB,OAAOhE,KAAKgyB,mBAAmBwC,mBAAmBxwB,IAQtD6tB,EAAAtyB,UAAA0zB,eAAA,WACI,OAAOjzB,KAAK8xB,oBAAoBmB,kBAQpCpB,EAAAtyB,UAAA2zB,gBAAA,WACI,OAAOlzB,KAAK8xB,oBAAoBoB,mBAUpCrB,EAAAtyB,UAAA4zB,2BAAA,SAA2BnvB,GACvB,OAAOhE,KAAK8xB,oBAAoB0C,mBAAmBxwB,IAQvD6tB,EAAAtyB,UAAAwzB,4BAAA,WACI,OAAO/yB,KAAKmvB,cAAc4D,+BAY9BlB,EAAAtyB,UAAAyzB,6BAAA,SAA6ByB,GACzB,OAAOz0B,KAAKkyB,oBAAoBwC,wBAC5B10B,KAAKmvB,cAAcwF,6BAA6BF,IAQxD5C,EAAAtyB,UAAA+zB,wBAAA,WACI,OAAOtzB,KAAKgvB,gBAAgBsE,2BAQhCzB,EAAAtyB,UAAA8zB,6BAAA,WACI,OAAOrzB,KAAKgvB,gBAAgBoF,kBAQhCvC,EAAAtyB,UAAA6zB,8BAAA,WACI,OAAOpzB,KAAKkyB,oBAAoB0C,yBAYpC/C,EAAAtyB,UAAAk0B,0BAAA,SAA0BgB,GACtB,OAAOz0B,KAAKmvB,cAAc0F,eAAeJ,IAY7C5C,EAAAtyB,UAAAg0B,0BAAA,SAA0BkB,GACtB,OAAOz0B,KAAKmvB,cAAciF,eAAeK,IAQ7C5C,EAAAtyB,UAAAi0B,2BAAA,WACI,OAAOxzB,KAAKmvB,cAAc2F,kBAU9BjD,EAAAtyB,UAAAm0B,2BAAA,SAA2B1vB,GACvB,OAAOhE,KAAKkyB,oBAAoBsC,mBAAmBxwB,IAQvD6tB,EAAAtyB,UAAAo0B,oBAAA,WACI,OAAO3zB,KAAKsvB,SAASyF,iBAQzBlD,EAAAtyB,UAAAq0B,qBAAA,WACI,OAAO5zB,KAAKsvB,SAAS0F,kBAQzBnD,EAAAtyB,UAAAs0B,6BAAA,WACI,OAAO7zB,KAAK0vB,kBAAkBqF,iBAQlClD,EAAAtyB,UAAAu0B,8BAAA,WACI,OAAO9zB,KAAK0vB,kBAAkBsF,kBAQlCnD,EAAAtyB,UAAAw0B,wBAAA,WACI,OAAO/zB,KAAK2vB,aAAauE,gBAS7BrC,EAAAtyB,UAAAy0B,yBAAA,SAAyBzrB,GACrB,OAAOvI,KAAK2vB,aAAakF,eAAetsB,IAQ5CspB,EAAAtyB,UAAA00B,mBAAA,WACI,OAAOj0B,KAAK2C,QAAQuxB,gBA3WPrC,EAA0B3uB,EAAA,YAD9C0uB,GAAA,GACoBC,GAArB,MCAA,WAoBI,SAAAoD,EAAYlG,GACR/uB,KAAKgvB,gBAAkBD,EAAUrlB,eACjC1J,KAAKivB,MAAQF,EAAUlnB,KACvB7H,KAAKkvB,UAAYH,EAAUroB,SAC3B1G,KAAK2C,QAAUosB,EAAUtkB,OACzBzK,KAAKmvB,cAAgBJ,EAAU3kB,aAC/BpK,KAAKovB,WAAaL,EAAUM,UAC5BrvB,KAAKsvB,SAAWP,EAAUtnB,QAC1BzH,KAAK8xB,oBAAsB/C,EAAUgD,mBACrC/xB,KAAK0vB,kBAAoBX,EAAUpnB,iBACnC3H,KAAK2vB,aAAeZ,EAAUjkB,YAC9B9K,KAAK4vB,OAASb,EAAUjlB,MACxB9J,KAAK8vB,gBAAkBf,EAAU5qB,eACjCnE,KAAKgyB,mBAAqBjD,EAAUkD,kBACpCjyB,KAAKgwB,mBAAqBjB,EAAUkB,kBACpCjwB,KAAKkyB,oBAAsBnD,EAAUoD,mBAoY7C,OA5XI8C,EAAA11B,UAAA21B,UAAA,WACI,OAAOl1B,KAAKm1B,qBACRn1B,KAAKo1B,qBACLp1B,KAAKq1B,qBACLr1B,KAAKs1B,kBACLt1B,KAAKu1B,iBACLv1B,KAAKw1B,6BACLx1B,KAAKy1B,8BACLz1B,KAAK01B,2BACL11B,KAAK21B,0BACL31B,KAAK41B,yBACL51B,KAAK61B,4BACL71B,KAAK81B,6BACL91B,KAAK+1B,eACL/1B,KAAKg2B,gBACLh2B,KAAKi2B,0BACLj2B,KAAKk2B,4BACLl2B,KAAKm2B,uBACLn2B,KAAKo2B,6BACLp2B,KAAKq2B,yBACLr2B,KAAKs2B,0BACLt2B,KAAKu2B,yBACLv2B,KAAKw2B,0BACLx2B,KAAKy2B,oBACLz2B,KAAK02B,oBACL12B,KAAK22B,6BACL32B,KAAK42B,6BACL52B,KAAK62B,wBACL72B,KAAK82B,wBACL92B,KAAK+2B,mBACL/2B,KAAKg3B,yBACLh3B,KAAKi3B,wBAQbhC,EAAA11B,UAAA41B,kBAAA,WACI,OAAOn1B,KAAKkvB,UAAUgI,aAQ1BjC,EAAA11B,UAAA43B,mBAAA,WACI,OAAOn3B,KAAKkvB,UAAUkI,cAQ1BnC,EAAA11B,UAAA61B,kBAAA,WACI,OAAOp1B,KAAKgyB,mBAAmBqF,eAQnCpC,EAAA11B,UAAA81B,kBAAA,WACI,OAAOr1B,KAAKgyB,mBAAmBsF,gBAQnCrC,EAAA11B,UAAA+1B,eAAA,WACI,OAAOt1B,KAAK4vB,OAAOsH,aAQvBjC,EAAA11B,UAAAg2B,cAAA,WACI,OAAOv1B,KAAKivB,MAAMiI,aAQtBjC,EAAA11B,UAAAi2B,0BAAA,WACI,OAAOx1B,KAAKovB,WAAW8H,aAQ3BjC,EAAA11B,UAAAk2B,2BAAA,WACI,OAAOz1B,KAAKgwB,mBAAmBkH,aAQnCjC,EAAA11B,UAAAm2B,wBAAA,WACI,OAAO11B,KAAK8vB,gBAAgBoH,aAYhCjC,EAAA11B,UAAAo2B,uBAAA,SAAuB3xB,GACnB,OAAOhE,KAAK8vB,gBAAgByH,gBAAgBvzB,IAYhDixB,EAAA11B,UAAAq2B,sBAAA,SAAsB5xB,GAClB,OAAOhE,KAAKgyB,mBAAmBwF,eAAexzB,IAalDixB,EAAA11B,UAAAw2B,YAAA,SAAY/xB,GACR,OAAOhE,KAAK8xB,oBAAoBiE,YAAY/xB,IAahDixB,EAAA11B,UAAAy2B,aAAA,SAAahyB,GACT,OAAOhE,KAAK8xB,oBAAoBkE,aAAahyB,IAajDixB,EAAA11B,UAAA02B,uBAAA,SAAuBjyB,GACnB,OAAOhE,KAAK8xB,oBAAoB0F,eAAexzB,IAQnDixB,EAAA11B,UAAAs2B,yBAAA,WACI,OAAO71B,KAAKmvB,cAAc0G,4BAa9BZ,EAAA11B,UAAAu2B,0BAAA,SAA0BrB,GACtB,OAAOz0B,KAAKkyB,oBAAoBuF,qBAC5Bz3B,KAAKmvB,cAAcuI,yBAAyBjD,IAQpDQ,EAAA11B,UAAA22B,yBAAA,WACI,OAAOl2B,KAAKgvB,gBAAgBoI,cAQhCnC,EAAA11B,UAAA42B,oBAAA,WACI,OAAOn2B,KAAKgvB,gBAAgBmH,uBAQhClB,EAAA11B,UAAA62B,0BAAA,WACI,OAAOp2B,KAAKkyB,oBAAoByF,qBAYpC1C,EAAA11B,UAAA82B,sBAAA,SAAsB5B,GAClB,OAAOz0B,KAAKmvB,cAAciI,WAAW3C,IAYzCQ,EAAA11B,UAAAg3B,sBAAA,SAAsB9B,GAClB,OAAOz0B,KAAKmvB,cAAcyI,WAAWnD,IAWzCQ,EAAA11B,UAAA+2B,uBAAA,WACI,OAAOt2B,KAAKmvB,cAAc0I,cAa9B5C,EAAA11B,UAAAi3B,uBAAA,SAAuBxyB,GACnB,OAAOhE,KAAKkyB,oBAAoBsF,eAAexzB,IAQnDixB,EAAA11B,UAAAk3B,iBAAA,WACI,OAAOz2B,KAAKsvB,SAASwI,cAQzB7C,EAAA11B,UAAAm3B,iBAAA,WACI,OAAO12B,KAAKsvB,SAASyI,cAQzB9C,EAAA11B,UAAAo3B,0BAAA,WACI,OAAO32B,KAAK0vB,kBAAkBoI,cAQlC7C,EAAA11B,UAAAq3B,0BAAA,WACI,OAAO52B,KAAK0vB,kBAAkBqI,cAQlC9C,EAAA11B,UAAAs3B,qBAAA,WACI,OAAO72B,KAAK2vB,aAAauH,aAQ7BjC,EAAA11B,UAAAu3B,qBAAA,SAAqBvuB,GACjB,OAAOvI,KAAK2vB,aAAaiI,WAAWrvB,IAQxC0sB,EAAA11B,UAAAw3B,gBAAA,WACI,OAAO/2B,KAAK2C,QAAQu0B,aAYxBjC,EAAA11B,UAAAy3B,sBAAA,WACI,OAAOh3B,KAAK8xB,oBAAoB0F,kBAC5Bx3B,KAAK8xB,oBAAoBiE,eACzB/1B,KAAK8xB,oBAAoBkE,gBACzBh2B,KAAK8xB,oBAAoBkG,uBAYjC/C,EAAA11B,UAAA03B,qBAAA,WACI,OAAOj3B,KAAKgyB,mBAAmBwF,kBAC3Bx3B,KAAKgyB,mBAAmBqF,eACxBr3B,KAAKgyB,mBAAmBsF,gBACxBt3B,KAAKgyB,mBAAmBgG,uBAraf/C,EAA2B/xB,EAAA,YAD/C0uB,GAAA,GACoBqD,GAArB,GChBc,SAAAgD,GAAkClJ,GAK5C,OACI3sB,KALS,IAAI81B,GAAsBnJ,GAMnC1Y,OALW,IAAI8hB,GAA2BpJ,GAM1CqJ,SALa,IAAIC,GAA4BtJ,qBCTrD,WACI,SAAAuJ,EACYC,GAAAv4B,KAAAu4B,qBAQhB,OALID,EAAA/4B,UAAAi5B,UAAA,SAAUj2B,GAGN,OAFAA,EAAMzC,QAAUzB,OAAAo6B,GAAA,EAAAp6B,CAAa2B,KAAKu4B,mBAAmBh2B,IAE9CA,GAEf+1B,EAVA,GC+BA,kBAOI,SAAAI,EACY7rB,EACAkD,EACAmH,EACAyhB,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACA31B,EACA0K,EACAmJ,EACA+hB,EACAC,GAfZ,IAAAp5B,EAAAC,KACYA,KAAA6M,SACA7M,KAAA+P,+BACA/P,KAAAkX,yBACAlX,KAAA24B,uBACA34B,KAAA44B,4BACA54B,KAAA64B,wBACA74B,KAAA84B,uBACA94B,KAAA+4B,iCACA/4B,KAAAg5B,gCACAh5B,KAAAi5B,2BACAj5B,KAAAsD,sBACAtD,KAAAgO,8BACAhO,KAAAmX,gCACAnX,KAAAk5B,gCACAl5B,KAAAm5B,iCAERn5B,KAAKo5B,OAASnB,GAAwBj4B,KAAK6M,OAAOjJ,YAClD5D,KAAKq5B,kBCnDC,SACVC,GAEA,YAFA,IAAAA,MAA8C,gBAArBj7B,OAAAk7B,EAAA,EAAAl7B,IAElB,IAAIm7B,GAAwB,SAAAj3B,GAC/B,IAAK+2B,IAmFb,SAAgC/2B,GAC5B,SAAUA,EAAMugB,UAAWvgB,EAAMtC,MApFNw5B,CAAuBl3B,GAC1C,OAAOA,EAAMzC,QAGjB,OAAQyC,EAAMugB,SAAWvgB,EAAMtC,MAC/B,KAAKqE,EAAA,EAAqBo1B,oBACtB,MAAO,qBACDn3B,EAAMzC,QAAO,2PAMvB,KAAKwE,EAAA,EAAqBqoB,YAC1B,KAAKroB,EAAA,EAAqB6C,gBACtB,MAAO,qBACD5E,EAAMzC,QAAO,gQAMvB,KAAKwE,EAAA,EAAqB8I,sBACtB,MAAO,qBACD7K,EAAMzC,QAAO,oUAOvB,KAAKwE,EAAA,EAAqBq1B,aACtB,MAAO,qBACDp3B,EAAMzC,QAAO,6PAMvB,KAAKwE,EAAA,EAAqBs1B,eACtB,MAAO,qBACDr3B,EAAMzC,QAAO,8LAKvB,KAAKwE,EAAA,EAAqBC,qBACtB,MAAO,qBACDhC,EAAMzC,QAAO,2SAMvB,KAAKqP,GAAA,EAAwB0qB,uBACzB,MAAO,4OAMX,KAAK1qB,GAAA,EAAwBC,sBACzB,MAAO,qBACD7M,EAAMzC,QAAO,yOAMvB,KAAKqP,GAAA,EAAwB2qB,uBACzB,MAAO,qBACDv3B,EAAMzC,QAAO,4OAMvB,QACI,OAAOyC,EAAMzC,WD/BQi6B,GAEzB/5B,KAAK6M,OAAOwG,UAAU,SAAA1P,GAClB5D,EAAKq5B,OAASnB,GAAwBt0B,KA69BlD,OAx8BI+0B,EAAAn5B,UAAAqE,SAAA,WACI,OAAO5D,KAAKo5B,QAShBV,EAAAn5B,UAAAy6B,YAAA,WACIh6B,KAAK6M,OAAOmtB,eAiChBtB,EAAAn5B,UAAA8T,UAAA,SACI4mB,OADJ,MAAAl6B,EAAAC,KAEIk6B,KAAAC,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GAEA,OAAOv3B,EAAA5C,KAAK6M,QAAOwG,UAASgnB,MAAAz3B,GACxB,WAAM,OAAAq3B,EAAWl6B,EAAK6D,cAAW02B,OAC9BJ,EAAQ5M,IAAI,SAAAiN,GAAU,gBAAC52B,GAAqC,OAAA42B,EAAOtC,GAAwBt0B,UAsBtG+0B,EAAAn5B,UAAA6H,aAAA,SAAa7B,EAAa9D,GACtB,OAAOzB,KAAKw6B,UAAUj1B,EAClBvF,KAAKkX,uBAAuB9P,aAAa7B,EAAI9D,GAC7CzB,KAAKkX,uBAAuBujB,oBAAoBh5B,KAiBxDi3B,EAAAn5B,UAAAqT,eAAA,SAAepP,EAA8B/B,GACzC,IAAM6S,EAAStU,KAAKkX,uBAAuBtE,eAAepP,EAAS/B,GAEnE,OAAOzB,KAAKw6B,UAAUlmB,IAoB1BokB,EAAAn5B,UAAAm7B,UAAA,SAAU9zB,EAAiBnF,GAA3B,IAAA1B,EAAAC,KACU26B,EAAqB36B,KAAKsD,oBAAoBo3B,UAAU9zB,EAASnF,GACjEm5B,EAAmB56B,KAAK24B,qBAAqBkC,WAAWp5B,GAE9D,OAAO6K,QAAQmN,KACXzZ,KAAKw6B,UAAUG,GACf36B,KAAKw6B,UAAUI,GAAoBjhB,QAAS,aAE3C3X,KAAK,WAAM,OAAAjC,EAAK6D,cA4CzB80B,EAAAn5B,UAAAiQ,YAAA,SAAYhM,EAA2B/B,GACnC,IAAM6S,EAAStU,KAAKmX,8BAA8B5T,QAAQC,EAAS/B,GAEnE,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,qBAiC7C+e,EAAAn5B,UAAAu7B,sBAAA,SAAsBr5B,GAClB,IAAM6S,EAAStU,KAAKmX,8BAA8BrS,SAASrD,GAE3D,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,qBA0B7C+e,EAAAn5B,UAAAw7B,mBAAA,SAAmBt5B,GACf,IAAM6S,EAAStU,KAAKgO,4BAA4B+sB,mBAAmBt5B,GAEnE,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,oBAe7C+e,EAAAn5B,UAAAsP,kBAAA,SAAkB7K,EAAkBvC,GAChC,IAAM6S,EAAStU,KAAKgO,4BAA4Ba,kBAAkB7K,EAAUvC,GAE5E,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,oBAuB7C+e,EAAAn5B,UAAAqP,kBAAA,SAAkBnN,GACd,IAAM6S,EAAStU,KAAKmX,8BAA8BrR,WAAWrE,GAE7D,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,qBAoB7C+e,EAAAn5B,UAAAy7B,oBAAA,SAAoBv5B,GAChB,IAAM6S,EAAStU,KAAKmX,8BAA8BjR,aAAazE,GAE/D,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,qBAkB7C+e,EAAAn5B,UAAA07B,qBAAA,SAAqBx5B,GACjB,IAAM6S,EAAStU,KAAK64B,sBAAsBr3B,cAAcC,GAExD,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAoB7C+e,EAAAn5B,UAAA27B,sBAAA,SAAsBz5B,GAClB,IAAM6S,EAAStU,KAAKk5B,8BAA8B13B,cAAcC,GAEhE,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,uBAoB7C+e,EAAAn5B,UAAA47B,yBAAA,SAAyB15B,GACrB,OAAOzB,KAAKi7B,qBAAqBx5B,IAoBrCi3B,EAAAn5B,UAAA67B,0BAAA,SAA0B35B,GACtB,OAAOzB,KAAKk7B,sBAAsBz5B,IAqBtCi3B,EAAAn5B,UAAA87B,mBAAA,SAAmB55B,GACf,IAAM6S,EAAStU,KAAK+4B,+BAA+BjzB,WAAWrE,GAE9D,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAoB7C+e,EAAAn5B,UAAA+7B,qBAAA,SAAqB75B,GACjB,IAAM6S,EAAStU,KAAK+4B,+BAA+B7yB,aAAazE,GAEhE,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAc7C+e,EAAAn5B,UAAAg8B,gBAAA,SAAgBC,EAA+B/5B,GAC3C,IAAM6S,EAAStU,KAAK+P,6BAA6BwrB,gBAAgBC,EAAa/5B,GAE9E,OAAOzB,KAAKw6B,UAAUlmB,IAwB1BokB,EAAAn5B,UAAAk8B,eAAA,SAAeD,EAAkC/5B,GAC7C,IAAM6S,EAAStU,KAAK+4B,+BAA+B2C,OAAOF,EAAa/5B,GAEvE,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAmB7C+e,EAAAn5B,UAAAo8B,gBAAA,SAAgBl6B,GACZ,IAAM6S,EAAStU,KAAK+4B,+BAA+B6C,QAAQn6B,GAE3D,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAoB7C+e,EAAAn5B,UAAAs8B,oBAAA,SAAoBp6B,GAChB,IAAM6S,EAAStU,KAAK44B,0BAA0BiD,oBAAoBp6B,GAElE,OAAOzB,KAAKw6B,UAAUlmB,IAsB1BokB,EAAAn5B,UAAAu8B,mBAAA,SAAmBr6B,GACf,IAAM6S,EAAStU,KAAKm5B,+BAA+BrzB,WAAWrE,GAE9D,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAoB7C+e,EAAAn5B,UAAAw8B,qBAAA,SAAqBt6B,GACjB,IAAM6S,EAAStU,KAAKm5B,+BAA+BjzB,aAAazE,GAEhE,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAoB7C+e,EAAAn5B,UAAAy8B,qBAAA,SAAqBC,EAA0Bx6B,GAC3C,IAAM6S,EAAStU,KAAKm5B,+BAA+B+C,aAAaD,EAAkBx6B,GAElF,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBA4B7C+e,EAAAn5B,UAAA48B,sBAAA,SAAsB5pB,EAA6B9Q,GAC/C,IAAM6S,EAAStU,KAAKm5B,+BAA+BzmB,cAAcH,EAAS9Q,GAE1E,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAgC7C+e,EAAAn5B,UAAA68B,mBAAA,SACIhyB,EACA3I,GAEA,IAAM6S,EAAStU,KAAK44B,0BAA0BwD,mBAAmBhyB,EAAc3I,GAE/E,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAgB7C+e,EAAAn5B,UAAA88B,kBAAA,SACI5H,EACAhzB,GAEA,IAAM6S,EAAStU,KAAK44B,0BAA0ByD,kBAAkB5H,EAAehzB,GAE/E,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAoC7C+e,EAAAn5B,UAAA+8B,kBAAA,SACIC,EACA96B,GAEA,IAAM6S,EAAStU,KAAK44B,0BAA0B0D,kBAAkBC,EAAa96B,GAE7E,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAc7C+e,EAAAn5B,UAAAi9B,qBAAA,SACID,EACA96B,GAEA,IAAM6S,EAAStU,KAAK44B,0BAA0B6D,qBAAqBF,EAAa96B,GAEhF,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAc7C+e,EAAAn5B,UAAAm9B,uBAAA,SACIH,EACA96B,GAEA,IAAM6S,EAAStU,KAAK44B,0BAA0B+D,uBAAuBJ,EAAa96B,GAElF,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAwB7C+e,EAAAn5B,UAAAq9B,gCAAA,SACInI,EACAwH,EACAx6B,GAEA,IAAM6S,EAAStU,KAAK44B,0BAA0BiE,sBAC1Ct3B,GAAIkvB,EACJwH,iBAAgBA,GACjBx6B,GAEH,OAAOzB,KAAKw6B,UAAUlmB,GAAUqF,QAAS,sBAsB7C+e,EAAAn5B,UAAAu9B,qBAAA,SAAqBvqB,EAAoC9Q,QAAA,IAAAA,UACrD,IAAM6S,EAAStU,KAAK+P,6BAA6B2C,cAAcH,EAAS9Q,GAExE,OAAOzB,KAAKw6B,UAAUlmB,IAkB1BokB,EAAAn5B,UAAAw9B,YAAA,SAAYzmB,EAAc7U,GACtB,IAAM6S,EAAStU,KAAK84B,qBAAqBiE,YAAYzmB,EAAM7U,GAE3D,OAAOzB,KAAKw6B,UAAUlmB,IAiB1BokB,EAAAn5B,UAAAy9B,aAAA,SAAa1mB,EAAc7U,GACvB,IAAM6S,EAAStU,KAAK84B,qBAAqBkE,aAAa1mB,EAAM7U,GAE5D,OAAOzB,KAAKw6B,UAAUlmB,IAiB1BokB,EAAAn5B,UAAA09B,qBAAA,SAAqB3mB,EAAc7U,GAC/B,IAAM6S,EAAStU,KAAKg5B,8BAA8BiE,qBAAqB3mB,EAAM7U,GAE7E,OAAOzB,KAAKw6B,UAAUlmB,IAiB1BokB,EAAAn5B,UAAA29B,sBAAA,SAAsB5mB,EAAc7U,GAChC,IAAM6S,EAAStU,KAAKg5B,8BAA8BkE,sBAAsB5mB,EAAM7U,GAE9E,OAAOzB,KAAKw6B,UAAUlmB,IAmB1BokB,EAAAn5B,UAAAurB,gBAAA,WACI,IAAMxW,EAAStU,KAAKi5B,yBAAyBnO,kBAE7C,OAAO9qB,KAAKw6B,UAAUlmB,IAkB1BokB,EAAAn5B,UAAAksB,iBAAA,SAAiBljB,GACb,IAAM+L,EAAStU,KAAKi5B,yBAAyBxN,iBAAiBljB,GAE9D,OAAOvI,KAAKw6B,UAAUlmB,IAUlBokB,EAAAn5B,UAAAi7B,UAAR,SAAkBlmB,EAAkD7S,GAApE,IAAA1B,EAAAC,KACI,OAAOA,KAAK6M,OAAO8B,SAAS2F,EAAQ7S,GAC/BO,KAAK,WAAM,OAAAjC,EAAK6D,aAChBtB,MAAM,SAAAC,GACH,MAAMxC,EAAKs5B,kBAAkBb,UAAUj2B,MAGvDm2B,EAz/BA,YEGc,SAAAyE,GAAgC17B,GACP,WAA/B2P,SAAS2E,SAASqnB,UAClB/+B,OAAAg/B,EAAA,EAAAh/B,GAAmBi/B,KAAK,uEAGH,eAArBj/B,OAAAk7B,EAAA,EAAAl7B,IACAA,OAAAg/B,EAAA,EAAAh/B,GAAmBi/B,KAAK,6HAG5B,IAAM7yB,GACF1G,MACIw5B,eAAgB97B,GAAWA,EAAQ87B,gBAEvClnB,UACA+hB,aAEEx1B,EAAAnB,MAAEkP,EAAA/N,EAAAI,cAAA,IAAA2N,EAAA,GAAAA,EAAaO,EAAAtO,EAAA46B,0BAAA,IAAAtsB,KACfmV,EAAgBhoB,OAAAo/B,EAAA,oBAAAp/B,EAAsBq/B,KAAMj8B,GAAWA,EAAQi8B,OAC/Dj6B,EAAQpF,OAAAs/B,GAAA,EAAAt/B,EAAsBoM,OAAMA,IAAM+yB,mBAAkBA,IAC5DpX,EClDI,SAA8B3iB,GACxC,IAAM2iB,EAAgB/nB,OAAAu/B,EAAA,aAAAv/B,GAatB,OAXAoF,EAAM4P,UACF,SAAA1P,GACI,IAAM8G,EAAS9G,EAAM8G,OAAOC,iBAExBD,GACA2b,EAAcyX,QAAQpzB,EAAO6C,gBAAgBwwB,gBAGrD,SAAAn6B,GAAS,OAAAA,EAAM8G,OAAOC,mBAGnB0b,EDoCe2X,CAAoBt6B,GACpCu6B,EAAqB,IAAItW,EAAA,EAAmBrB,GAC5CgB,EAAwB,IAAIC,EAAA,EAAsBjB,GAClDgC,EAAsB,IAAIC,EAAA,EAAoB,IAAIF,EAAA,EAAoB/B,IACtEpH,EAAqB,IAAIwI,EAAA,EAAmBuW,EAAoB,IAAIxW,EAAkBH,IAE5F,OAAO,IAAI4W,GACPx6B,EACA,IAAImjB,EAAA,EAA4B,IAAIC,EAAA,EAA4BR,IAChE,IAAImC,EAAA,EAAsBnB,EAAuBgB,GACjDA,EACA,IAAI6V,GAAA,EAAyB,IAAIC,GAAA,EAAyB9X,GAAgBgB,GAC1E,IAAI+W,EAAqB,IAAIC,EAAqBhY,GAAiBrjB,OAAMA,KACzE,IAAIs7B,EAAA,EAAoB,IAAIC,EAAA,EAAoBlY,IAChD,IAAImY,EAAA,EAA8BngC,OAAAogC,EAAA,EAAApgC,CAA+BoF,EAAO4iB,IACxE,IAAIqY,EAAA,EAA6B,IAAIC,EAAA,EAA6BtY,IAClE,IAAIuY,GAAwB,IAAIC,GAAwBzY,EAAeC,IACvEpH,EACA,IAAI6I,EAAA,EAA2B,IAAIC,EAAA,EAA2B1B,IAC9D,IAAIqC,EACAvC,GAA8B1iB,EAAO2iB,EAAeC,GACpDpH,GAEJ,IAAI6f,GAAA,EAA6B,IAAIC,GAAA,EAA6B1Y,GAAiBrjB,OAAMA,KACzF,IAAIg8B,GAAA,EAA8B3gC,OAAA4gC,GAAA,EAAA5gC,CAA+BoF,EAAO4iB,uWE3EhF,IAAY6Y,kCAAZ,SAAYA,GACRA,EAAA,4CACAA,EAAA,4CACAA,EAAA,sCAHJ,CAAYA,0CCAZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,kDACAA,EAAA,kDACAA,EAAA,4CAHJ,CAAYA,yCCAZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,mEACAA,EAAA,mEACAA,EAAA,6DAHJ,CAAYA,0BCJZ1hC,EAAAD,QAAAkC,QAAA,wCCAAjC,EAAAD,QAAAkC,QAAA,oGCEc,SAAA0/B,EAAsBC,GAChC,IAAK,kBAAkBC,KAAKD,GACxB,MAAM,IAAIE,EAAA,EAAqB,sCAInC,IAAMC,EAASruB,SAASsuB,cAAc,KAItC,OAFAD,EAAOzpB,KAAOspB,EAEJG,EAAOrC,SAAQ,KAAKqC,EAAOE,UAAcF,EAAOG,KAAO,IAAIH,EAAOG,KAAS,mGCZlF,IAAMC,EAAc,cACdC,EAAW,2BCDxBpiC,EAAAD,QAAAkC,QAAA,8CCAAjC,EAAAD,QAAAkC,QAAA,8FC+BO,IAAMogC,GACT1pB,UACA+hB,2CCzBJ/2B,EAAA,GAPI,uCACA,sCACA,WACA,WACA,qDCDU,SAAAuG,EAAkBo4B,EAAcC,EAAcx+B,GACxD,OAAIu+B,IAAYC,IAIZD,GAAWC,GAA8B,iBAAZD,GAA2C,iBAAZC,EACxDC,MAAMC,QAAQH,IAAYE,MAAMC,QAAQF,GAsCpD,SAAsBD,EAAgBC,EAAgBx+B,GAClD,GAAIu+B,EAAQnP,SAAWoP,EAAQpP,OAC3B,OAAO,EAGX,IAAK,IAAIuP,EAAQ,EAAGC,EAASL,EAAQnP,OAAQuP,EAAQC,EAAQD,IACzD,IAAKx4B,EAAQo4B,EAAQI,GAAQH,EAAQG,GAAQ3+B,GACzC,OAAO,EAIf,OAAO,EAhDQ6+B,CAAaN,EAASC,EAASx+B,IAGtCy+B,MAAMC,QAAQH,KAAYE,MAAMC,QAAQF,KAIvCD,aAAmBhU,MAAUiU,aAAmBjU,KA0B7D,SAAqBgU,EAAeC,GAChC,OAAOD,EAAQ5T,YAAc6T,EAAQ7T,UA1BtBmU,CAAYP,EAASC,KAG3BD,aAAmBhU,MAAUiU,aAAmBjU,QAIhDgU,aAAmBQ,QAAYP,aAAmBO,OAc/D,SAAuBR,EAAiBC,GACpC,OAAOD,EAAQtb,aAAeub,EAAQvb,WAdvB+b,CAAcT,EAASC,KAG7BD,aAAmBQ,QAAYP,aAAmBO,SAgC/D,SACIR,EACAC,EACAx+B,GAEA,IAAM84B,EAAS94B,GAAWA,EAAQi/B,UAC5BC,EAAQpG,EAASl8B,OAAOuiC,KAAKZ,GAASzF,OAAOA,GAAUl8B,OAAOuiC,KAAKZ,GACnEa,EAAQtG,EAASl8B,OAAOuiC,KAAKX,GAAS1F,OAAOA,GAAUl8B,OAAOuiC,KAAKX,GAEzE,GAAIU,EAAM9P,SAAWgQ,EAAMhQ,OACvB,OAAO,EAGX,IAAK,IAAIuP,EAAQ,EAAGU,EAASH,EAAM9P,OAAQuP,EAAQU,EAAQV,IAAS,CAChE,IAAMlhC,EAAMyhC,EAAMP,GAElB,IAAKH,EAAQzgC,eAAeN,GACxB,OAAO,EAGX,IAAK0I,EAAQo4B,EAAQ9gC,GAAM+gC,EAAQ/gC,GAAMuC,GACrC,OAAO,EAIf,OAAO,EArDIs/B,CAAcf,EAASC,EAASx+B,KAGpCu+B,IAAYC,iEC/BvB,IAAYe,kCAAZ,SAAYA,GACRA,EAAA,qDACAA,EAAA,qDACAA,EAAA,+CAEAA,EAAA,uDACAA,EAAA,uDACAA,EAAA,iDAPJ,CAAYA,yCCAZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,kDACAA,EAAA,kDACAA,EAAA,4CAEAA,EAAA,yEACAA,EAAA,yEACAA,EAAA,mEAPJ,CAAYA,sDCFNC,GACF/+B,QACAW,WACA4J,OAAQ,GAGZy0B,EAAA,SAAAthC,GAMI,SAAAshC,EACIl/B,EACAW,OAAA+N,OAAA,IAAA/N,OAAE9C,EAAA6Q,EAAA7Q,QAASuW,EAAA1F,EAAA0F,OAFftW,EAAAC,KAOUkR,EAAAjP,GAAAi/B,EAAE/+B,EAAA+O,EAAA/O,KAAMW,EAAAoO,EAAApO,QAAS4J,EAAAwE,EAAAxE,cAEvB3M,EAAAF,EAAA/B,KAAAkC,KAAMF,GAAW,sCAAoCE,MAEhDC,KAAO,UACZF,EAAKoC,KAAOA,EACZpC,EAAK+C,QAAUA,EACf/C,EAAK2M,OAASA,EACd3M,EAAKsW,OAASA,QAEtB,OAvBuD9V,EAAA,UAAA4gC,EAAAthC,GAuBvDshC,EAvBA,MAAuD,wCCJvD,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,gDACAA,EAAA,gDACAA,EAAA,0CAEAA,EAAA,oDACAA,EAAA,oDACAA,EAAA,8CAPJ,CAAYA,yCCDZ,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,0CACAA,EAAA,0CACAA,EAAA,oCAEAA,EAAA,2DACAA,EAAA,2DACAA,EAAA,qDAEAA,EAAA,8CACAA,EAAA,8CACAA,EAAA,wCAEAA,EAAA,kDACAA,EAAA,kDACAA,EAAA,4CAfJ,CAAYA,yGCLL,IAAMC,EAAS,sBACTC,EAAU,qDCCT,SAAAC,EACVniC,EACAY,GAEA,OAAOZ,EAAOY,OAASA,gICC3B,WAMI,SAAAwhC,EAAY1S,GACR/uB,KAAK0hC,gBAAkB3S,EAAU4S,eAUzC,OAPIF,EAAAliC,UAAAqiC,yBAAA,SAAyB59B,GACrB,OAAOhE,KAAK0hC,gBAAgBlN,mBAAmBxwB,IAGnDy9B,EAAAliC,UAAAsiC,2BAAA,SAA2B79B,GACvB,OAAOhE,KAAK0hC,gBAAgBI,qBAAqB99B,IAfpCy9B,EAA2Bv+B,EAAA,YAD/C0uB,EAAA,GACoB6P,GAArB,KCAA,WAMI,SAAAM,EAAYhT,GACR/uB,KAAK0hC,gBAAkB3S,EAAU4S,eAUzC,OAPII,EAAAxiC,UAAAyiC,qBAAA,SAAqBh+B,GACjB,OAAOhE,KAAK0hC,gBAAgBlK,eAAexzB,IAG/C+9B,EAAAxiC,UAAA0iC,uBAAA,SAAuBj+B,GACnB,OAAOhE,KAAK0hC,gBAAgBQ,iBAAiBl+B,IAfhC+9B,EAA4B7+B,EAAA,YADhD0uB,EAAA,GACoBmQ,GAArB,GCDc,SAAAI,EAAwCpT,GAIlD,OACI1Y,OAJW,IAAI+rB,EAA4BrT,GAK3CqJ,SAJa,IAAIiK,EAA6BtT,ICDtD,ICPKuT,IDOL,WAMI,SAAAC,EACY11B,EACA21B,GAFZ,IAAAziC,EAAAC,KACYA,KAAA6M,SACA7M,KAAAwiC,+BAERxiC,KAAKo5B,OAAS+I,EAA8BniC,KAAK6M,OAAOjJ,YAExD5D,KAAK6M,OAAOwG,UAAU,SAAA1P,GAClB5D,EAAKq5B,OAAS+I,EAA8Bx+B,KA6GxD,OA1FI4+B,EAAAhjC,UAAAqE,SAAA,WACI,OAAO5D,KAAKo5B,QAiChBmJ,EAAAhjC,UAAA8T,UAAA,SACI4mB,OADJ,MAAAl6B,EAAAC,KAEIk6B,KAAAC,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAD,EAAAC,EAAA,GAAAC,UAAAD,GAEA,OAAOv3B,EAAA5C,KAAK6M,QAAOwG,UAASgnB,MAAAz3B,GACxB,WAAM,OAAAq3B,EAAWl6B,EAAK6D,aACtB,SAAAD,GAAS,OAAAA,EAAMg+B,eAAe/9B,aAAU02B,OACrCJ,EAAQ5M,IAAI,SAAAiN,GAAU,gBAAC52B,GAAqC,OAAA42B,EAAO4H,EAA8Bx+B,UAsB5G4+B,EAAAhjC,UAAAkjC,iBAAA,SAAiBhhC,GAAjB,IAAA1B,EAAAC,KACUsU,EAAStU,KAAKwiC,6BAA6B18B,WAAWrE,GACtDkY,EAAU,0BAA0BlY,EAAQuC,SAAQ,IAAIvC,EAAQihC,YAEtE,OAAO1iC,KAAK6M,OAAO8B,SAAS2F,GAAUqF,QAAOA,IACxC3X,KAAK,WAAM,OAAAjC,EAAK6D,cAezB2+B,EAAAhjC,UAAAojC,mBAAA,SAAmBlhC,GAAnB,IAAA1B,EAAAC,KACUsU,EAAStU,KAAKwiC,6BAA6Bt8B,aAAazE,GACxDkY,EAAU,0BAA0BlY,EAAQuC,SAElD,OAAOhE,KAAK6M,OAAO8B,SAAS2F,GAAUqF,QAAOA,IACxC3X,KAAK,WAAM,OAAAjC,EAAK6D,cAE7B2+B,EA1HA,6DEQA,WACI,SAAAK,EACYC,EACA70B,GADAhO,KAAA6iC,YACA7iC,KAAAgO,8BA2BhB,OAxBI40B,EAAArjC,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACU+D,GAASC,SAAUvC,EAAQuC,UAEjC,OAAO3F,OAAA0G,EAAA,OAAA1G,CACHA,OAAA2G,EAAA,GAAA3G,CAAGA,OAAAwD,EAAA,aAAAxD,CAAaykC,EAAA,EAAyBC,+BAA2Bp+B,EAAWZ,IAC/E/D,KAAKgO,4BAA4Ba,kBAAkBpN,EAAQuC,UAAYnB,QAASpB,EAAQoB,QAASmgC,UAAU,IAC3G3kC,OAAA8G,EAAA,MAAA9G,CAAM,WAAM,OAAA0B,EAAK8iC,UAAUrkC,IAAIiD,EAAQuC,UAAU8B,WAAWrE,GACvDO,KAAK,WAAM,OAAA3D,OAAAwD,EAAA,aAAAxD,CAAaykC,EAAA,EAAyBG,+BAA2Bt+B,EAAWZ,QAC9F2B,KACErH,OAAAsH,EAAA,WAAAtH,CAAW,SAAAkE,GAAS,OAAAlE,OAAAuH,EAAA,EAAAvH,CAAiBykC,EAAA,EAAyBI,uBAAwB3gC,EAAOwB,OAIrG6+B,EAAArjC,UAAA2G,aAAA,SAAazE,GAAb,IAAA1B,EAAAC,KACU+D,GAASC,SAAUvC,EAAQuC,UAEjC,OAAO3F,OAAA0G,EAAA,OAAA1G,CACHA,OAAA2G,EAAA,GAAA3G,CAAGA,OAAAwD,EAAA,aAAAxD,CAAaykC,EAAA,EAAyBK,iCAA6Bx+B,EAAWZ,IACjF1F,OAAA8G,EAAA,MAAA9G,CAAM,WAAM,OAAA0B,EAAK8iC,UAAUrkC,IAAIiD,EAAQuC,UAAUkC,eAC5ClE,KAAK,WAAM,OAAA3D,OAAAwD,EAAA,aAAAxD,CAAaykC,EAAA,EAAyBM,iCAA6Bz+B,EAAWZ,QAChG2B,KACErH,OAAAsH,EAAA,WAAAtH,CAAW,SAAAkE,GAAS,OAAAlE,OAAAuH,EAAA,EAAAvH,CAAiBykC,EAAA,EAAyBO,yBAA0B9gC,EAAOwB,OAG3G6+B,EA9BA,sHDfA,SAAKN,GACDA,EAAA,mCACAA,EAAA,gDACAA,EAAA,yCACAA,EAAA,mCACAA,EAAA,wBACAA,EAAA,8BANJ,CAAKA,WASL,IAAAgB,EAAA,6BEPA,oBAAAC,IACcvjC,KAAA4N,kBAad,OAXI21B,EAAAhkC,UAAAuG,WAAA,SAAWrE,GAGP,OAFAzB,KAAK4N,eAAenM,EAAQihC,cAAe,EAEpCp2B,QAAQC,WAGnBg3B,EAAAhkC,UAAA2G,aAAA,WAGI,OAFAlG,KAAK4N,kBAEEtB,QAAQC,WAEvBg3B,EAdA,KCWA,SAAA1jC,GAII,SAAA2jC,EACY32B,EACAqK,EACA8I,EACAyjB,EACArtB,EACAstB,QAAA,IAAAA,OAAA,GANZ,IAAA3jC,EAQIF,EAAA/B,KAAAkC,OAAOA,YAPCD,EAAA8M,SACA9M,EAAAmX,yBACAnX,EAAAigB,uBACAjgB,EAAA0jC,sBACA1jC,EAAAqW,cACArW,EAAA2jC,iBAgNhB,OA1N2DxgC,EAAA,UAAAsgC,EAAA3jC,GAevD2jC,EAAAjkC,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,GAAIA,KAAK4N,eAAenM,EAAQihC,aAC5B,OAAO7iC,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,GAG5B,IAAMkiC,GAAiB3jC,KAAK0jC,aAAejiC,EAAQmiC,sBAAwBniC,EAAQoiC,qBAC7ElgC,EAAQ3D,KAAK6M,OAAOjJ,WACpBoG,EAAgBhK,KAAKsQ,eAAiB3M,EAAMQ,eAAeC,iBAAiB3C,EAAQuC,UAE1F,IAAKgG,IAAkBA,EAAc0F,YACjC,MAAM,IAAIpL,EAAA,EAAiBA,EAAA,EAAqBC,sBAKpD,OAFAvE,KAAKggB,qBAAqBla,WAAWkE,EAAc0F,aAE5CpD,QAAQmN,KACXzZ,KAAKggB,qBAAqB8jB,oBAC1B9jC,KAAKyjC,oBAAoBtuB,eAExBnT,KAAK,SAACY,OAACmhC,EAAAnhC,EAAA,GAAgBwS,EAAAxS,EAAA,GACpB7C,EAAKikC,gBAAkBD,EAEvB,IAAME,KACAC,KAQN,OANIP,EAAcQ,YACdF,EAAeG,KAAKhvB,EAAOivB,QAAQC,QAEnCJ,EAAkBE,KAAKhvB,EAAOivB,QAAQC,QAGnClvB,EAAOmvB,OAAOC,QACjBC,IAAKz6B,EAAcS,OAAOgL,SAAW,UAAY,aACjDivB,SAAQf,EAAcgB,qBACtBC,SACIC,QAASZ,EACTa,WAAYZ,GAEhB/oB,MAAKjY,EAAA,UACD6hC,MAAO,OACP9qB,MAAOla,EAAK2jC,aAAe,cAAW/+B,GACnCtG,OAAA4J,EAAA,KAAA5J,CAAKslC,EAAcxoB,MAAO,SAAU,OAAQ,QAAS,QAAS,QAAS,UAAW,iBAEzFtX,QAAS,WAAM,OAAA9D,EAAKilC,cAAcrB,EAAcsB,iBAChDC,YAAa,SAAA9iC,GAAQ,OAAArC,EAAKolC,iBAAiB/iC,EAAMuhC,EAAcgB,qBAAsBhB,EAAcyB,oBACpG3jC,EAAQihC,eAEd1gC,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrC+hC,EAAAjkC,UAAA2G,aAAA,WACI,OAAK7H,OAAOuiC,KAAK5gC,KAAK4N,gBAAgBijB,QAItC7wB,KAAKgkC,qBAAkBr/B,EACvB3E,KAAKsQ,oBAAiB3L,EAEtB3E,KAAKggB,qBAAqB0B,WAEnB7hB,EAAAN,UAAM2G,aAAYpI,KAAAkC,OARdH,EAAAN,UAAM2G,aAAYpI,KAAAkC,OAWzBwjC,EAAAjkC,UAAAylC,cAAR,SAAsBh0B,GAAtB,IAAAjR,EAAAC,KACI,OAAOA,KAAK6M,OAAO8B,SAAS3O,KAAKkX,uBAAuBujB,uBACnDz4B,KAAK,SAAA2B,GACF,IAAM+C,EAAW/C,EAAM+C,SAASC,cAC1B8D,EAAS9G,EAAM8G,OAAOC,iBACtBd,EAAWjG,EAAMiG,SAASC,cAC1B0I,EAAU3I,GAAYA,EAASy7B,WAAaz7B,EAASy7B,UAAU,GAErE,IAAKtlC,EAAKikC,gBACN,MAAM,IAAI70B,EAAA,EAAoBA,EAAA,EAAwBm2B,8BAG1D,IAAK5+B,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAKsD,EACD,MAAM,IAAInG,EAAA,EAAiBA,EAAA,EAAqB8I,uBAGpD,OAAOrN,EAAKikC,gBAAgBuB,eACxB3kB,KAAM,WACND,uBAAuB,EACvB6kB,yBAAyB,EACzBC,wBAAyBlzB,EAAUxS,EAAK2lC,uBAAuBnzB,QAAW5N,EAC1EwV,OAAQzT,EAASa,WACjBwS,SAAUtP,EAAOsP,SAASzD,KAC1BmK,YAAa1gB,EAAK2jC,iBAGzBphC,MAAM,SAAAC,GAKH,MAJIyO,GACAA,EAAQzO,GAGNA,KAIVihC,EAAAjkC,UAAA4lC,iBAAR,SACI/iC,EACAuiC,EACA3zB,GAHJ,IAAAjR,EAAAC,KAKI,IAAKA,KAAKgkC,kBAAoBhkC,KAAKsQ,eAC/B,MAAM,IAAInB,EAAA,EAAoBA,EAAA,EAAwBm2B,8BAG1D,IAAMthC,EAAWhE,KAAKsQ,eAAe/K,GAErC,OAAO+G,QAAQmN,KACXzZ,KAAKgkC,gBAAgB2B,gBAAgBvjC,GACrCpC,KAAKggB,qBAAqBwB,kBAAmBpM,QAAQ,MAEpDpT,KAAK,SAACY,OAACY,EAAAZ,EAAA,GAAW6e,EAAA7e,EAAA,GAAA6e,WAWf,OAVA1hB,EAAKqW,YAAYG,SAAS,iBACtBqvB,aAAc,SACdjrB,SAAU3W,EACVsQ,OAAQqwB,EAAuB,kBAAoB,wBACnDp1B,MAAO/L,EAAQ+L,MACfs2B,YAAapkB,EACbqkB,iBAAkBlrB,KAAKC,UAAU9a,EAAKgmC,4BAA4BviC,IAClEwiC,gBAAiBprB,KAAKC,UAAU9a,EAAKkmC,2BAA2BziC,MAG7DA,IAEVlB,MAAM,SAAAC,GAKH,MAJIyO,GACAA,EAAQzO,GAGNA,KAIVihC,EAAAjkC,UAAAwmC,4BAAR,SAAoCviC,GAChC,IAAM0G,EAAkB1G,EAAQ0iC,QAAQh8B,gBAElCtH,GADgBsH,GAAmBA,EAAgBi8B,eAAiB,IACpEC,MAAA,KAAChW,EAAAxtB,EAAA,GAAWytB,EAAAztB,EAAA,GAElB,OACIyjC,MAAO7iC,EAAQ0iC,QAAQG,MACvBC,WAAYlW,EACZmW,UAAWlW,EACXmW,aAAct8B,GAAmBA,EAAgBwmB,OAASltB,EAAQ0iC,QAAQxV,MAC1E+V,eAAgBv8B,GAAmBA,EAAgBw8B,MACnDC,eAAgBz8B,GAAmBA,EAAgB08B,MACnDrW,KAAMrmB,GAAmBA,EAAgBqmB,KACzC5sB,MAAOuG,GAAmBA,EAAgBvG,MAC1CkjC,aAAc38B,GAAmBA,EAAgByF,YACjDm3B,YAAa58B,GAAmBA,EAAgB4Q,aAIhD0oB,EAAAjkC,UAAA0mC,2BAAR,SAAmCziC,GAC/B,IAAMkG,EAAiBlG,EAAQ0iC,QAAQx8B,eACjCQ,EAAkB1G,EAAQ0iC,QAAQh8B,gBAExC,OAAIR,GAEI28B,MAAO7iC,EAAQ0iC,QAAQG,MACvBC,WAAY58B,EAAe0mB,WAAa5sB,EAAQ0iC,QAAQ9V,UACxDmW,UAAW78B,EAAe2mB,UAAY7sB,EAAQ0iC,QAAQ7V,SACtDmW,aAAc98B,EAAegnB,OAASltB,EAAQ0iC,QAAQxV,MACtD+V,eAAgB/8B,EAAeg9B,MAC/BC,eAAgBj9B,EAAek9B,MAC/BrW,KAAM7mB,EAAe6mB,KACrB5sB,MAAO+F,EAAe/F,MACtBkjC,aAAcn9B,EAAeiG,YAC7Bm3B,YAAap9B,EAAeoR,aAKhCurB,MAAO7iC,EAAQ0iC,QAAQG,MACvBC,WAAY9iC,EAAQ0iC,QAAQ9V,UAC5BmW,UAAW/iC,EAAQ0iC,QAAQ7V,SAC3BmW,aAAchjC,EAAQ0iC,QAAQxV,MAC9B+V,eAAgBv8B,GAAmBA,EAAgBw8B,MACnDC,eAAgBz8B,GAAmBA,EAAgB08B,MACnDrW,KAAMrmB,GAAmBA,EAAgBqmB,KACzC5sB,MAAOuG,GAAmBA,EAAgBvG,MAC1CkjC,aAAc38B,GAAmBA,EAAgByF,YACjDm3B,YAAa58B,GAAmBA,EAAgB4Q,aAIhD0oB,EAAAjkC,UAAAmmC,uBAAR,SAA+BnzB,GAC3B,OACIm0B,MAAOn0B,EAAQsP,SACf+kB,MAAOr0B,EAAQuP,SACfyO,KAAMhe,EAAQge,KACd5sB,MAAO4O,EAAQke,oBACf3V,WAAYvI,EAAQuI,WACpBnL,YAAa4C,EAAQ5C,YACrB+gB,MAAOne,EAAQme,MACfyV,cAAkB5zB,EAAQ6d,UAAS,IAAI7d,EAAQ8d,WAG3DmT,EA1NA,CAA2DuD,sBCC3D,SAAAlnC,GAKI,SAAAmnC,EACYn6B,EACAqK,EACAiO,GAHZ,IAAAplB,EAKIF,EAAA/B,KAAAkC,OAAOA,YAJCD,EAAA8M,SACA9M,EAAAmX,yBACAnX,EAAAolB,4BAmGhB,OA3GsDjiB,EAAA,UAAA8jC,EAAAnnC,GAalDmnC,EAAAznC,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACY0iC,EAAAjhC,EAAAihC,YAAa1+B,EAAAvC,EAAAuC,SAErB,IAAK0+B,IAAgB1+B,EACjB,MAAM,IAAIyF,EAAA,EAAqB,qEAGnC,OAAIzJ,KAAK4N,eAAe80B,GACb7iC,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,IAG5BzB,KAAK6d,UAAY7Z,EAEVhE,KAAK6M,OAAO8B,SAAS3O,KAAKkX,uBAAuBujB,uBACnDz4B,KAAK,SAAA2B,GACF,IAAMqG,EAAgBrG,EAAMQ,eAAeC,iBAAiBJ,GAE5D,IAAKgG,IAAkBA,EAAcmC,mBAAmBmZ,WACpD,MAAM,IAAIhhB,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,OAAOxE,EAAKolB,wBAAwB9W,KAAKrE,EAAcS,OAAOgL,YAEjEzT,KAAK,SAAAiX,GAIF,OAHAlZ,EAAKqlB,kBAAoBnM,EACzBlZ,EAAKknC,cAAgBlnC,EAAKmnC,oBAAoBxE,GAEvC7iC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,OAIpCulC,EAAAznC,UAAA2G,aAAA,WACI,OAAKlG,KAAK4N,gBAIN5N,KAAKinC,eAAiBjnC,KAAKinC,cAAcE,aACzCnnC,KAAKinC,cAAc7oB,oBAAoB,QAASpe,KAAKme,0BACrDne,KAAKinC,cAAcE,WAAWC,YAAYpnC,KAAKinC,eAC/CjnC,KAAKinC,mBAAgBtiC,GAGlB9E,EAAAN,UAAM2G,aAAYpI,KAAAkC,OATdH,EAAAN,UAAM2G,aAAYpI,KAAAkC,OAYzBgnC,EAAAznC,UAAA2nC,oBAAR,SAA4BxE,GACxB,IAAM2E,EAAkBj2B,SAASC,eAAeqxB,GAEhD,IAAK2E,EACD,MAAM,IAAIjnC,MAAM,wCAGpB,IAAMmV,EAASnE,SAASsuB,cAAc,SAQtC,OANAnqB,EAAOtV,KAAO,QACdsV,EAAO+xB,IAAM,4EACbD,EAAgBE,YAAYhyB,GAE5BA,EAAO2I,iBAAiB,QAASle,KAAKme,0BAE/B5I,GAGHyxB,EAAAznC,UAAA8lB,yBAAR,WACI,IAAM1hB,EAAQ3D,KAAK6M,OAAOjJ,WACpB8C,EAAW/C,EAAM+C,SAASC,cAC1BqD,EAAgBhK,KAAK6d,UAAYla,EAAMQ,eAAeC,iBAAiBpE,KAAK6d,WAAa,KAE/F,IAAKnX,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAK6C,EACD,MAAM,IAAI1F,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,OACI+gB,WAAYtb,EAAcmC,mBAAmBmZ,WAC7CC,iBAAkBvb,EAAcmC,mBAAmBoZ,iBACnDpL,OAAQzT,EAASmB,KAAK2/B,WAAW9iB,WACjC3K,SAAUrT,EAASmB,KAAKkS,SAASzD,KACjCmP,OAAQ/e,EAASmB,KAAKtC,GACtBmgB,yBAAyB,IAKzBshB,EAAAznC,UAAA4e,yBAAR,WACI,IAAKne,KAAKolB,kBACN,MAAM,IAAIjW,EAAA,EAAoBA,EAAA,EAAwBm2B,8BAG1DtlC,KAAKolB,kBAAkB1e,SAAS1G,KAAKqlB,6BALzCniB,EAAA,YADC6b,EAAA,gDAQLioB,EA3GA,CAAsDD,KCLtD,SAAAlnC,GAII,SAAA4nC,EACY56B,EACAuJ,EACAc,EACA0G,GAJZ,IAAA7d,EAMIF,EAAA/B,KAAAkC,OAAOA,YALCD,EAAA8M,SACA9M,EAAAqW,cACArW,EAAAmX,yBACAnX,EAAA6d,+BAuFhB,OA/FqD1a,EAAA,UAAAukC,EAAA5nC,GAajD4nC,EAAAloC,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACY0iC,EAAAjhC,EAAAihC,YAAa1+B,EAAAvC,EAAAuC,SAErB,IAAK0+B,IAAgB1+B,EACjB,MAAM,IAAIyF,EAAA,EAAqB,qEAGnC,OAAIzJ,KAAK4N,eAAe80B,GACb7iC,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,IAG5BzB,KAAK6d,UAAY7Z,EAEVhE,KAAK6M,OAAO8B,SAAS3O,KAAKkX,uBAAuBujB,uBACnDz4B,KAAK,WAAM,OAAAjC,EAAK6d,2BAA2B9X,WAAW/F,EAAK2nC,gBACvD1lC,KAAK,WACFjC,EAAKke,cAAgBle,EAAKmnC,oBAAoBxE,OAEpD1gC,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,OAGtCgmC,EAAAloC,UAAA2G,aAAA,eAAAnG,EAAAC,KACI,OAAKA,KAAK4N,gBAIN5N,KAAKie,eAAiBje,KAAKie,cAAckpB,aACzCnnC,KAAKie,cAAckpB,WAAWC,YAAYpnC,KAAKie,eAC/Cje,KAAKie,mBAAgBtZ,GAGlB3E,KAAK4d,2BAA2B1X,eAClClE,KAAK,WAAM,OAAAnC,EAAAN,UAAM2G,aAAYpI,KAAAiC,MATvBF,EAAAN,UAAM2G,aAAYpI,KAAAkC,OAYzBynC,EAAAloC,UAAA2nC,oBAAR,SAA4BxE,GACxB,IAAM3xB,EAAYK,SAASC,eAAeqxB,GAE1C,IAAK3xB,EACD,MAAM,IAAItH,EAAA,EAAqB,+DAGnC,IAAMk+B,EAAkB3nC,KAAK4d,2BAA2BgqB,aAAa5nC,KAAKme,0BAI1E,OAFApN,EAAUw2B,YAAYI,GAEfA,GAGHF,EAAAloC,UAAAmoC,aAAR,WACI,IAAK1nC,KAAK6d,UACN,MAAM,IAAI1O,EAAA,EAAoBA,EAAA,EAAwBC,uBAG1D,OAAOpP,KAAK6d,WAIR4pB,EAAAloC,UAAA4e,yBAAR,SAAiCU,GADjC,IAAA9e,EAAAC,KAII,OAFA6e,EAAMC,iBAEC9e,KAAK4d,2BAA2BW,gBAClCvc,KAAK,SAAAwH,GAAe,OAAAzJ,EAAK6d,2BAA2BF,cAAclU,GAC9DxH,KAAK,WAAM,OAAAjC,EAAK6d,2BAA2Bue,sBAAsB3yB,EAAYU,qBACjFlI,KAAK,WAAM,OAAAjC,EAAK8nC,6BAChBvlC,MAAM,SAAAC,GAAS,OAAAxC,EAAK+nC,SAASvlC,MAG9BklC,EAAAloC,UAAAsoC,yBAAR,WACI7nC,KAAKoW,YAAYG,SAAS,iBACtBzT,SACI0X,OAAQ,YACRC,eAAgB,wCAKpBgtB,EAAAloC,UAAAuoC,SAAR,SAAiBvlC,GACb,GAAIA,GAA2B,aAAlBA,EAAMzC,QACf,MAAMyC,GArBdW,EAAA,YADC6b,EAAA,gDAyBL0oB,EA/FA,CAAqDV,KCGrD,SAAAlnC,GAGI,SAAAkoC,EACYl7B,EACA42B,EACArtB,GAHZ,IAAArW,EAKIF,EAAA/B,KAAAkC,OAAOA,YAJCD,EAAA8M,SACA9M,EAAA0jC,sBACA1jC,EAAAqW,gBAiHhB,OAvHkDlT,EAAA,UAAA6kC,EAAAloC,GAW9CkoC,EAAAxoC,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,GAAIA,KAAK4N,eAAenM,EAAQihC,aAC5B,OAAO7iC,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,GAG5B,IAAMkiC,EAAgBliC,EAAQ2T,OACxBzR,EAAQ3D,KAAK6M,OAAOjJ,WACpBoG,EAAgBhK,KAAKsQ,eAAiB3M,EAAMQ,eAAeC,iBAAiB3C,EAAQuC,UAE1F,IAAK2/B,EACD,MAAM,IAAIl6B,EAAA,EAGd,OAAOzJ,KAAKyjC,oBAAoBtuB,aAC3BnT,KAAK,SAAAoT,SACF,IAAKpL,IAAkBA,EAAcS,OAAOqG,WACxC,MAAM,IAAIxM,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,IAAMuM,EAAa9G,EAAcS,OAAOqG,WAClC2zB,EAAMz6B,EAAcS,OAAOgL,SAAW,UAAY,aAClD/F,IAAW9M,MAAyB6hC,GAAMd,EAAcqE,SAAQplC,GAEhEqhC,KACAC,KAQN,OANIP,EAAcQ,YACdF,EAAeG,KAAKhvB,EAAOivB,QAAQC,QAEnCJ,EAAkBE,KAAKhvB,EAAOivB,QAAQC,QAGnClvB,EAAOmvB,OAAOC,QACjBC,IAAGA,EACHlkB,OAAQ7Q,EACRg1B,OAAQf,EAAcgB,qBACtBC,SACIC,QAASZ,EACTa,WAAYZ,GAEhB/oB,MAAKjY,EAAA,UACD6hC,MAAO,QACJ1mC,OAAA4J,EAAA,KAAA5J,CAAKslC,EAAcxoB,MAAO,SAAU,OAAQ,QAAS,QAAS,QAAS,UAAW,iBAEzFtX,QAAS,SAACzB,EAAM6lC,GAAY,OAAAloC,EAAKilC,cAAcl0B,EAAYm3B,EAAStE,EAAcsB,iBAClFC,YAAa,SAAC9iC,EAAM6lC,GAAY,OAAAloC,EAAKolC,iBAAiB/iC,EAAM6lC,EAAStE,EAAcgB,qBAAsBhB,EAAcyB,oBACxH3jC,EAAQihC,eAEd1gC,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrCsmC,EAAAxoC,UAAA2G,aAAA,WACI,OAAK7H,OAAOuiC,KAAK5gC,KAAK4N,gBAAgBijB,QAItC7wB,KAAKsQ,oBAAiB3L,EAEf9E,EAAAN,UAAM2G,aAAYpI,KAAAkC,OALdH,EAAAN,UAAM2G,aAAYpI,KAAAkC,OAQzB+nC,EAAAxoC,UAAAylC,cAAR,SAAsBl0B,EAAoBm3B,EAAyBj3B,GAC/D,IAAKi3B,EACD,MAAM,IAAI94B,EAAA,EAAoBA,EAAA,EAAwBm2B,8BAG1D,OAAO2C,EAAQn8B,QAAQyO,KAAK,mCAAqCzJ,WAAUA,IACtE9O,KAAK,SAAAiS,GAAO,OAAAA,EAAI1O,KAChBjD,MAAM,SAAAC,GAKH,MAJIyO,GACAA,EAAQzO,GAGNA,KAIVwlC,EAAAxoC,UAAA4lC,iBAAR,SACI/iC,EACA6lC,EACAtD,EACA3zB,GAJJ,IAAAjR,EAAAC,KAMI,IAAKA,KAAKsQ,eACN,MAAM,IAAInB,EAAA,EAAoBA,EAAA,EAAwBm2B,8BAG1D,IAAK2C,EACD,MAAM,IAAI94B,EAAA,EAAoBA,EAAA,EAAwBm2B,8BAG1D,IAAKljC,EAAK8lC,YAAc9lC,EAAK+lC,QACzB,MAAM,IAAI7jC,EAAA,EAAiBA,EAAA,EAAqBqa,gBAGpD,IAAM3a,EAAWhE,KAAKsQ,eAAe/K,GAErC,OAAO0iC,EAAQpkC,QAAQrF,IAAI4D,EAAK8lC,WAAWlmC,KAAK,SAAAwB,GAC5CzD,EAAKqW,YAAYG,SAAS,iBACtBqvB,aAAc,SACdjrB,SAAU3W,EACVsQ,OAAQqwB,EAAuB,kBAAoB,wBACnDl2B,UAAWrM,EAAK8lC,UAChBE,QAAShmC,EAAK+lC,QACdE,UAAWztB,KAAKC,UAAUrX,EAAQ8kC,MAAMC,iBAIxDR,EAvHA,CAAkDhB,GCqBpC,SAAAyB,EACV/mC,GAEA,IAAMi8B,EAAOj8B,GAAWA,EAAQi8B,KAC1Bj6B,EAAQpF,OAAAs/B,EAAA,EAAAt/B,GACRgoB,EAAgBhoB,OAAAo/B,EAAA,oBAAAp/B,EAAsBq/B,KAAIA,IAC1C+K,EAAapqC,OAAAorB,EAAA,iBAAAprB,GAEnB,OAAO,IAAIqqC,EACPjlC,EACA,IAAIklC,ECtBE,SACVllC,EACA4iB,EACAoiB,GAEA,IAAMniB,EAAW,IAAI/Y,EAAA,EACfkZ,EAAepoB,OAAAqoB,EAAA,gBAAAroB,GACfkqB,EAAwB,IAAIC,EAAA,EAC9B,IAAIlB,EAAA,EAAsBjB,GAC1B,IAAIiC,EAAA,EAAoB,IAAIF,EAAA,EAAoB/B,KAmEpD,OAhEAC,EAASqC,SAAS2a,EAAyBsF,iBAAkB,WACzD,WAAIC,EACAplC,EACA8kB,EACA,IAAIrB,EAAA,EAAoB,IAAIF,EAAA,EAAsBP,IAClD,IAAI8C,EAAA,EAAmB9C,GACvBgiB,KAIRniB,EAASqC,SAAS2a,EAAyBwF,wBAAyB,WAChE,WAAID,EACAplC,EACA8kB,EACA,IAAIrB,EAAA,EAAoB,IAAIF,EAAA,EAAsBP,IAClD,IAAI8C,EAAA,EAAmB9C,GACvBgiB,GACA,KAIRniB,EAASqC,SAAS2a,EAAyByF,WAAY,WACnD,WAAIC,EACAvlC,EACA8kB,EACA,IAAImC,EAAA,EAAuBjE,MAGnCH,EAASqC,SAAS2a,EAAyB2F,oBAAqB,WAC5D,WAAIC,EACAzlC,EACAglC,EACAlgB,EACAlqB,OAAAisB,EAAA,EAAAjsB,CACIoF,EACA,IAAI8mB,EAAA,EACA,IAAIrD,EAAA,EACA,IAAIF,EAAA,EAAsBP,SAO9CH,EAASqC,SAAS2a,EAAyB6F,iBAAkB,WACzD,WAAID,EACAzlC,EACAglC,EACAlgB,EACAlqB,OAAAisB,EAAA,EAAAjsB,CACIoF,EACA,IAAIknB,EAAA,MAKhBrE,EAASqC,SAAS2a,EAAyB8F,cAAe,WACtD,WAAIC,EACA5lC,EACA,IAAI8lB,EAAA,EAAmB9C,GACvBgiB,KAIDniB,EDrDCgjB,CAA6B7lC,EAAO4iB,EAAeoiB,GACnD,IAAI3gB,EAAA,EAA2B,IAAIC,EAAA,EAA2B1B,qDE7C1E3oB,EAAAD,QAAAkC,QAAA,8GCMc,SAAA4pC,EACVC,EACAC,EACAC,GAEA,YAFA,IAAAA,MAAA,MAEQrrC,OAAOuiC,KAAK4I,GACfG,OAAO,SAACC,EAAQ1qC,GAAQ,OAClB0qC,EAAMtP,OACLkP,EAAQtqC,GAAoBouB,IAAI,SAACuc,GACjC,MAAY,qBAAR3qC,EACOb,OAAAyrC,EAAA,EAAAzrC,CAAqCwrC,EAAMJ,GAG/CprC,OAAA0rC,EAAA,EAAA1rC,CACHwrC,EASpB,SAAmC5pC,GAC/B,OAAQA,GACJ,IAAK,gBACD,MAAO,qBAEX,IAAK,eACD,MAAO,oBAEX,IAAK,mBACD,MAAO,4BAEX,QACI,MAAO,IApBC+pC,CAA0B9qC,GAC1BuqC,EACAC,sGChBN,SAAAO,EACVC,GAEA,OAAO,SAAAC,GAAW,OAAA9rC,OAAA+rC,EAAA,KAAA/rC,CAAK8rC,GAASzkC,KAAKrH,OAAAgsC,EAAA,WAAAhsC,CAA0B,SAAAiW,GAC3D,GAAIA,aAAkBlU,OAASkU,EAAO9Q,mBAAmBpD,MACrD,MAAMkU,EAGV,GAQR,SAAoBjV,GAChB,IAAKA,GAA4B,iBAAXA,EAClB,OAAO,EAGX,OAAQ,OAAQ,UAAW,SAAU,cAAcirC,MAAM,SAAAprC,GACrD,OAAAG,EAAOG,eAAeN,KAdlBqrC,CAAWj2B,EAAO9Q,SAClB,MAAAjD,EAAA,YAAW+T,GAAQ9Q,QAAS0mC,EAAoBM,YAAYl2B,EAAO9Q,WAGvE,MAAM8Q,gECXdm2B,EAAA,WACI,SAAAA,EACY/I,GAAA1hC,KAAA0hC,kBA0ChB,OAvCI+I,EAAAlrC,UAAAqE,SAAA,WACI,OAAO5D,KAAK0hC,iBAGhB+I,EAAAlrC,UAAAi4B,eAAA,SAAexzB,GACX,GAAIA,EAAU,CACV,IAAME,EAASlE,KAAK0hC,gBAAgBtJ,SAASp0B,GAE7C,OAA6C,KAArCE,GAAUA,EAAOszB,gBAG7B,OAAOn5B,OAAAqsC,EAAA,KAAArsC,CAAK2B,KAAK0hC,gBAAgBtJ,UAAYZ,gBAAgB,KAGjEiT,EAAAlrC,UAAA2iC,iBAAA,SAAiBl+B,GACb,GAAIA,EAAU,CACV,IAAME,EAASlE,KAAK0hC,gBAAgBtJ,SAASp0B,GAE7C,OAA+C,KAAvCE,GAAUA,EAAOg+B,kBAG7B,OAAO7jC,OAAAqsC,EAAA,KAAArsC,CAAK2B,KAAK0hC,gBAAgBtJ,UAAY8J,kBAAkB,KAGnEuI,EAAAlrC,UAAAi1B,mBAAA,SAAmBxwB,GACf,IAAME,EAASF,EACXhE,KAAK0hC,gBAAgBrrB,OAAOrS,GAC5B3F,OAAAqsC,EAAA,KAAArsC,CAAKA,OAAAqsC,EAAA,OAAArsC,CAAO2B,KAAK0hC,gBAAgBrrB,QAAS,SAAAnS,GAAU,SAAGA,IAAUA,EAAOymC,mBAE5E,OAAOzmC,GAAUA,EAAOymC,iBAG5BF,EAAAlrC,UAAAuiC,qBAAA,SAAqB99B,GACjB,IAAME,EAASF,EACXhE,KAAK0hC,gBAAgBrrB,OAAOrS,GAC5B3F,OAAAqsC,EAAA,KAAArsC,CAAKA,OAAAqsC,EAAA,OAAArsC,CAAO2B,KAAK0hC,gBAAgBrrB,QAAS,SAAAnS,GAAU,SAAGA,IAAUA,EAAO0mC,qBAE5E,OAAO1mC,GAAUA,EAAO0mC,mBA1CXH,EAAsBlqC,EAAA,YAD1CsqC,EAAA,GACoBJ,GAArB,2DCGAK,EAAA,WACI,SAAAA,EACY5b,EACAF,EACAC,EACAE,EACAG,EACAC,EACAG,GANA1vB,KAAAkvB,YACAlvB,KAAAgvB,kBACAhvB,KAAAivB,QACAjvB,KAAAmvB,gBACAnvB,KAAAsvB,WACAtvB,KAAAuvB,YACAvvB,KAAA0vB,oBA0ChB,OAvCIob,EAAAvrC,UAAAoH,YAAA,WACY,IAAAvE,EAAApC,KAAAkvB,UAAA9sB,KACFsH,EAAiB1J,KAAKgvB,gBAAgBrlB,oBACtC9B,EAAO7H,KAAKivB,MAAMvC,UAClB9iB,EAAW5J,KAAKuvB,UAAU1lB,cAC1BO,EAAepK,KAAKmvB,cAAc9kB,sBAClC5C,EAAUzH,KAAKsvB,SAASgC,iBACxB3pB,EAAmB3H,KAAK0vB,kBAAkB6B,0BAEhD,GAAKnvB,GAASyF,GAAS+B,EAIvB,OAAArJ,EAAA,YACO6B,GACHsH,eAAcA,EACd7B,KAAIA,EACJ+B,SAAQA,EACRQ,aAAYA,EACZ3C,QAAOA,EACPE,iBAAgBA,KAIxBmjC,EAAAvrC,UAAA20B,aAAA,WACI,OAAOl0B,KAAKkvB,UAAU7Y,OAAO00B,WAGjCD,EAAAvrC,UAAA23B,UAAA,WACI,OAA6C,IAAtCl3B,KAAKkvB,UAAUkJ,SAASlB,WAGnC4T,EAAAvrC,UAAA60B,eAAA,WACI,OAAOp0B,KAAKkvB,UAAU7Y,OAAO20B,aAGjCF,EAAAvrC,UAAA63B,WAAA,WACI,OAA8C,IAAvCp3B,KAAKkvB,UAAUkJ,SAAShB,YAhDlB0T,EAAgBvqC,EAAA,YADpC0qC,EAAA,GACoBH,GAArB,+ICAM/K,GACF1pB,UACA+hB,aAGU,SAAA8S,EACVvnC,EACA2Q,GAQA,YATA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAA8sC,EAAA,gBAAA9sC,EACZ+D,KAAMgpC,EACN/0B,OAAQg1B,EACRjT,SAAUkT,GAGPC,CAAQ5nC,EAAO2Q,GAG1B,SAAA82B,EACIhpC,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAKurC,EAAA,EAAmBC,sBACxB,KAAKD,EAAA,EAAmBE,wBACxB,KAAKC,EAAA,EAAyBC,8BAC9B,KAAKC,EAAA,EAAiBC,qBACtB,KAAKD,EAAA,EAAiBE,sBACtB,KAAKC,EAAA,EAAsBC,4BAC3B,KAAKD,EAAA,EAAsBE,2BAC3B,KAAKF,EAAA,EAAsBG,2BAC3B,KAAKH,EAAA,EAAsBI,8BAC3B,KAAKC,EAAA,EAA0BC,8BAC/B,KAAKD,EAAA,EAA0BE,+BAC3B,OAAOj4B,EAAO9Q,QACRnF,OAAAmuC,EAAA,KAAAnuC,CAAIkC,EAAA,YAAM6B,EAASkS,EAAO9Q,UAAY,iBAAkB,OAAQ,eAAgB,WAAY,UAAW,oBACvGpB,EAEV,KAAKqqC,EAAA,EAAgBC,qBACjB,OAAOp4B,EAAO9Q,SAAWpB,EACpB7B,EAAA,YAAM6B,GAAMwE,QAAS0N,EAAO9Q,QAAQsG,MAAMlD,UACzCxE,EAEV,QACI,OAAOA,GAIf,SAAAipC,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,MAA8B0pB,EAAc1pB,QAGpC/B,EAAOrU,MACf,KAAKurC,EAAA,EAAmBmB,sBACxB,KAAKnB,EAAA,EAAmBC,sBACpB,OAAAlrC,EAAA,YACO8V,GACH00B,eAAWpmC,IAGnB,KAAK6mC,EAAA,EAAmBoB,mBACpB,OAAArsC,EAAA,YACO8V,GACH00B,UAAWz2B,EAAO9Q,UAG1B,KAAKgoC,EAAA,EAAmBqB,wBACxB,KAAKrB,EAAA,EAAmBE,wBACpB,OAAAnrC,EAAA,YACO8V,GACH20B,iBAAarmC,IAGrB,KAAK6mC,EAAA,EAAmBsB,qBACpB,OAAAvsC,EAAA,YACO8V,GACH20B,YAAa12B,EAAO9Q,UAG5B,QACI,OAAO6S,GAIf,SAAAi1B,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,MAAkC2H,EAAc3H,UAGxC9jB,EAAOrU,MACf,KAAKurC,EAAA,EAAmBmB,sBACpB,OAAApsC,EAAA,YACO63B,GACHlB,WAAW,IAGnB,KAAKsU,EAAA,EAAmBoB,mBACxB,KAAKpB,EAAA,EAAmBC,sBACpB,OAAAlrC,EAAA,YACO63B,GACHlB,WAAW,IAGnB,KAAKsU,EAAA,EAAmBqB,wBACpB,OAAAtsC,EAAA,YACO63B,GACHhB,YAAY,IAGpB,KAAKoU,EAAA,EAAmBsB,qBACxB,KAAKtB,EAAA,EAAmBE,wBACpB,OAAAnrC,EAAA,YACO63B,GACHhB,YAAY,IAGpB,QACI,OAAOgB,+EC1HD,SAAA2U,EACVlD,EACAJ,GAEA,IAAMuD,EAAoB,IAAIC,EAAA,EAAkBxD,GAEhD,OACIlkC,GAAIskC,EAAKtkC,GACT2nC,SAAU,GACVhvC,KAAM2rC,EAAK3rC,KACXic,OAAQ0vB,EAAK1vB,OACbgzB,oBAAqBtD,EAAK1vB,OAC1BizB,SAAU,EACVC,cAAeL,EAAkBM,UAAUzD,EAAK1vB,QAChDozB,2BAA4BP,EAAkBM,UAAUzD,EAAK1vB,QAC7DqzB,gBAAiB,EACjBC,SAAU,EACVC,OAAQ7D,EAAK6D,OACbC,UAAW9D,EAAK8D,UAChB1tC,KAAM,4BACN2tC,cACAC,UAAW,2DCpBnB,WACI,SAAAC,EACY9e,GAAAhvB,KAAAgvB,kBA8BhB,OA3BI8e,EAAAvuC,UAAAoK,kBAAA,WACI,OAAO3J,KAAKgvB,gBAAgB5sB,MAGhC0rC,EAAAvuC,UAAA60B,eAAA,WACI,OAAOp0B,KAAKgvB,gBAAgB3Y,OAAO20B,aAGvC8C,EAAAvuC,UAAA+zB,wBAAA,WACI,OAAOtzB,KAAKgvB,gBAAgB3Y,OAAO03B,sBAGvCD,EAAAvuC,UAAA20B,aAAA,WACI,OAAOl0B,KAAKgvB,gBAAgB3Y,OAAO00B,WAGvC+C,EAAAvuC,UAAA63B,WAAA,WACI,QAASp3B,KAAKgvB,gBAAgBoJ,SAAShB,YAG3C0W,EAAAvuC,UAAA42B,oBAAA,WACI,QAASn2B,KAAKgvB,gBAAgBoJ,SAASjC,qBAG3C2X,EAAAvuC,UAAA23B,UAAA,WACI,QAASl3B,KAAKgvB,gBAAgBoJ,SAASlB,WA9B1B4W,EAAsB5qC,EAAA,YAD1C0uB,EAAA,GACoBkc,GAArB,8BCAA,WACI,SAAAE,EACYrrC,GAAA3C,KAAA2C,UA0BhB,OAvBIqrC,EAAAzuC,UAAA2wB,UAAA,WACI,OAAOlwB,KAAK2C,QAAQP,MAGxB4rC,EAAAzuC,UAAAmL,eAAA,WACI,OAAO1K,KAAK2C,QAAQP,MAAQpC,KAAK2C,QAAQP,KAAKoI,aAGlDwjC,EAAAzuC,UAAAqL,iBAAA,WACI,OAAO5K,KAAK2C,QAAQP,MAAQpC,KAAK2C,QAAQP,KAAK+tB,SAGlD6d,EAAAzuC,UAAA0uC,kBAAA,WACI,OAAOjuC,KAAK2C,QAAQoB,MAAQ/D,KAAK2C,QAAQoB,KAAKw5B,gBAGlDyQ,EAAAzuC,UAAA20B,aAAA,WACI,OAAOl0B,KAAK2C,QAAQ0T,OAAO00B,WAG/BiD,EAAAzuC,UAAA23B,UAAA,WACI,QAASl3B,KAAK2C,QAAQy1B,SAASlB,WA1BlB8W,EAAc9qC,EAAA,YADlC0uB,EAAA,GACoBoc,GAArB,gDCGA,WACI,SAAAE,EACYvrC,GAAA3C,KAAA2C,UAyFhB,OAtFIurC,EAAA3uC,UAAAoyB,yBAAA,SAAyBtC,EAA2B1f,GAApD,IAAA5P,EAAAC,UAAyB,IAAAqvB,UACrB,IAAM8e,EAAkB9vC,OAAA4J,EAAA,KAAA5J,CAAKgxB,GAAa/Y,KAAM3G,IAGhD,OAFe3P,KAAK2C,QAAQP,KAAOpC,KAAK2C,QAAQP,KAAKoI,YAAY4jC,WAAWC,0BAE9D/gB,IAAI,SAACghB,GAAe,OAAAvuC,EAAKwuC,cAAcD,EAAOjf,EAAW8e,MAG3ED,EAAA3uC,UAAAmyB,wBAAA,SAAwBrC,EAA2B1f,GAAnD,IAAA5P,EAAAC,UAAwB,IAAAqvB,UACpB,IAAM8e,EAAkB9vC,OAAA4J,EAAA,KAAA5J,CAAKgxB,GAAa/Y,KAAM3G,IAGhD,OAFe3P,KAAK2C,QAAQP,KAAOpC,KAAK2C,QAAQP,KAAKoI,YAAY4jC,WAAWI,yBAE9DlhB,IAAI,SAACghB,GAAe,OAAAvuC,EAAKwuC,cAAcD,EAAOjf,EAAW8e,MAGnED,EAAA3uC,UAAAgvC,cAAR,SAAsBD,EAAkBjf,EAAsB8e,GAC1D,MAAmB,gBAAfG,EAAMpwC,KACC8B,KAAKyuC,gBAAgBH,EAAOjf,EAAW8e,GAG/B,oBAAfG,EAAMpwC,KACC8B,KAAK0uC,iBAAiBJ,EAAOH,GAGrB,eAAfG,EAAMpwC,KACC8B,KAAK2uC,kBAAkBL,EAAOH,GAGlCG,GAGHJ,EAAA3uC,UAAAkvC,gBAAR,SAAwBH,EAAkBjf,EAA2BjN,GACjE,QADsC,IAAAiN,WACjCA,EAAUwB,OACX,OAAOyd,EAGH,IAAA1rC,GAAAwf,OAAA9L,YAAA,IAAA1T,EAAA,GAAAA,EACFgsC,EAAQvf,EAAU/B,IAAI,SAAC1qB,GAAwB,OACjDhE,MAD2BgE,EAAA0T,KAE3B2D,MAFiCrX,EAAA1E,QAKrC,OAAAgF,EAAA,YACOorC,GACH7sC,SAAWmtC,MAAKA,GAChBC,QAASv4B,EACTrW,KAAM,QACN6uC,UAAW,WACXC,SAAU,YAIVb,EAAA3uC,UAAAmvC,iBAAR,SAAyBJ,EAAkBlsB,GAC/B,IAAAxf,GAAAwf,OAAA4sB,oBAAA,IAAApsC,OAER,IAAKosC,EAAane,OACd,OAAA3tB,EAAA,YACOorC,GACHW,UAAU,IAIlB,IAAML,EAAQI,EAAa1hB,IAAI,SAAC1qB,GAAwB,OACpDhE,MAD8BgE,EAAA0T,KAE9B2D,MAFoCrX,EAAA1E,QAKxC,OAAAgF,EAAA,YACOorC,GACHpwC,KAAM,sBACNuD,SAAWmtC,MAAKA,GAChBK,UAAU,EACVhvC,KAAM,QACN6uC,UAAW,WACXC,SAAU,YAIVb,EAAA3uC,UAAAovC,kBAAR,SAA0BL,EAAkBlsB,GAChC,IAAAxf,GAAAwf,OAAA8sB,sBAAA,IAAAtsC,OAER,YAAuB+B,IAAnBuqC,EACOZ,EAGXprC,EAAA,YAAYorC,GAAOW,SAAU3mC,QAAQ4mC,MAzFxBhB,EAAYhrC,EAAA,YADhC0uB,EAAA,GACoBsc,GAArB,KCHA,WACI,SAAAiB,EACY/f,GAAApvB,KAAAovB,aAchB,OAXI+f,EAAA5vC,UAAA4xB,aAAA,WACI,OAAOnxB,KAAKovB,WAAWhtB,MAG3B+sC,EAAA5vC,UAAA20B,aAAA,WACI,OAAOl0B,KAAKovB,WAAW/Y,OAAO00B,WAGlCoE,EAAA5vC,UAAA23B,UAAA,WACI,QAASl3B,KAAKovB,WAAWgJ,SAASlB,WAdrBiY,EAAejsC,EAAA,YADnC0uB,EAAA,GACoBud,GAArB,8BCKA,WACI,SAAAC,EACYlgB,EACAU,GADA5vB,KAAAkvB,YACAlvB,KAAA4vB,SA2FhB,OAxFIwf,EAAA7vC,UAAA6F,aAAA,WACI,IAAMiqC,EAAkBrvC,KAAKsvC,sBAE7B,GAAID,GAAmBA,EAAgB9pC,GACnC,OACID,WAAY+pC,EAAgB9pC,GAC5BlB,UAAWgrC,EAAgB7pC,SAInC,IAAM3B,EAAU7D,KAAKuvC,qBAAuBvvC,KAAKwvC,qBAEjD,OAAI3rC,GAAWA,EAAQyB,YAEfA,WAAYzB,EAAQyB,WACpBjB,UAAWR,EAAQQ,gBAH3B,GAQJ+qC,EAAA7vC,UAAAkV,iBAAA,WACI,IAAM46B,EAAkBrvC,KAAKsvC,sBAE7B,GAAID,GAAmBA,EAAgB3iC,OACnC,OAAO2iC,EAAgB3iC,OAAO+iC,QAAQ,kBAAmB,IAG7D,IAAM5rC,EAAU7D,KAAKuvC,qBAAuBvvC,KAAKwvC,qBAEjD,OAAI3rC,EACOA,EAAQ6rC,OAAOC,UAD1B,GAKJP,EAAA7vC,UAAAgM,gBAAA,WACI,IAAMxH,EAAO/D,KAAK4vB,OAAOzkB,eAEzB,OAAOpH,GAAQA,EAAK+I,OAGxBsiC,EAAA7vC,UAAAsW,sBAAA,WACI,IAAMhS,EAAU7D,KAAKsvC,sBAErB,OAAOzrC,GAAWA,EAAQ+R,aAG9Bw5B,EAAA7vC,UAAA0E,sBAAA,SAAsBH,QAAA,IAAAA,OAAA,GAClB,IAAM4C,EAAW1G,KAAKkvB,UAAUvoB,cAEhC,IAAKD,EACD,OAAO,EAGX,IAAMa,EAAab,EAASa,YAAc,EACpCqoC,EAAclpC,EAASkD,SAASgmC,aAAe,EAErD,OAAQ9rC,EAAiByD,EAAaqoC,EAAcroC,GAAc,GAGtE6nC,EAAA7vC,UAAAiyB,uBAAA,SAAuBxnB,GACnB,SAAIA,IAAiBA,EAAcuF,SAI5BvP,KAAKyU,qBAAuBC,EAAA,GAAe1U,KAAKyU,qBAAuBC,EAAA,IAG1E06B,EAAA7vC,UAAA+vC,oBAAR,WACI,IAAMvrC,EAAO/D,KAAK4vB,OAAOzkB,eAEzB,OAAOpH,GAAQA,EAAKF,SAGhBurC,EAAA7vC,UAAAiwC,mBAAR,WACI,IAAM1lC,EAAQ9J,KAAK4vB,OAAO7lB,WAE1B,OAAO1L,OAAA4J,EAAA,KAAA5J,CAAKyL,GAASA,EAAM+lC,SAAU,SAACjtC,OAAE0C,EAAA1C,EAAA0C,WACpC,MAAe,oBAAfA,GAAmD,gBAAfA,KAIpC8pC,EAAA7vC,UAAAgwC,kBAAR,WACI,IAAM7oC,EAAW1G,KAAKkvB,UAAUvoB,cAEhC,OAAOtI,OAAA4J,EAAA,KAAA5J,CAAKqI,GAAYA,EAASmpC,SAAU,SAACjtC,GACxC,OAD0CA,EAAAktC,eACzB5iC,EAAA,KA3FRkiC,EAAelsC,EAAA,YADnC0uB,EAAA,GACoBwd,GAArB,KCFA,WACI,SAAAW,EACYjgB,GAAA9vB,KAAA8vB,kBAwChB,OArCIigB,EAAAxwC,UAAA6xB,kBAAA,WACI,OAAOpxB,KAAK8vB,gBAAgB1tB,MAGhC2tC,EAAAxwC,UAAA0L,sBAAA,WACI,OAAOjL,KAAK8vB,gBAAgB/rB,MAGhCgsC,EAAAxwC,UAAA6E,iBAAA,SAAiBJ,EAAkBK,GAC/B,OAAOA,EACHhG,OAAA4J,EAAA,KAAA5J,CAAK2B,KAAK8vB,gBAAgB1tB,MAAQmD,GAAIvB,EAAUwB,QAASnB,IACzDhG,OAAA4J,EAAA,KAAA5J,CAAK2B,KAAK8vB,gBAAgB1tB,MAAQmD,GAAIvB,KAG9C+rC,EAAAxwC,UAAA20B,aAAA,WACI,OAAOl0B,KAAK8vB,gBAAgBzZ,QAAUrW,KAAK8vB,gBAAgBzZ,OAAO00B,WAGtEgF,EAAAxwC,UAAAg1B,mBAAA,SAAmBvwB,GACf,IAAIA,GAAYhE,KAAK8vB,gBAAgBzZ,OAAO25B,eAAiBhsC,EAI7D,OAAOhE,KAAK8vB,gBAAgBzZ,OAAO45B,iBAGvCF,EAAAxwC,UAAA23B,UAAA,WACI,QAASl3B,KAAK8vB,gBAAgBsI,SAASlB,WAG3C6Y,EAAAxwC,UAAAg4B,gBAAA,SAAgBvzB,GACZ,QAAIA,GAAYhE,KAAK8vB,gBAAgBsI,SAAS4X,eAAiBhsC,MAItDhE,KAAK8vB,gBAAgBsI,SAASb,iBAxC1BwY,EAAqB7sC,EAAA,YADzC0uB,EAAA,GACoBme,GAArB,aCJA,WACI,SAAAG,EACYle,QAAA,IAAAA,MAAAme,EAAA,GAAAnwC,KAAAgyB,qBAkEhB,OA/DIke,EAAA3wC,UAAAi1B,mBAAA,SAAmBxwB,GACf,IAAIA,GAAYhE,KAAKgyB,mBAAmB3b,OAAO+5B,qBAAuBpsC,EAItE,OAAOhE,KAAKgyB,mBAAmB3b,OAAOs0B,iBAG1CuF,EAAA3wC,UAAA80B,gBAAA,SAAgBrwB,GACZ,IAAIA,GAAYhE,KAAKgyB,mBAAmB3b,OAAOg6B,kBAAoBrsC,EAInE,OAAOhE,KAAKgyB,mBAAmB3b,OAAOi6B,cAG1CJ,EAAA3wC,UAAA+0B,iBAAA,SAAiBtwB,GACb,IAAIA,GAAYhE,KAAKgyB,mBAAmB3b,OAAOk6B,mBAAqBvsC,EAIpE,OAAOhE,KAAKgyB,mBAAmB3b,OAAOm6B,eAG1CN,EAAA3wC,UAAAkxC,0BAAA,SAA0BzsC,GACtB,IAAIA,GAAYhE,KAAKgyB,mBAAmB3b,OAAOq6B,4BAA8B1sC,EAI7E,OAAOhE,KAAKgyB,mBAAmB3b,OAAOs6B,wBAG1CT,EAAA3wC,UAAAi4B,eAAA,SAAexzB,GACX,QAAIA,GAAYhE,KAAKgyB,mBAAmBoG,SAASgY,qBAAuBpsC,MAI/DhE,KAAKgyB,mBAAmBoG,SAASZ,gBAG9C0Y,EAAA3wC,UAAA83B,YAAA,SAAYrzB,GACR,QAAIA,GAAYhE,KAAKgyB,mBAAmBoG,SAASiY,kBAAoBrsC,MAI5DhE,KAAKgyB,mBAAmBoG,SAASf,aAG9C6Y,EAAA3wC,UAAA+3B,aAAA,SAAatzB,GACT,QAAIA,GAAYhE,KAAKgyB,mBAAmBoG,SAASmY,mBAAqBvsC,MAI7DhE,KAAKgyB,mBAAmBoG,SAASd,cAG9C4Y,EAAA3wC,UAAAy4B,oBAAA,SAAoBh0B,GAChB,QAAIA,GAAYhE,KAAKgyB,mBAAmBoG,SAASsY,4BAA8B1sC,MAItEhE,KAAKgyB,mBAAmBoG,SAASJ,qBAlE7BkY,EAAuBhtC,EAAA,YAD3C0uB,EAAA,GACoBse,GAArB,KCFA,WACI,SAAAU,EACYjhB,GAAA3vB,KAAA2vB,eAkChB,OA/BIihB,EAAArxC,UAAAkyB,eAAA,WACI,OAAOzxB,KAAK2vB,aAAavtB,MAG7BwuC,EAAArxC,UAAAwL,mBAAA,WACI,OAAO/K,KAAK2vB,aAAa5rB,MAG7B6sC,EAAArxC,UAAA20B,aAAA,WACI,OAAOl0B,KAAK2vB,aAAatZ,QAAUrW,KAAK2vB,aAAatZ,OAAO00B,WAGhE6F,EAAArxC,UAAAs1B,eAAA,SAAetsB,GACX,GAAKvI,KAAK2vB,aAAatZ,UAAW9N,GAAgBvI,KAAK2vB,aAAatZ,OAAOw6B,mBAAqBtoC,GAIhG,OAAOvI,KAAK2vB,aAAatZ,OAAOy6B,aAGpCF,EAAArxC,UAAA23B,UAAA,WACI,SAAUl3B,KAAK2vB,aAAayI,WAAYp4B,KAAK2vB,aAAayI,SAASlB,YAGvE0Z,EAAArxC,UAAAq4B,WAAA,SAAWrvB,GACP,SAAKvI,KAAK2vB,aAAayI,UAAa7vB,GAAgBvI,KAAK2vB,aAAayI,SAAS2Y,qBAAuBxoC,MAI7FvI,KAAK2vB,aAAayI,SAASR,YAE5CgZ,EApCA,KCEA,WACI,SAAAI,EACYC,GAAAjxC,KAAAixC,kBAQhB,OALID,EAAAzxC,UAAAoH,YAAA,SACI3C,GAEA,OAAOhE,KAAKixC,gBAAgB7uC,KAAK4B,IARpBgtC,EAAsB9tC,EAAA,YAD1C0uB,EAAA,GACoBof,GAArB,+CCgBc,SAAAE,EAA0CvtC,EAA2BlC,QAAA,IAAAA,UAC/E,IAAMiI,EAAiB,IAAIynC,EAAuBxtC,EAAM+F,gBAClD7B,EAAO,IAAIupC,EAAA,EAAaztC,EAAMkE,MAC9B85B,EAAiB,IAAI0P,EAAA,EAAuB1tC,EAAMg+B,gBAClDl3B,EAAS,IAAI6mC,EAAe3tC,EAAM8G,QAClC4kB,EAAY,IAAIkiB,EAAgB5tC,EAAM0rB,WACtC5nB,EAAU,IAAI+pC,EAAA,EAAe7tC,EAAM8D,SACnCmC,EAAW,IAAI6nC,EAAA,EAAiB9tC,EAAMiG,UACtCmoB,EAAqB,IAAI2f,EAAA,EAAyB/tC,EAAMouB,oBACxDtC,EAAO,IAAIkiB,EAAahuC,EAAM8G,QAC9B9C,EAAmB,IAAIiqC,EAAA,EAAwBjuC,EAAMgE,kBACrDmD,EAAc,IAAI+mC,EAAmBluC,EAAMmH,aAC3C3G,EAAiB,IAAI2tC,EAAsBnuC,EAAMQ,gBACjD8tB,EAAoB,IAAI8f,EAAwBpuC,EAAMsuB,mBACtD/nB,EAAkB,IAAI8nC,EAAA,EAAwBruC,EAAMyG,cACpD6E,EAAiB,IAAIgjC,EAAuBtuC,EAAMsL,gBAClDghB,EAAoB,IAAIiiB,EAAA,EAAwBvuC,EAAMssB,mBACtDkC,EAAqB,IAAIggB,EAAA,EAAyBxuC,EAAMwuB,oBAGxD/nB,EAAe,IAAIgoC,EAAA,EAAoBzuC,EAAMyG,aAAcvC,GAC3DnB,EAAW,IAAI2rC,EAAA,EAAiB1uC,EAAM+C,SAAUgD,EAAgB7B,EAAMuC,EAAc3C,EAASmC,EAAUjC,GACvGmC,EAAQ,IAAIwoC,EAAA,EAAc3uC,EAAMmG,MAAOJ,EAAgBjC,GAGvDsnB,GACFrlB,eAAcA,EACd7B,KAAIA,EACJnB,SAAQA,EACRi7B,eAAcA,EACdl3B,OAAMA,EACNL,aAAYA,EACZilB,UAASA,EACT5nB,QAAOA,EACPmC,SAAQA,EACRmoB,mBAAkBA,EAClBtC,KAAIA,EACJ9nB,iBAAgBA,EAChBmD,YAAWA,EACXhB,MAAKA,EACLjG,QAjBY,IAAI0uC,EAAgB7rC,EAAUoD,GAkB1C3F,eAAcA,EACd8tB,kBAAiBA,EACjBhjB,eAAcA,EACd/E,gBAAeA,EACf+lB,kBAAiBA,EACjBkC,mBAAkBA,GAGtB,OAAO1wB,EAAQ+7B,mBAAqBn/B,OAAAm0C,EAAA,EAAAn0C,CAAoB0wB,GAAaA,2HCjEnEgR,GACF1pB,UACA+hB,aAGEqa,KACAC,KAEQ,SAAAC,EACVhvC,EACA2Q,WAEA,YAHA,IAAA3Q,MAAAo8B,GAGKzrB,EAAOvQ,MAASuQ,EAAOvQ,KAAKC,SAIjB3F,OAAA8sC,EAAA,gBAAA9sC,EACZgY,OAAQhY,OAAA8sC,EAAA,gBAAA9sC,EAAeuE,KACnBA,EAAC0R,EAAOvQ,KAAKC,UAAWqnC,MAE5BjT,SAAU/5B,OAAA8sC,EAAA,gBAAA9sC,EAAesS,KACrBA,EAAC2D,EAAOvQ,KAAKC,UAAWsnC,OAIzBC,CAAQ5nC,EAAO2Q,GAZX3Q,EAef,SAAA0nC,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,MAAAo8B,GAGQn+B,EAAOrU,MACf,KAAK2yC,EAAA,EAAyB7P,0BAC9B,KAAK6P,EAAA,EAAyB3P,0BAC1B,OAAA1iC,EAAA,YACO8V,GACHs0B,qBAAiBhmC,IAGzB,KAAKiuC,EAAA,EAAyB1P,uBAC1B,OAAA3iC,EAAA,YACO8V,GACHs0B,gBAAiBr2B,EAAO9Q,UAGhC,KAAKovC,EAAA,EAAyBzP,4BAC9B,KAAKyP,EAAA,EAAyBxP,4BAC1B,OAAA7iC,EAAA,YACO8V,GACHu0B,uBAAmBjmC,IAG3B,KAAKiuC,EAAA,EAAyBvP,yBAC1B,OAAA9iC,EAAA,YACO8V,GACHu0B,kBAAmBt2B,EAAO9Q,UAGlC,QACI,OAAO6S,GAIf,SAAAi1B,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,MAAAsa,GAGQp+B,EAAOrU,MACf,KAAK2yC,EAAA,EAAyB7P,0BAC1B,OAAAxiC,EAAA,YACO63B,GACHZ,gBAAgB,IAGxB,KAAKob,EAAA,EAAyB1P,uBAC9B,KAAK0P,EAAA,EAAyB3P,0BAC1B,OAAA1iC,EAAA,YACO63B,GACHZ,gBAAgB,IAGxB,KAAKob,EAAA,EAAyBzP,4BAC1B,OAAA5iC,EAAA,YACO63B,GACH8J,kBAAkB,IAG1B,KAAK0Q,EAAA,EAAyBvP,yBAC9B,KAAKuP,EAAA,EAAyBxP,4BAC1B,OAAA7iC,EAAA,YACO63B,GACH8J,kBAAkB,IAG1B,QACI,OAAO9J,+EChGD,SAAAya,EACVhJ,EACA5pC,EACAwpC,EACAC,QAAA,IAAAA,MAAA,MAEA,IAAMsD,EAAoB,IAAIC,EAAA,EAAkBxD,GAEhD,OACIlkC,GAAKskC,EAAKH,GACVwD,SAAUrD,EAAKqD,SACf/yB,OAAQ0vB,EAAKiJ,kBACb3F,oBAAqBtD,EAAKkJ,kBAC1B3F,SAAUvD,EAAKmJ,eACf3F,cAAeL,EAAkBM,UAAUzD,EAAKiJ,mBAChDvF,2BAA4BP,EAAkBM,UAAUzD,EAAKkJ,mBAC7DvF,gBAAiBR,EAAkBM,UAAUzD,EAAKmJ,gBAClDC,iBAAmBpJ,EAAqBqJ,gBACxCh1C,KAAM2rC,EAAK3rC,KACXuvC,SAAU5D,EAAK4D,SACfvf,MAAO2b,EAAK3b,MACZilB,cAAetJ,EAAKsJ,cACpBtF,UAAWhE,EAAKgE,UAChBuF,UAAWvJ,EAAKuJ,UAChBxF,YAAa/D,EAAKpoC,aAAe6rB,IAAI,SAAA+lB,GAAU,OAC3Cn1C,KAAMm1C,EAAOn1C,KACbU,MAAOy0C,EAAOz0C,SAElB00C,iBAAkBzJ,EAAKyJ,iBACvBrzC,KAAIA,oFCxBE,SAAAszC,EAA4B7sC,GACtC,IAAM+iC,EAAgB/iC,EAASmB,KAAKkS,SAAS0vB,cACvCuD,EAAoB,IAAIwG,EAAA,EAAkB/J,GAEhD,OACIlkC,GAAImB,EAASmB,KAAKtC,GAClBqpC,MAAOvwC,OAAAo1C,EAAA,EAAAp1C,CAAuBqI,EAASmB,KAAK6rC,UAAWjK,GACvD1vB,SAAUrT,EAASmB,KAAKkS,SAASzD,KACjCq9B,QACIC,iBAAkBv1C,OAAA4J,EAAA,OAAA5J,CAAOqI,EAASmB,KAAKJ,QAAS,SAACosC,EAAKF,GAClD,OAAOE,EAAMF,EAAOC,kBACrB,GACHnsC,QAASf,EAASmB,KAAKJ,QAAQ6lB,IAAIwmB,EAAA,IAEvC1G,UACIjzB,OAAQzT,EAASmB,KAAKmrC,eACtB3F,cAAeL,EAAkBM,UAAU5mC,EAASmB,KAAKmrC,iBAE7De,sBCxBM,SAAqCC,GAC/C,IAAMC,KAaN,OAXCD,OAAkBE,QAAQ,SAAAC,IACtBA,EAAUC,aAAeF,QAAQ,SAAAG,GAC9BJ,EAAc7P,MACVkQ,gBACAC,aAAc,KACdz0C,QAAS,GACT00C,YAAaH,EAAOI,WAKzBR,EDUoBS,CAA2BhuC,EAASstC,YAC3DW,iBACIC,sBAAuBv2C,OAAA4J,EAAA,OAAA5J,CAAOqI,EAASiB,iBAAkB,SAACksC,EAAKgB,GAC3D,OAAOhB,EAAMgB,EAAYC,MAC1B,GACHC,wBAAyB12C,OAAA4J,EAAA,MAAA5J,CAAMqI,EAASiB,iBAAiB2lB,IAAI0nB,EAAA,GAA+B,SAEhGC,UACI96B,OAAQzT,EAASwuC,kBACjB7H,cAAeL,EAAkBM,UAAU5mC,EAASwuC,mBACpDC,qBAAsBzuC,EAAS0uC,2BAC/BC,4BAA6BrI,EAAkBM,UAAU5mC,EAAS0uC,4BAClEnG,SAAU5wC,OAAA4J,EAAA,KAAA5J,CAAKqI,EAASmB,KAAK6rC,UAAU4B,cAAe,SAAAC,GAAY,OAAAA,EAASC,sBAE/En7B,UACIF,OAAQzT,EAAS2T,SACjBgzB,cAAeL,EAAkBM,UAAU5mC,EAAS2T,WAExDu1B,aACIz1B,OAAQzT,EAASkD,SAAWlD,EAASkD,SAASgmC,YAAc,GAEhE6F,aACIt7B,OAAQzT,EAASgvC,SACjBrI,cAAeL,EAAkBM,UAAU5mC,EAASgvC,WAExDC,MAAOjvC,EAASivC,MAChBD,UACIv7B,OAAQzT,EAASgvC,SACjBrI,cAAeL,EAAkBM,UAAU5mC,EAASgvC,WAExDE,UACIz7B,OAAQzT,EAASmvC,kBACjBxI,cAAeL,EAAkBM,UAAU5mC,EAASmvC,oBAExDtuC,YACI4S,OAAQzT,EAASa,WACjB8lC,cAAeL,EAAkBM,UAAU5mC,EAASa,4EEhElD,SAAAuuC,EAAyBz2C,EAAaE,GAOhD,OANIlB,OAAOy3C,eACPz3C,OAAOy3C,eAAez2C,EAAQE,GAE9BF,EAAO02C,UAAYx2C,EAGhBF,gECPG,SAAA22C,EAAoB92C,GAC9B,OAAkC,KAA3B,GAAGA,GAAM+2C,QAAQ,OAAyC,KAA1B,GAAG/2C,GAAM+2C,QAAQ,oDCD5Dv4C,EAAAD,QAAAkC,QAAA,oDCIAu2C,EAAA,SAAAr2C,GACI,SAAAq2C,EAAYj0C,GAAZ,IAAAlC,EACIF,EAAA/B,KAAAkC,KAAMiC,GAAYnC,QAAS,yEAAwEE,YAEnGD,EAAKE,KAAO,2BAEpB,OANuDM,EAAA,UAAA21C,EAAAr2C,GAMvDq2C,EANA,OAAuD,mDCFvDC,EAAA,oBAAAA,IACYn2C,KAAAo2C,QAAU,EACVp2C,KAAAq2C,SAyEZ,OAvEIF,EAAA52C,UAAA+2C,OAAA,eAAO,IAAAC,KAAApc,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAoc,EAAApc,GAAAC,UAAAD,GACG,IAAAv3B,EAAA5C,KAAAw2C,YAAAnc,MAAAr6B,KAAAu2C,GAAEnW,EAAAx9B,EAAAw9B,MAAO9S,EAAA1qB,EAAA0qB,IAAKmpB,EAAA7zC,EAAA6zC,WAEpB,OAAInpB,GAAOA,EAAIopB,UACXppB,EAAIqpB,YAEGrpB,EAAIopB,UAGR12C,KAAK42C,aAAaH,EAAYF,EAAKM,MAAMzW,KAGpD+V,EAAA52C,UAAAu3C,aAAA,eAAa,IAAAP,KAAApc,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAoc,EAAApc,GAAAC,UAAAD,GACD,IAAA7M,EAAAttB,KAAAw2C,YAAAnc,MAAAr6B,KAAAu2C,GAAAjpB,IAER,OAAOA,EAAMA,EAAIqpB,UAAY,GAGzBR,EAAA52C,UAAAi3C,YAAR,eAAoB,IAAAD,KAAApc,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAoc,EAAApc,GAAAC,UAAAD,GAIhB,IAHA,IAAIiG,EAAQ,EACRqW,EAAaz2C,KAAKq2C,MAEfI,EAAW5lB,QAAQ,CAGtB,IAFA,IAAIkmB,GAAY,EAEEn0C,EAAA,EAAAo0C,EAAAP,EAAA7zC,EAAAo0C,EAAAnmB,OAAAjuB,IAAY,CAAzB,IAAM0qB,EAAG0pB,EAAAp0C,GACV,GAAKvE,OAAA44C,EAAA,EAAA54C,CAAQivB,EAAI1uB,MAAO23C,EAAKnW,IAA7B,CAIA,IAAqB,IAAhBmW,EAAK1lB,QAAgBuP,IAAUmW,EAAK1lB,OAAS,IAAMvD,EAAIopB,SACxD,OAAStW,MAAKA,EAAE9S,IAAGA,EAAEmpB,WAAUA,GAGnCM,GAAY,EACZN,EAAanpB,EAAI4pB,KACjB9W,IAEA,OAGJ,IAAK2W,EACD,MAIR,OAAS3W,MAAKA,EAAEqW,WAAUA,IAGtBN,EAAA52C,UAAAq3C,aAAR,SAAqBM,EAAqBX,GACtC,IAEIjpB,EAFA8S,EAAQ,EACRqW,EAAaS,EAGjB,GACI5pB,GACIqpB,UAAW,EACX/3C,MAAO23C,EAAKnW,GACZ8W,SAGJT,EAAWrS,KAAK9W,GAEhBmpB,EAAanpB,EAAI4pB,KACjB9W,UACKA,EAAQmW,EAAK1lB,QAItB,OAFAvD,EAAIopB,SAAW,MAAK12C,KAAKo2C,QAElB9oB,EAAIopB,UAEnBP,EA3EA,kFCIc,SAAAgB,EAAwBC,EAAal4C,EAAWm4C,GAC1D,OAAKn4C,GAAQm4C,EAINC,EAAoBF,EAAQl4C,EAAKm4C,GAOtC,SAA4DD,GAC9D,IAAMG,EAAe,SAAA13C,GAAG,SAAA23C,mDAAsB,OAARj3C,EAAA,UAAAi3C,EAAA33C,GAAQ23C,EAAzB,CAAiBJ,GAiBtC,OAfA/4C,OAAOo5C,oBAAoBL,EAAO73C,WAC7B20C,QAAQ,SAAAh1C,GACL,IAAMm4C,EAAah5C,OAAOq5C,yBAAyBN,EAAO73C,UAAWL,GAEhEm4C,GAAsB,gBAARn4C,GAInBb,OAAOC,eACHi5C,EAAgBh4C,UAChBL,EACAo4C,EAAoBF,EAAO73C,UAAWL,EAAKm4C,MAIhDE,EA5BII,CAAmBP,GAkC5B,SAAAE,EAAgDF,EAAgBl4C,EAAam4C,GAC/E,GAAgC,mBAArBA,EAAWz4C,MAClB,OAAOy4C,EAGX,IAAInzC,EAAYmzC,EAAWz4C,MAE3B,OACIJ,IAAG,WACC,IAAMo5C,EAAc1zC,EAAO/E,KAAKa,MAOhC,OALA3B,OAAOC,eAAe0B,KAAMd,EAAGqB,EAAA,YACxB82C,GACHz4C,MAAOg5C,KAGJA,GAEXC,IAAG,SAACj5C,GACAsF,EAAStF,8ECxDP,SAAAk5C,EAA8CV,GACxD,OAcJ,SAAuCA,EAAWW,GAC9C,IAAMC,EAAQ35C,OAAOY,OAAOm4C,GAa5B,OAGJ,SAA6BA,EAAgBa,GAGzC,IAFA,IAAI14C,EAAYlB,OAAO65C,eAAed,GAE/B73C,GACH04C,EAAS14C,GAETA,EAAYlB,OAAO65C,eAAe34C,GApBtC44C,CAAoBf,EAAQ,SAAA73C,GACxBlB,OAAOo5C,oBAAoBl4C,GACtB20C,QAAQ,SAAAh2C,GACQ,gBAATA,GAAiD,mBAAhB85C,EAAM95C,IAA2C,MAAnBA,EAAKk6C,OAAO,KAI/EJ,EAAM95C,GAAQ65C,EAAKX,EAAiCl5C,EAAiB85C,QAI1EA,EA5BAK,CAAYjB,EAAQ,SAACA,EAAQl5C,GAChC,sBAAC,MAAAq4C,KAAApc,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAoc,EAAApc,GAAAC,UAAAD,GAAmB,OAAA97B,OAAAi6C,EAAA,WAAAj6C,EAAWuE,EAAAw0C,EAAOl5C,IAAMJ,KAAIu8B,MAAAz3B,GAACw0C,GAAM9c,OAAKic,QAI9D,SAAAgC,EAAmEjrB,GACrE,OAAOjvB,OAAOuiC,KAAKtT,GACdqc,OAAO,SAACC,EAAQ1qC,GAGb,OAFA0qC,EAAO1qC,GAAO44C,EAAkBxqB,EAAIpuB,IAE7B0qC,0DCRnB4O,EAAA,WACI,SAAAA,EACY91C,GAAA1C,KAAA0C,iBA6BhB,OA1BI81C,EAAAj5C,UAAA6H,aAAA,SAAa7B,EAAY3C,OAAA+N,OAAA,IAAA/N,OAAE61C,EAAA9nC,EAAA8nC,OAAQ51C,EAAA8N,EAAA9N,QACzBy8B,EAAM,4BAA4B/5B,EAClCzC,GAAY0X,OAAQk+B,EAAA,EAAYC,QAEtC,OAAO34C,KAAK0C,eAAelE,IAAI8gC,GAC3BmZ,QACIG,QAASC,EAAA,EAAwBve,OAAOme,GAAUA,EAAOG,aAAelrC,KAAK,MAEjF5K,QAAOA,EACPD,QAAOA,KAIf21C,EAAAj5C,UAAAqT,eAAA,SAAerN,EAAYpD,EAA2BS,OAAA+N,OAAA,IAAA/N,OAAE61C,EAAA9nC,EAAA8nC,OAAQ51C,EAAA8N,EAAA9N,QACtDy8B,EAAM,4BAA4B/5B,EAClCzC,GAAY0X,OAAQk+B,EAAA,EAAYC,QAEtC,OAAO34C,KAAK0C,eAAeo2C,IAAIxZ,GAC3BmZ,QACIG,QAASC,EAAA,EAAwBve,OAAOme,GAAUA,EAAOG,aAAelrC,KAAK,MAEjFvL,KAAIA,EACJW,QAAOA,EACPD,QAAOA,KAGnB21C,EA/BA,yICUAO,EAAA,WACI,SAAAA,EACY9xC,EACA0xB,GADA34B,KAAAiH,yBACAjH,KAAA24B,uBAyEhB,OAtEIogB,EAAAx5C,UAAA6H,aAAA,SAAa7B,EAAY9D,GAAzB,IAAA1B,EAAAC,KACI,OAAO3B,OAAA26C,EAAA,OAAA36C,CACHA,OAAA46C,EAAA,GAAA56C,CAAGA,OAAA8sC,EAAA,aAAA9sC,CAAa66C,EAAA,EAAmBvM,wBACnCtuC,OAAA86C,EAAA,MAAA96C,CACI2B,KAAK24B,qBAAqBkC,WAAUt6B,EAAA,YAAMkB,GAASuhC,UAAU,KAC7D3kC,OAAA+6C,EAAA,MAAA/6C,CAAM,WAAM,OAAA0B,EAAKkH,uBAAuBG,aAAa7B,EAAI9D,GACpDO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KAAW,OAAA9D,OAAA8sC,EAAA,aAAA9sC,CAAa66C,EAAA,EAAmBzN,sBAAuBtpC,SAErFuD,KACErH,OAAAg7C,EAAA,WAAAh7C,CAAW,SAAAkE,GAAS,OAAAlE,OAAAi7C,EAAA,EAAAj7C,CAAiB66C,EAAA,EAAmBtM,mBAAoBrqC,OAIpFw2C,EAAAx5C,UAAAk7B,oBAAA,SAAoBh5B,GAApB,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAApF,OAAA26C,EAAA,OAAA36C,CACZA,OAAA46C,EAAA,GAAA56C,CAAGA,OAAA8sC,EAAA,aAAA9sC,CAAa66C,EAAA,EAAmBvM,wBACnC5sC,EAAK44B,qBAAqBkC,aAC1Bx8B,OAAA+6C,EAAA,MAAA/6C,CAAM,WACF,IACM8xB,EADQ1sB,EAAMG,WACE6G,OAAOG,mBAE7B,IAAKulB,IAAYA,EAAQ7K,WACrB,MAAM,IAAIi0B,EAAA,EAAc,iDAG5B,OAAOx5C,EAAKkH,uBAAuBG,aAAa+oB,EAAQ7K,WAAY7jB,GAC/DO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KAAW,OAAA9D,OAAA8sC,EAAA,aAAA9sC,CAAa66C,EAAA,EAAmBzN,sBAAuBtpC,QAErFuD,KACErH,OAAAg7C,EAAA,WAAAh7C,CAAW,SAAAkE,GAAS,OAAAlE,OAAAi7C,EAAA,EAAAj7C,CAAiB66C,EAAA,EAAmBtM,mBAAoBrqC,QAIpFw2C,EAAAx5C,UAAAqT,eAAA,SACIzQ,EACAV,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GAAS,WAAI+1C,EAAA,WAAW,SAAA73C,GAC3B,IACM+E,EADQjD,EAAMG,WACG8C,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAI+yC,EAAA,EAAiBA,EAAA,EAAqBtyC,iBAGpDxF,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa66C,EAAA,EAAmBrM,0BAE9C9sC,EAAKkH,uBAAuB2L,eAAelM,EAASnB,GAAIpD,EAAMV,GACzDO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa66C,EAAA,EAAmBxN,wBAAyBvpC,IACvER,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkB66C,EAAA,EAAmBpM,qBAAsB7qC,UAK1F82C,EAAAx5C,UAAAma,oBAAA,SAAoBjY,GAApB,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GACH,IACMiD,EADQjD,EAAMG,WACG8C,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAI+yC,EAAA,EAAiBA,EAAA,EAAqBtyC,iBAGpD,OAAOpH,EAAKqH,aAAaV,EAASnB,GAAI9D,KAGlDs3C,EA5EA,0DCXMW,GACFd,SACI,wCACA,uCACA,sCACA,WACA,sBACFlrC,KAAK,MAGXisC,EAAA,WACI,SAAAA,EACYj3C,GAAA1C,KAAA0C,iBAwBhB,OArBIi3C,EAAAp6C,UAAA68B,mBAAA,SAAmB9W,EAAoBlb,EAAuCxH,OAAEC,QAAA,IAAAD,QAAAC,QACtEy8B,EAAM,6BAA6Bha,EAAU,gBAC7CxiB,GAAY0X,OAAQo/B,EAAA,EAAYjB,QAEtC,OAAO34C,KAAK0C,eAAe6X,KAAK+kB,GAAOn9B,KAAMiI,EAAcquC,OAAQiB,EAAgB52C,QAAOA,EAAED,QAAOA,KAGvG82C,EAAAp6C,UAAA+8B,kBAAA,SAAkBhX,EAAoBiX,EAA2C35B,OAAEC,QAAA,IAAAD,QAAAC,QACvE0C,EAAAg3B,EAAAh3B,GAAIpD,EAAA5B,EAAA,OAAAg8B,GAAA,OACN+C,EAAM,6BAA6Bha,EAAU,iBAAiB/f,EAC9DzC,GAAY0X,OAAQo/B,EAAA,EAAYjB,QAEtC,OAAO34C,KAAK0C,eAAeo2C,IAAIxZ,GAAOmZ,OAAQiB,EAAgBv3C,KAAIA,EAAEW,QAAOA,EAAED,QAAOA,KAGxF82C,EAAAp6C,UAAA88B,kBAAA,SAAkB/W,EAAoBmP,EAAuB7xB,OAAEC,QAAA,IAAAD,QAAAC,QACrDy8B,EAAM,6BAA6Bha,EAAU,iBAAiBmP,EAC9D3xB,GAAY0X,OAAQo/B,EAAA,EAAYjB,QAEtC,OAAO34C,KAAK0C,eAAem3C,OAAOva,GAAOmZ,OAAQiB,EAAgB52C,QAAOA,EAAED,QAAOA,KAEzF82C,EA1BA,iFCPAG,EAAA,WACI,SAAAA,EACYp3C,GAAA1C,KAAA0C,iBAsChB,OAnCIo3C,EAAAv6C,UAAAw7B,mBAAA,SAAmBt5B,GAAnB,IAAA1B,EAAAC,KACI,OAAO+5C,EAAA,WAAW96C,OAAO,SAAC0C,GACtBA,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa27C,EAAA,EAAwBC,8BAEnDl6C,EAAK2C,eAAeq4B,mBAAmBt5B,GAClCO,KAAK,SAAAC,GACF,IAAM8B,GACFub,gBAAiBrd,EAASa,QAAQ,uBAClCo3C,YAAaj4C,EAASa,QAAQ,mBAGlCnB,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa27C,EAAA,EAAwBG,4BAA6Bl4C,EAASE,KAAM4B,IAC/FpC,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkB27C,EAAA,EAAwBI,yBAA0Bn4C,SAMnG63C,EAAAv6C,UAAAsP,kBAAA,SAAkB7K,EAAkBvC,GADpC,IAAA1B,EAAAC,KAEI,OAAO+5C,EAAA,WAAW96C,OAAO,SAAC0C,GACtBA,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa27C,EAAA,EAAwBK,gCAA4B11C,GAAaX,SAAQA,KAEpGjE,EAAK2C,eAAemM,kBAAkB7K,EAAUvC,GAC3CO,KAAK,SAAAC,GACFN,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa27C,EAAA,EAAwBM,2BAA4Br4C,EAASE,MAAQ6B,SAAQA,KACxGrC,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkB27C,EAAA,EAAwBO,wBAAyBt4C,GAAY+B,SAAQA,UAVtHzD,EAAA,YADCi6C,EAAA,yCAeLV,EAxCA,4DCJAW,EAAA,WACI,SAAAA,EACY/3C,GAAA1C,KAAA0C,iBA0BhB,OAvBI+3C,EAAAl7C,UAAAw7B,mBAAA,SAAmBn4B,OAAEC,QAAA,IAAAD,QAAAC,QAGjB,OAAO7C,KAAK0C,eAAelE,IAFf,4BAGRqE,QAAOA,EACPC,SACI0X,OAAQk+B,EAAA,EAAYC,OACpB+B,iBAAkBd,EAAA,MAK9Ba,EAAAl7C,UAAAsP,kBAAA,SAAkB7K,EAAkBpB,OAAEC,QAAA,IAAAD,QAAAC,QAC5By8B,EAAM,4BAA4Bt7B,EAExC,OAAOhE,KAAK0C,eAAelE,IAAI8gC,GAC3Bz8B,QAAOA,EACPC,SACI0X,OAAQk+B,EAAA,EAAYC,OACpB+B,iBAAkBd,EAAA,MAIlCa,EA5BA,uCCHc,SAAAE,EAAsCtH,EAAwBuH,GACxE,OACIC,YAAaxH,EAAOwH,YACpBn9C,OAAQ21C,EAAOpzC,KACf66C,MAAOzH,EAAO0H,KACdx1C,GAAI8tC,EAAO9tC,GACXy1C,SAAUJ,EACVK,cAAe5H,EAAO4H,cACtB/N,SAAUmG,EAAOnG,SACjBgO,YAAa7H,EAAO6H,2ECV5B,IAAYC,kCAAZ,SAAYA,GACRA,EAAA,mCADJ,CAAYA,4ECIZC,EAAA,WAKI,SAAAA,EACIC,GAEAr7C,KAAKs7C,cAAgBj9C,OAAAk9C,EAAA,EAAAl9C,CAAYg9C,GACjCr7C,KAAKw7C,cAAe,EACpBx7C,KAAKy7C,cAiEb,OA9DIL,EAAA77C,UAAAm8C,OAAA,WACQ17C,KAAKw7C,eAITx7C,KAAKw7C,cAAe,EAEpBtrC,OAAOgO,iBAAiB,UAAWle,KAAK27C,kBAG5CP,EAAA77C,UAAAq8C,WAAA,WACS57C,KAAKw7C,eAIVx7C,KAAKw7C,cAAe,EAEpBtrC,OAAOkO,oBAAoB,UAAWpe,KAAK27C,kBAG/CP,EAAA77C,UAAAs8C,YAAA,SAA2C57C,EAAa67C,GACpD,IAAIC,EAAY/7C,KAAKy7C,WAAWx7C,GAE3B87C,IACD/7C,KAAKy7C,WAAWx7C,GAAQ87C,MAG5BA,EAAU3X,KAAK0X,IAGnBV,EAAA77C,UAAAy8C,eAAA,SAA8C/7C,EAAa67C,GACvD,IAAMC,EAAY/7C,KAAKy7C,WAAWx7C,GAElC,GAAK87C,EAAL,CAIA,IAAM3b,EAAQ2b,EAAU9F,QAAQ6F,GAE5B1b,GAAS,GACT2b,EAAUE,OAAO7b,EAAO,KAIhCgb,EAAA77C,UAAA28C,QAAA,SAAuCr9B,GACnC,IAAMk9B,EAAY/7C,KAAKy7C,WAAW58B,EAAM5e,MAEnC87C,GAILA,EAAU7H,QAAQ,SAAA4H,GAAY,OAAAA,EAASj9B,MAInCu8B,EAAA77C,UAAAo8C,eAAR,SAAuB98B,GACdA,EAAMs9B,SAAWn8C,KAAKs7C,eAAmBj9C,OAAA+9C,EAAA,EAAA/9C,CAAcwgB,EAAMzc,KAAMyc,EAAMzc,KAAKnC,OAInFD,KAAKk8C,QAAQr9B,EAAMzc,OALvB7B,EAAA,YADC87C,EAAA,sCAQLjB,EA3EA,mDCJAkB,EAAA,WAGI,SAAAA,EACIC,EACQC,GAAAx8C,KAAAw8C,gBAERx8C,KAAKy8C,cAAgBp+C,OAAAq+C,EAAA,EAAAr+C,CAAYk+C,GAkBzC,OAfID,EAAA/8C,UAAAgb,KAAA,SAAKsE,GACD,GAAI3O,SAAWlQ,KAAKw8C,cAApB,CAIA,IAAKx8C,KAAKw8C,cACN,MAAM,IAAIp8C,MAAM,6DAGpBJ,KAAKw8C,cAAcG,YAAY99B,EAAO7e,KAAKy8C,iBAG/CH,EAAA/8C,UAAAq9C,UAAA,SAAU1sC,GACNlQ,KAAKw8C,cAAgBtsC,GAE7BosC,EAzBA,2ECEA,SAAAz8C,GACI,SAAAg9C,EAAY56C,EAAoBnC,GAAhC,IAAAC,EACIF,EAAA/B,KAAAkC,KAAMiC,GACFnC,QAASA,GAAW,yFACtBE,YAEFD,EAAKE,KAAO,kBAEpB,OARgDiD,EAAA,UAAA25C,EAAAh9C,GAQhDg9C,EARA,CAAgDjsC,EAAA,mBCElC,SAAAksC,EACV76C,EACAnC,GAEQ,IACA8C,EADAX,EAAAE,KACAkU,cAAA,IAAAzT,OAER,OAAO,IAAIgO,EAAA,EAAa3O,GACpBnC,QAKR,SAAoBuW,GAChB,IAAK6pB,MAAMC,QAAQ9pB,GACf,OAGJ,OAAOA,EAAOszB,OAAO,SAACC,EAAkBrnC,GACpC,OAAIA,GAASA,EAAMzC,QACJ8pC,EAAMtP,QAAE/3B,EAAMzC,UAGtB8pC,OACJl8B,KAAK,KAhBCqvC,CAAW1mC,IAAWvW,EAC/BuW,OAAMA,ICHd,iBAGI,SAAA2mC,IAFQh9C,KAAAi9C,mBAGJj9C,KAAK2oB,SAAS,UAAW,SAAC1mB,EAAUnC,GAAY,WAAI8Q,EAAA,EAAa3O,GAAYnC,QAAOA,MACpFE,KAAK2oB,SAAS,WAAY,SAAC1mB,EAAUnC,GAAY,OCX3C,SACVmC,EACAnC,GAEQ,IAAAqC,EAAAF,EAAAE,KACAS,EAAAT,EAAAkU,cAAA,IAAAzT,OAER,OAAO,IAAIgO,EAAA,EAAa3O,GACpBnC,QAOR,SAAoBuW,GAChB,OAAOA,EAAOszB,OAAO,SAACC,EAAkBrnC,GACpC,OAAIA,EACWqnC,EAAMtP,QAAE/3B,IAGhBqnC,OACJl8B,KAAK,KAdCwvC,CAAW7mC,IAAWlU,EAAKutC,QAAUvtC,EAAKg7C,OAASr9C,EAC5DuW,OAAQA,EAAOwa,OACXxa,EAAOiX,IAAI,SAAAxtB,GAAW,OAAGwW,KAAMnU,EAAKlC,KAAMH,QAAOA,OAC9CwW,KAAMnU,EAAKlC,KAAMH,QAASqC,EAAKutC,QAAUvtC,EAAKg7C,UDAJC,CAA6Bn7C,EAAUnC,KACxFE,KAAK2oB,SAAS,aAAc,SAAC1mB,EAAUnC,GAAY,OEZ7C,SACVmC,EACAnC,GAEQ,IAAAqC,EAAAF,EAAAE,KAER,OAAO,IAAIyO,EAAA,EAAa3O,GACpBnC,QAASA,GAAWqC,EAAKutC,QAAUvtC,EAAKg7C,MACxC9mC,SACIC,KAAMnU,EAAKmU,MAAQnU,EAAKlC,KACxBH,QAASqC,EAAKutC,QAAUvtC,EAAKg7C,UFEkBE,CAA+Bp7C,EAAUnC,KAC5FE,KAAK2oB,SAAS,UAAW,SAAC1mB,EAAUnC,GAAY,OAAAg9C,EAA4B76C,EAAUnC,KACtFE,KAAK2oB,SAAS,UAAW,SAAA1mB,GAAY,WAAI6V,EAAA,EAAa7V,KAwD9D,OArDI+6C,EAAAz9C,UAAAopB,SAAA,SAAS1oB,EAAcq9C,GACnBt9C,KAAKi9C,gBAAgBh9C,GAAQq9C,GAGjCN,EAAAz9C,UAAAirC,YAAA,SAAYvoC,EAAoBnC,GAG5B,OAFsBE,KAAKi9C,gBAAgBj9C,KAAKu9C,SAASt7C,KAAcjC,KAAKi9C,gBAAgBpO,SAEvE5sC,EAAUnC,IAG3Bk9C,EAAAz9C,UAAAg+C,SAAR,SAAiBt7C,GACb,GAAwB,IAApBA,EAASyK,OACT,MAAO,UAGX,GAAI1M,KAAKw9C,+BAA+Bv7C,EAASE,MAC7C,MAAO,aAGX,GAAInC,KAAKy9C,6BAA6Bx7C,EAASE,MAAO,CAClD,IAAMu7C,EAAer/C,OAAA4J,EAAA,KAAA5J,CAAK4D,EAASE,KAAKlC,KAAKmmC,MAAM,MACnD,OAAOsX,GAAgB19C,KAAKi9C,gBAAgBS,GACxCA,EACA,WAGR,IAAMn7C,EAAQlE,OAAA4J,EAAA,KAAA5J,CAAK4D,EAASE,MAAQF,EAASE,KAAKkU,QAElD,OAAO9T,GAASA,EAAM+T,KAAO/T,EAAM+T,KAAO,WAGtC0mC,EAAAz9C,UAAAi+C,+BAAR,SACI5uB,GAEA,IAAM+uB,EAA0B/uB,EAEhC,OAAQ5uB,KAAKy9C,6BAA6B7uB,IACG,iBAAlC+uB,EAAwBR,OACS,iBAAjCQ,EAAwB19C,MACW,iBAAnC09C,EAAwBjxC,QACW,iBAAnCixC,EAAwBjO,QAG/BsN,EAAAz9C,UAAAk+C,6BAAR,SACI7uB,GAEA,IAAMgvB,EAAwBhvB,EAE9B,MAA+C,iBAAjCgvB,EAAsBvnC,QACO,iBAAhCunC,EAAsBT,OACS,iBAA/BS,EAAsB39C,MACW,iBAAjC29C,EAAsBlxC,QAEzCswC,EAhEA,uCGHMjd,GACF1pB,UACA+hB,aAGU,SAAAylB,EACVl6C,EACA2Q,GAQA,YATA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAAwD,EAAA,gBAAAxD,EACZ+D,KAAMgpC,EACN/0B,OAAQg1B,EACRjT,SAAUkT,GAGPC,CAAQ5nC,EAAO2Q,GAG1B,SAAA82B,EACIhpC,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAK69C,EAAA,EAAyBlS,8BAC9B,KAAKkS,EAAA,EAAyBC,yBAC9B,KAAKC,EAAA,EAAmBvS,sBACxB,KAAKwS,EAAA,EAAgBC,mBACjB,OAAO5pC,EAAO9Q,QAAU8Q,EAAO9Q,QAAQkG,eAAiBtH,EAE5D,QACI,OAAOA,GAIf,SAAAipC,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,MAAoC0pB,EAAc1pB,QAG1C/B,EAAOrU,MACf,KAAK+9C,EAAA,EAAmBrR,sBACxB,KAAKqR,EAAA,EAAmBvS,sBACpB,OAAAvoC,EAAA,YAAYmT,GAAQ00B,eAAWpmC,IAEnC,KAAKq5C,EAAA,EAAmBpR,mBACpB,OAAA1pC,EAAA,YAAYmT,GAAQ00B,UAAWz2B,EAAO9Q,UAE1C,KAAKs6C,EAAA,EAAyBK,8BAC9B,KAAKL,EAAA,EAAyBlS,8BAC1B,OAAA1oC,EAAA,YAAYmT,GAAQ20B,iBAAarmC,IAErC,KAAKm5C,EAAA,EAAyBM,2BAC1B,OAAAl7C,EAAA,YAAYmT,GAAQ20B,YAAa12B,EAAO9Q,UAE5C,KAAKs6C,EAAA,EAAyBO,yBAC9B,KAAKP,EAAA,EAAyBC,yBAC1B,OAAA76C,EAAA,YAAYmT,GAAQ03B,0BAAsBppC,IAE9C,KAAKm5C,EAAA,EAAyBQ,sBAC1B,OAAAp7C,EAAA,YAAYmT,GAAQ03B,qBAAsBz5B,EAAO9Q,UAErD,QACI,OAAO6S,GAIf,SAAAi1B,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,MAAwC2H,EAAc3H,UAG9C9jB,EAAOrU,MACf,KAAK+9C,EAAA,EAAmBrR,sBACpB,OAAAzpC,EAAA,YAAYk1B,GAAUlB,WAAW,IAErC,KAAK8mB,EAAA,EAAmBvS,sBACxB,KAAKuS,EAAA,EAAmBpR,mBACpB,OAAA1pC,EAAA,YAAYk1B,GAAUlB,WAAW,IAErC,KAAK4mB,EAAA,EAAyBK,8BAC1B,OAAAj7C,EAAA,YAAYk1B,GAAUhB,YAAY,IAEtC,KAAK0mB,EAAA,EAAyBM,2BAC9B,KAAKN,EAAA,EAAyBlS,8BAC1B,OAAA1oC,EAAA,YAAYk1B,GAAUhB,YAAY,IAEtC,KAAK0mB,EAAA,EAAyBO,yBAC1B,OAAAn7C,EAAA,YAAYk1B,GAAUjC,qBAAqB,IAE/C,KAAK2nB,EAAA,EAAyBQ,sBAC9B,KAAKR,EAAA,EAAyBC,yBAC1B,OAAA76C,EAAA,YAAYk1B,GAAUjC,qBAAqB,IAE/C,QACI,OAAOiC,gCC/FTmmB,GACFx6C,QACAsS,UACA+hB,aAGU,SAAAomB,EACV76C,EACA2Q,GAQA,YATA,IAAA3Q,MAAA46C,GAGgBlgD,OAAAwD,EAAA,gBAAAxD,EACZ+D,KAAMq8C,EACNpoC,OAAQqoC,EACRtmB,SAAUumB,GAGPpT,CAAQ5nC,EAAO2Q,GAG1B,SAAAmqC,EACIr8C,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAK2+C,EAAA,EAAiBC,oBAClB,OAAOvqC,EAAO9Q,QAAU8Q,EAAO9Q,QAAUpB,EAE7C,QACI,OAAOA,GAIf,SAAAs8C,EACIroC,EACA/B,GAEA,YAHA,IAAA+B,MAA4BkoC,EAAcloC,QAGlC/B,EAAOrU,MACf,KAAK2+C,EAAA,EAAiBC,oBAClB,OAAA37C,EAAA,YAAYmT,GAAQ00B,eAAWpmC,IAEnC,KAAKi6C,EAAA,EAAiBE,iBAClB,OAAA57C,EAAA,YAAYmT,GAAQ00B,UAAWz2B,EAAO9Q,UAE1C,QACI,OAAO6S,GAIf,SAAAsoC,EACIvmB,EACA9jB,GAEA,YAHA,IAAA8jB,MAAgCmmB,EAAcnmB,UAGtC9jB,EAAOrU,MACf,KAAK2+C,EAAA,EAAiBG,oBAClB,OAAA77C,EAAA,YAAYk1B,GAAUlB,WAAW,IAErC,KAAK0nB,EAAA,EAAiBC,oBACtB,KAAKD,EAAA,EAAiBE,iBAClB,OAAA57C,EAAA,YAAYk1B,GAAUlB,WAAW,IAErC,QACI,OAAOkB,mDC7DT4mB,GACF3oC,UACA+hB,aAGU,SAAA6mB,EACVt7C,EACA2Q,GAQA,YATA,IAAA3Q,MAAAq7C,GAGgB3gD,OAAAwD,EAAA,gBAAAxD,EACZ+D,KAAM88C,EACN7oC,OAAQ8oC,EACR/mB,SAAUgnB,GAGP7T,CAAQ5nC,EAAO2Q,GAG1B,SAAA4qC,EACI98C,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAK6B,EAAA,EAAkBI,uBACnB,OAAOoS,EAAO9Q,YAElB,QACI,OAAOpB,GAIf,SAAA+8C,EACI9oC,EACA/B,GAEA,YAHA,IAAA+B,MAA6B2oC,EAAc3oC,QAGnC/B,EAAOrU,MACf,KAAK6B,EAAA,EAAkBC,uBACvB,KAAKD,EAAA,EAAkBI,uBACnB,OAAAgB,EAAA,YAAYmT,GAAQ00B,eAAWpmC,IAEnC,KAAK7C,EAAA,EAAkBU,oBACnB,OAAAU,EAAA,YAAYmT,GAAQ00B,UAAWz2B,EAAO9Q,UAE1C,QACI,OAAO6S,GAIf,SAAA+oC,EACIhnB,EACA9jB,GAEA,YAHA,IAAA8jB,MAAiC4mB,EAAc5mB,UAGvC9jB,EAAOrU,MACf,KAAK6B,EAAA,EAAkBC,uBACnB,OAAAmB,EAAA,YAAYk1B,GAAUlB,WAAW,IAErC,KAAKp1B,EAAA,EAAkBI,uBACvB,KAAKJ,EAAA,EAAkBU,oBACnB,OAAAU,EAAA,YAAYk1B,GAAUlB,WAAW,IAErC,QACI,OAAOkB,wBC7DD,SAAAinB,EAAyB17C,EAA0B2Q,GAK7D,YALmC,IAAA3Q,UACnBtF,OAAAwD,EAAA,gBAAAxD,EACZ+D,KAAMk9C,GAGH/T,CAAQ5nC,EAAO2Q,GAG1B,SAAAgrC,EAAqBl9C,EAAuCkS,GACxD,OAAQA,EAAOrU,MACf,KAAK4I,EAAA,EAAkBK,uBACnB,OAAOoL,EAAO9Q,QAElB,QACI,OAAOpB,wBCXTm9C,GACFlpC,UACA+hB,aAGU,SAAAonB,EACV77C,EACA2Q,GASA,YAVA,IAAA3Q,MAAA47C,GAGgBlhD,OAAAwD,EAAA,gBAAAxD,EACZ+D,KAAMq9C,EACNppC,OAAQqpC,EACR37C,KAAM47C,EACNvnB,SAAUwnB,GAGPrU,CAAQ5nC,EAAO2Q,GAG1B,SAAAmrC,EACIr9C,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAK4/C,EAAA,EAAwBvF,2BACzB,OAAOhmC,EAAO9Q,QACVnF,OAAAyhD,EAAA,EAAAzhD,CAAY+D,MAAYkS,EAAO9Q,SAC3B+B,GAAI+O,EAAO9Q,QAAQ+B,GACnBC,QAAS8O,EAAO9Q,QAAQgC,UAE5BpD,EAER,KAAKy9C,EAAA,EAAwB1F,4BACzB,OAAO7lC,EAAO9Q,QAAU8Q,EAAO9Q,WAEnC,QACI,OAAOpB,GAIf,SAAAu9C,EACI57C,EACAuQ,GAEA,OAAQA,EAAOrU,MACf,KAAK4/C,EAAA,EAAwB1F,4BACzB,OAAO7lC,EAAOvQ,KAAMb,EAAA,YAAMa,EAASuQ,EAAOvQ,MAASA,EAEvD,QACI,OAAOA,GAIf,SAAA27C,EACIrpC,EACA/B,GAEA,YAHA,IAAA+B,MAAmCkpC,EAAclpC,QAGzC/B,EAAOrU,MACf,KAAK4/C,EAAA,EAAwB5F,4BAC7B,KAAK4F,EAAA,EAAwB1F,4BACzB,OAAAj3C,EAAA,YAAYmT,GAAQ00B,eAAWpmC,IAEnC,KAAKk7C,EAAA,EAAwBzF,yBACzB,OAAAl3C,EAAA,YAAYmT,GAAQ00B,UAAWz2B,EAAO9Q,UAE1C,KAAKq8C,EAAA,EAAwBxF,2BAC7B,KAAKwF,EAAA,EAAwBvF,2BACzB,OAAAp3C,EAAA,YACOmT,GACH25B,kBAAcrrC,EACdsrC,qBAAiBtrC,IAGzB,KAAKk7C,EAAA,EAAwBtF,wBACzB,OAAAr3C,EAAA,YACOmT,GACH25B,aAAc17B,EAAOvQ,KAAKC,SAC1BisC,gBAAiB37B,EAAO9Q,UAGhC,QACI,OAAO6S,GAIf,SAAAupC,EACIxnB,EACA9jB,GAEA,YAHA,IAAA8jB,MAAuCmnB,EAAcnnB,UAG7C9jB,EAAOrU,MACf,KAAK4/C,EAAA,EAAwB5F,4BACzB,OAAA/2C,EAAA,YAAYk1B,GAAUlB,WAAW,IAErC,KAAK2oB,EAAA,EAAwB1F,4BAC7B,KAAK0F,EAAA,EAAwBzF,yBACzB,OAAAl3C,EAAA,YAAYk1B,GAAUlB,WAAW,IAErC,KAAK2oB,EAAA,EAAwBxF,2BACzB,OAAAn3C,EAAA,YACOk1B,GACHb,iBAAiB,EACjByY,aAAc17B,EAAOvQ,KAAKC,WAGlC,KAAK67C,EAAA,EAAwBvF,2BAC7B,KAAKuF,EAAA,EAAwBtF,wBACzB,OAAAr3C,EAAA,YACOk1B,GACHb,iBAAiB,EACjByY,kBAAcrrC,IAGtB,QACI,OAAOyzB,sBCrHD,SAAA2nB,EACVp8C,EACA2Q,GAOA,YARA,IAAA3Q,MAAAwsC,EAAA,GAGgB9xC,OAAAwD,EAAA,gBAAAxD,EACZgY,OAAQ2pC,GACR5nB,SAAU6nB,IAGP1U,CAAQ5nC,EAAO2Q,GAG1B,SAAA0rC,GACI3pC,EACA/B,GAEA,YAHA,IAAA+B,MAAqC85B,EAAA,EAAc95B,QAG3C/B,EAAOrU,MACf,KAAKwE,EAAA,EAA0BsB,oBAC/B,KAAKtB,EAAA,EAA0BuB,oBAC3B,OAAA9C,EAAA,YACOmT,GACHs0B,qBAAiBhmC,EACjByrC,wBAAoBzrC,IAG5B,KAAKF,EAAA,EAA0BwB,iBAC3B,OAAA/C,EAAA,YACOmT,GACHs0B,gBAAiBr2B,EAAO9Q,QACxB4sC,mBAAoB97B,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGvD,KAAKS,EAAA,EAA0B0B,sBAC/B,KAAK1B,EAAA,EAA0B2B,sBAC3B,OAAAlD,EAAA,YACOmT,GACHu0B,uBAAmBjmC,EACnBu7C,0BAAsBv7C,IAG9B,KAAKF,EAAA,EAA0B4B,mBAC3B,OAAAnD,EAAA,YACOmT,GACHu0B,kBAAmBt2B,EAAO9Q,QAC1B08C,qBAAsB5rC,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGzD,KAAKS,EAAA,EAA0BC,iBAC/B,KAAKD,EAAA,EAA0BG,iBAC3B,OAAA1B,EAAA,YACOmT,GACHi6B,kBAAc3rC,EACd0rC,qBAAiB1rC,IAGzB,KAAKF,EAAA,EAA0BI,cAC3B,OAAA3B,EAAA,YACOmT,GACHi6B,aAAch8B,EAAO9Q,QACrB6sC,gBAAiB/7B,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGpD,KAAKS,EAAA,EAA0BQ,kBAC/B,KAAKR,EAAA,EAA0BgB,kBAC3B,OAAAvC,EAAA,YACOmT,GACHm6B,mBAAe7rC,EACf4rC,sBAAkB5rC,IAG1B,KAAKF,EAAA,EAA0BoB,eAC3B,OAAA3C,EAAA,YACOmT,GACHm6B,cAAel8B,EAAO9Q,QACtB+sC,iBAAkBj8B,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGrD,KAAKS,EAAA,EAA0B8B,yBAC/B,KAAK9B,EAAA,EAA0B+B,0BAC3B,OAAAtD,EAAA,YACOmT,GACHs6B,4BAAwBhsC,EACxB+rC,+BAA2B/rC,IAGnC,KAAKF,EAAA,EAA0BgC,wBAC3B,OAAAvD,EAAA,YACOmT,GACHs6B,uBAAwBr8B,EAAO9Q,QAC/BktC,0BAA2Bp8B,EAAOvQ,KAAKC,WAG/C,QACI,OAAOqS,GAIf,SAAA4pC,GACI7nB,EACA9jB,GAEA,YAHA,IAAA8jB,MAAyC+X,EAAA,EAAc/X,UAG/C9jB,EAAOrU,MACf,KAAKwE,EAAA,EAA0BsB,oBAC3B,OAAA7C,EAAA,YACOk1B,GACHZ,gBAAgB,EAChB4Y,mBAAoB97B,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGvD,KAAKS,EAAA,EAA0BwB,iBAC/B,KAAKxB,EAAA,EAA0BuB,oBAC3B,OAAA9C,EAAA,YACOk1B,GACHZ,gBAAgB,EAChB4Y,wBAAoBzrC,IAG5B,KAAKF,EAAA,EAA0B0B,sBAC3B,OAAAjD,EAAA,YACOk1B,GACH8J,kBAAkB,EAClBge,qBAAsB5rC,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGzD,KAAKS,EAAA,EAA0B4B,mBAC/B,KAAK5B,EAAA,EAA0B2B,sBAC3B,OAAAlD,EAAA,YACOk1B,GACH8J,kBAAkB,EAClBge,0BAAsBv7C,IAG9B,KAAKF,EAAA,EAA0BC,iBAC3B,OAAAxB,EAAA,YACOk1B,GACHf,aAAa,EACbgZ,gBAAiB/7B,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGpD,KAAKS,EAAA,EAA0BI,cAC/B,KAAKJ,EAAA,EAA0BG,iBAC3B,OAAA1B,EAAA,YACOk1B,GACHf,aAAa,EACbgZ,qBAAiB1rC,IAGzB,KAAKF,EAAA,EAA0BQ,kBAC3B,OAAA/B,EAAA,YACOk1B,GACHd,cAAc,EACdiZ,iBAAkBj8B,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGrD,KAAKS,EAAA,EAA0BoB,eAC/B,KAAKpB,EAAA,EAA0BgB,kBAC3B,OAAAvC,EAAA,YACOk1B,GACHd,cAAc,EACdiZ,sBAAkB5rC,IAG1B,KAAKF,EAAA,EAA0B8B,yBAC/B,OAAArD,EAAA,YACOk1B,GACHJ,qBAAqB,EACrB0Y,0BAA2Bp8B,EAAOvQ,KAAKC,WAG3C,KAAKS,EAAA,EAA0B+B,0BAC/B,KAAK/B,EAAA,EAA0BgC,wBAC9B,OAAAvD,EAAA,YACMk1B,GACHJ,qBAAqB,EACrB0Y,+BAA2B/rC,IAG/B,QACI,OAAOyzB,gBCjLT+nB,IACF/9C,QACAiU,UACA+hB,aAGU,SAAAgoB,GACVz8C,EACA2Q,GASA,YAVA,IAAA3Q,MAAAw8C,IAGgB9hD,OAAAwD,EAAA,gBAAAxD,EACZ+D,KAAMi+C,GACNhqC,OAAQiqC,GACRv8C,KAAMw8C,GACNnoB,SAAUooB,IAGPjV,CAAQ5nC,EAAO2Q,GAG1B,SAAA+rC,GACIj+C,EACAkS,GAEA,YAHA,IAAAlS,MAAqB+9C,GAAc/9C,MAG3BkS,EAAOrU,MACf,KAAK8qB,GAAA,EAAqBQ,yBACtB,OAAOjX,EAAO9Q,QAAU8Q,EAAO9Q,QAAQwpB,sBAE3C,KAAKjC,GAAA,EAAqBY,0BACtB,OAAOvpB,EAAKm4B,OAAO,SAAAlyB,GACf,OAAAA,EAAWklB,cAAgBjZ,EAAOvQ,KAAKwE,eAG/C,QACI,OAAOnG,GAIf,SAAAm+C,GACIx8C,EACAuQ,GAEA,OAAQA,EAAOrU,MACf,KAAK8qB,GAAA,EAAqBQ,yBAC1B,KAAKR,GAAA,EAAqBY,0BACtB,OAAAzoB,EAAA,YAAYa,EAASuQ,EAAOvQ,MAEhC,QACI,OAAOA,GAIf,SAAAu8C,GACIjqC,EACA/B,GAEA,YAHA,IAAA+B,MAA+B8pC,GAAc9pC,QAGrC/B,EAAOrU,MACf,KAAK8qB,GAAA,EAAqBC,yBAC1B,KAAKD,GAAA,EAAqBQ,yBACtB,OAAAroB,EAAA,YAAYmT,GAAQ00B,eAAWpmC,IAEnC,KAAKomB,GAAA,EAAqBW,0BAC1B,KAAKX,GAAA,EAAqBY,0BACtB,OAAAzoB,EAAA,YACOmT,GACHy6B,iBAAansC,EACbksC,sBAAkBlsC,IAG1B,KAAKomB,GAAA,EAAqBS,sBACtB,OAAAtoB,EAAA,YAAYmT,GAAQ00B,UAAWz2B,EAAO9Q,UAE1C,KAAKunB,GAAA,EAAqBa,uBACtB,OAAA1oB,EAAA,YACOmT,GACHy6B,YAAax8B,EAAO9Q,QACpBqtC,iBAAkBv8B,EAAOvQ,KAAKwE,eAGtC,QACI,OAAO8N,GAIf,SAAAmqC,GACIpoB,EACA9jB,GAEA,YAHA,IAAA8jB,MAAkC+nB,GAAc/nB,UAGxC9jB,EAAOrU,MACf,KAAK8qB,GAAA,EAAqBC,yBACtB,OAAA9nB,EAAA,YAAYk1B,GAAUlB,WAAW,IAErC,KAAKnM,GAAA,EAAqBW,0BACtB,OAAAxoB,EAAA,YACOk1B,GACHR,YAAY,EACZmZ,mBAAoBz8B,EAAOvQ,KAAKwE,eAGxC,KAAKwiB,GAAA,EAAqBQ,yBAC1B,KAAKR,GAAA,EAAqBS,sBACtB,OAAAtoB,EAAA,YAAYk1B,GAAUlB,WAAW,IAErC,KAAKnM,GAAA,EAAqBY,0BAC1B,KAAKZ,GAAA,EAAqBa,uBACtB,OAAA1oB,EAAA,YACOk1B,GACHR,YAAY,EACZmZ,wBAAoBpsC,IAG5B,QACI,OAAOyzB,gBChHTqoB,IACFr+C,SAGU,SAAAs+C,GACV/8C,EACA2Q,SAEA,YAHA,IAAA3Q,MAAA88C,IAGKnsC,EAAOvQ,MAASuQ,EAAOvQ,KAAKC,SAIjB3F,OAAAwD,EAAA,gBAAAxD,EACZ+D,KAAM/D,OAAAwD,EAAA,gBAAAxD,EAAeuE,KACjBA,EAAC0R,EAAOvQ,KAAKC,UAAW28C,QAIzBpV,CAAQ5nC,EAAO2Q,GATX3Q,EAYf,SAAAg9C,GACIv+C,EACAkS,GAEA,YAHA,IAAAlS,MAAuBq+C,GAAcr+C,MAG7BkS,EAAOrU,MACf,KAAK2gD,GAAA,EAAyBC,iCAC1B,OAAOvsC,EAAO9Q,QAASN,EAAA,YAAMd,GAAMkQ,QAASgC,EAAO9Q,QAAQ8O,UAAYlQ,EAE3E,KAAKw+C,GAAA,EAAyBE,kCAC1B,OAAOxsC,EAAO9Q,QAASN,EAAA,YAAMd,GAAM6yC,SAAU3gC,EAAO9Q,QAAQyxC,WAAa7yC,EAE7E,KAAKw+C,GAAA,EAAyBG,4BAC1B,OAAA79C,EAAA,YAAYd,GAAM8M,SAAUoF,EAAO9Q,UAEvC,KAAKo9C,GAAA,EAAyBI,qBAC1B,OAAA99C,EAAA,YAAYd,EAASkS,EAAO9Q,SAEhC,QACI,OAAOpB,2DCnCD,SAAA6+C,GACVC,EACAz/C,QADA,IAAAy/C,UAGA,IAAMC,EAAoB9iD,OAAA+iD,EAAA,EAAA/iD,CCThB,WACV,IAAMgjD,EAAU,IAAIC,EAyBpB,OAtBI,eACA,aACA,mBACA,sBACA,sBACA,yBACA,0BACA,yBACA,qCACA,sBACA,uBACA,uBACA,iBAGoBpN,QAAQ,SAAAj0C,GAC5BohD,EAAQ14B,SAAS1oB,EAAM,SAACgC,EAAUnC,GAAY,WAAIyhD,EAAmBt/C,EAAUnC,OAGnFuhD,EAAQ14B,SAAS,2BAA4B,SAAA1mB,GAAY,WAAI8R,EAAA,EAA0B9R,KACvFo/C,EAAQ14B,SAAS,2BAA4B,SAAA1mB,GAAY,WAAI8R,EAAA,EAA0B9R,KAEhFo/C,EDjB2CG,IAGlD,OAAOnjD,OAAAwD,EAAA,gBAAAxD,CEEAA,OAAAwD,EAAA,gBAAAxD,EACHqL,eAAgBm0C,EAChBh2C,KAAM45C,EAAA,EACN/6C,SAAUg7C,GAAA,EACV/f,eAAgBggB,EAAA,EAChBl3C,OAAQ+zC,EACRp0C,aAAcw3C,GAAA,EACdvyB,UAAW4vB,EACXx3C,QAASo6C,EAAA,EACTj4C,SAAUk4C,EAAA,EACV/vB,mBAAoBgwB,EAAA,EACpBp6C,iBAAkBq6C,EAAA,EAClBl3C,YAAas1C,GACbt2C,MAAOm4C,EAAA,EACPp+C,QAASw7C,EACTl7C,eAAgBq7C,EAChBvtB,kBAAmB8tB,EACnB9wC,eAAgByxC,GAChBzwB,kBAAmBiyB,GAAA,EACnB/vB,mBAAoBgwB,GAAA,IFnBpBjB,EAAYh+C,EAAA,UACVi+C,kBAAiBA,EAAEiB,iBALA,SAACz+C,GAA8B,OAAAtF,OAAAgkD,GAAA,EAAAhkD,CAAgCsF,KAK1ClC,uEGpBtC6gD,wBAAZ,SAAYA,GACRA,EAAA,iEACAA,EAAA,wEACAA,EAAA,sEAHJ,CAAYA,wCC+BZC,EAAA,WACI,SAAAC,EACYC,EACAx7C,GADAjH,KAAAyiD,4BACAziD,KAAAiH,yBA0VhB,OAvVIu7C,EAAAjjD,UAAAo9B,uBAAA,SACIJ,EACA96B,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GACH,IAAME,EAAQF,EAAMG,WAGpB,IAFiBD,EAAM+C,SAASC,cAG5B,MAAM,IAAIrC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAMu7C,EAAsB/+C,EAAMyG,aAAau4C,wBAAwBpmB,EAAYryB,iBAEnF,IAAKw4C,EACD,MAAM,IAAIj5C,EAAA,EAAqB,kDAGnC,IAAMiqC,EAAY3zC,EAAK6iD,iBACnBrmB,EAAYmX,UACZgP,EACA/+C,EAAMkE,KAAK6kB,WAGf,OAAKgnB,EAAU7iB,OAIR9wB,EAAKu8B,mBACR/2B,GAAIm9C,EAAoBn9C,GACxB2E,gBAAiBqyB,EAAYryB,gBAC7BwpC,UAASA,GACVjyC,EAJI1B,CAIK0D,GAPD1D,EAAKs8B,kBAAkBqmB,EAAoBn9C,GAAI9D,EAA/C1B,CAAwD0D,KAW3E++C,EAAAjjD,UAAAk9B,qBAAA,SACIF,EACA96B,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GACH,IAAME,EAAQF,EAAMG,WACd8+C,EAAsB/+C,EAAMyG,aAAau4C,wBAAwBpmB,EAAYryB,iBAEnF,OAAOnK,EAAK8iD,4BACRt9C,GAAIm9C,GAAuBA,EAAoBn9C,GAC/C2E,gBAAiBqyB,EAAYryB,gBAC7BwpC,UAAW3zC,EAAK+iD,cACZvmB,EAAYmX,UACZgP,EACA/+C,EAAMkE,KAAK6kB,YAEhBjrB,EARI1B,CAQK0D,KAIpB++C,EAAAjjD,UAAAy8B,qBAAA,SACIz2B,EACA9D,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/B,IAAMgC,EAAQF,EAAMG,WACd8C,EAAW/C,EAAM+C,SAASC,cAC1ByD,EAAezG,EAAMyG,aAAaC,kBAExC,IAAK3D,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAKiD,IAAiBA,EAAaymB,OAC/B,MAAM,IAAIvsB,EAAA,EAAiBA,EAAA,EAAqBo1B,qBAGpD,IAAMqpB,GACFx9C,GAAI6E,EAAa,GAAG7E,GACpB02B,iBAAkB12B,GAGhBy9C,GACFz9C,GAAI6E,EAAa,GAAG7E,IAGxB5D,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsBC,mCAA+Bv+C,EAAWq+C,IAE3FjjD,EAAK0iD,0BAA0BnmB,kBAAkB51B,EAASnB,GAAIw9C,EAAuBthD,GAChFO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CACV4kD,EAAA,EAAsB7W,8BACtBjqC,EACA6gD,IAGJrhD,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CACX4kD,EAAA,EAAsBE,2BACtBlhD,EACA+gD,UAMpBR,EAAAjjD,UAAAs8B,oBAAA,SAAoBp6B,GAApB,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/B,IAAM+E,EAAWjD,EAAMG,WAAW8C,SAASC,cAE3C,IAAKD,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpDxF,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsBG,+BAEjDrjD,EAAKkH,uBAAuBG,aAAaV,EAASnB,GAAErC,EAAA,YAC7CzB,GACHg3C,QACIG,SAAU0J,EAAiBe,8BAGlCrhD,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsBK,6BAA8BnhD,IAC/ER,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkB4kD,EAAA,EAAsBM,0BAA2BthD,UAK9FugD,EAAAjjD,UAAAmT,cAAA,SACIH,EACA9Q,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GACH,IAAM84B,EAAcx8B,EAAKyjD,2BAA2BjxC,EAAS9O,GACvD2G,EAAe3G,EAAMG,WAAWwG,aAAaC,kBAMnD,OAJID,GAAgBA,EAAaymB,SAC5B0L,EAA6Ch3B,GAAK6E,EAAa,GAAG7E,IAGhExF,EAAK8iD,2BAA2BtmB,EAAa96B,EAA7C1B,CAAsD0D,KAIrE++C,EAAAjjD,UAAA68B,mBAAA,SACIhyB,EACA3I,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/B,IAAM+E,EAAWjD,EAAMG,WAAW8C,SAASC,cAE3C,IAAKD,IAAaA,EAASnB,GACvB,MAAM,IAAIjB,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpDxF,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsBQ,8BAEjD1jD,EAAK0iD,0BAA0BrmB,mBAAmB11B,EAASnB,GAAI6E,EAAc3I,GACxEO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsBhX,4BAA6B9pC,IAC9ER,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkB4kD,EAAA,EAAsBS,yBAA0BzhD,UAKjGugD,EAAAjjD,UAAA+8B,kBAAA,SACIC,EACA96B,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/B,IAAM+E,EAAWjD,EAAMG,WAAW8C,SAASC,cAE3C,IAAKD,IAAaA,EAASnB,GACvB,MAAM,IAAIjB,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAM67C,GAAoBz9C,GAAIg3B,EAAYh3B,IAE1C5D,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsBU,gCAA4Bh/C,EAAWq+C,IAExFjjD,EAAK0iD,0BAA0BnmB,kBAAkB51B,EAASnB,GAAIg3B,EAAa96B,GACtEO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsB/W,2BAA4B/pC,EAAM6gD,IACnFrhD,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkB4kD,EAAA,EAAsBW,wBAAyB3hD,EAAU+gD,UAK1GR,EAAAjjD,UAAA88B,kBAAA,SACI5H,EACAhzB,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/B,IAAM+E,EAAWjD,EAAMG,WAAW8C,SAASC,cACrCq8C,GAAoBz9C,GAAIkvB,GAE9B,IAAK/tB,IAAaA,EAASnB,GACvB,MAAM,IAAIjB,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpDxF,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsBY,gCAA4Bl/C,EAAWq+C,IAExFjjD,EAAK0iD,0BAA0BpmB,kBAAkB31B,EAASnB,GAAIkvB,EAAehzB,GACxEO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsB9W,2BAA4BhqC,EAAM6gD,IACnFrhD,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkB4kD,EAAA,EAAsBa,wBAAyB7hD,EAAU+gD,UAK1GR,EAAAjjD,UAAAs9B,qBAAA,SACIN,EACA96B,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GAAS,OAAA/B,EAAA,WAAWzC,OAAO,SAAC0C,GAC/B,IAAM+E,EAAWjD,EAAMG,WAAW8C,SAASC,cAE3C,IAAKD,IAAaA,EAASnB,GACvB,MAAM,IAAIjB,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAM67C,GAAoBz9C,GAAIg3B,EAAYh3B,IAE1C5D,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsBC,mCAA+Bv+C,EAAWq+C,IAE3FjjD,EAAK0iD,0BAA0BnmB,kBAAkB51B,EAASnB,GAAIg3B,EAAa96B,GACtEO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAwD,EAAA,aAAAxD,CAAa4kD,EAAA,EAAsB7W,8BAA+BjqC,EAAM6gD,IACtFrhD,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAwD,EAAA,kBAAAxD,CAAkB4kD,EAAA,EAAsBE,2BAA4BlhD,EAAU+gD,UAKrGR,EAAAjjD,UAAAsjD,2BAAR,SACItmB,EACA96B,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GACH,IAAMiD,EAAWjD,EAAMG,WAAW8C,SAASC,cAE3C,IAAKD,IAAaA,EAASnB,GACvB,MAAM,IAAIjB,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,OAAIpH,EAAKgkD,4BAA4BxnB,GAC1Bx8B,EAAKu8B,kBAAkBC,EAAa96B,EAApC1B,CAA6C0D,GAGjD1D,EAAKq8B,oBAAoBG,GAAc96B,EAAvC1B,CAAgD0D,KAIvD++C,EAAAjjD,UAAAikD,2BAAR,SACIt5C,EACAzG,GAEA,IACMoE,EADQpE,EAAMG,WACDiE,KAAK6kB,UAExB,IAAK7kB,EACD,MAAM,IAAIvD,EAAA,EAAiBA,EAAA,EAAqBqoB,aAGpD,OACIziB,gBAAeA,EACfwpC,WAAY7rC,EAAK6rC,WAAa7rC,EAAK6rC,UAAU4B,mBACxChoB,IAAI,SAAAuc,GAAQ,OACTma,OAAQna,EAAKtkC,GACbkoC,SAAU5D,EAAK4D,cAMvB+U,EAAAjjD,UAAAqjD,iBAAR,SACIlP,EACAnX,EACA10B,GAEA,IAAKA,EACD,MAAM,IAAIvD,EAAA,EAAiBA,EAAA,EAAqBqoB,aAGpD,OAAO3sB,KAAKikD,kBAAkB1nB,EAAY2nB,YAAar8C,GAAMylB,IAAI,SAAA62B,GAC7D,IAAMC,EAAa1Q,EAAU2Q,KAAK,SAAA9O,GAAY,OAAAA,EAASyO,SAAWG,EAAaH,SAE/E,OAAA9gD,EAAA,YACOihD,GACH1W,SAAU2W,EAAcD,EAAa1W,SAAW2W,EAAW3W,SAAY0W,EAAa1W,aAEzFlT,OAAO,SAAAgb,GAAY,OAAAA,EAAS9H,SAAW,KAGtC+U,EAAAjjD,UAAAujD,cAAR,SACIpP,EACAnX,EACA10B,GAEA,IAAK00B,EACD,OAAOmX,EAGX,IAAK7rC,EACD,MAAM,IAAIvD,EAAA,EAAiBA,EAAA,EAAqBqoB,aAGpD,OAAO+mB,EACFpZ,OAAOt6B,KAAKikD,kBAAkB1nB,EAAY2nB,YAAar8C,IACvD0yB,OAAO,SAAAgb,GAAY,OAAAA,EAAS9H,SAAW,KAGxC+U,EAAAjjD,UAAA0kD,kBAAR,SAA0BC,EAAuBr8C,GAC7C,OAAOq8C,EAAY52B,IAAI,SAAA02B,GACnB,IAAMna,EAAOhiC,EAAK6rC,UAAU4B,cAAc+O,KAAK,SAAA9O,GAAY,OAAAA,EAAShwC,KAAOy+C,IAE3E,OACIA,OAAMA,EACNvW,SAAU5D,EAAOA,EAAK4D,SAAW,MAKrC+U,EAAAjjD,UAAAwkD,4BAAR,SACIj4C,GAIA,QAFsBA,EAECvG,IAE/Bi9C,EA7VA,wBC/BA9kD,EAAAD,QAAAkC,QAAA,kGCIc,SAAA2kD,EAAyBC,EAA4BC,GAC/D,OAAOnmD,OAAAomD,EAAA,QAAApmD,CAAQqmD,EAAUH,GAAWG,EAAUF,IAGlD,SAAAE,EAAmBnyC,GACf,OAAOlU,OAAAomD,EAAA,OAAApmD,EACH+xB,UAAW7d,EAAQ6d,UACnBC,SAAU9d,EAAQ8d,SAClBC,QAAS/d,EAAQ+d,QACjBzO,SAAUtP,EAAQsP,SAClBC,SAAUvP,EAAQuP,SAClByO,KAAMhe,EAAQge,KACdC,gBAAiBje,EAAQie,gBACzB7gB,YAAa4C,EAAQ5C,YACrBmL,WAAYvI,EAAQuI,WACpB4V,MAAOne,EAAQme,MACfC,aAAcpe,EAAQoe,cACvB8zB,EAAA,0BCrBP/mD,EAAAD,QAAAkC,QAAA,wCCAAjC,EAAAD,QAAAkC,QAAA,6ECUA,WAOI,SAAAglD,EACYC,EACAC,EACAC,EACAC,EACAC,GALZ,IAAAjlD,EAAAC,KACYA,KAAA4kD,iBACA5kD,KAAA6kD,mBACA7kD,KAAA8kD,iBACA9kD,KAAA+kD,oBACA/kD,KAAAglD,WAERhlD,KAAKilD,aAAc,EAEfjlD,KAAKglD,SAASE,YACdllD,KAAK6kD,iBAAiBhJ,YAAYsJ,EAAA,EAA0BC,iBAAkBplD,KAAKglD,SAASE,YAG5FllD,KAAKglD,SAASh0C,SACdhR,KAAK6kD,iBAAiBhJ,YAAYsJ,EAAA,EAA0BE,cAAerlD,KAAKglD,SAASh0C,SAGzFhR,KAAKglD,SAASrxC,QACd3T,KAAK6kD,iBAAiBhJ,YAAYsJ,EAAA,EAA0BG,eAAgBtlD,KAAKglD,SAASrxC,QAG1F3T,KAAKglD,SAASO,aACdvlD,KAAK6kD,iBAAiBhJ,YAAYsJ,EAAA,EAA0BK,YAAaxlD,KAAKglD,SAASO,aAGvFvlD,KAAKglD,SAASS,WACdzlD,KAAK6kD,iBAAiBhJ,YAAYsJ,EAAA,EAA0BO,UAAW1lD,KAAKglD,SAASS,WAGzFzlD,KAAK6kD,iBAAiBhJ,YAAYsJ,EAAA,EAA0BK,YAAa,WAAM,OAAAzlD,EAAK4lD,qBA6D5F,OA1DIhB,EAAAplD,UAAAqmD,OAAA,eAAA7lD,EAAAC,KACI,OAAIA,KAAKilD,YACE34C,QAAQC,QAAQvM,OAG3BA,KAAKilD,aAAc,EACnBjlD,KAAK6kD,iBAAiBnJ,SACtB17C,KAAK+kD,kBAAkBc,KAAK7lD,KAAKglD,SAAStiB,aAEnC1iC,KAAK4kD,eAAekB,YAAY9lD,KAAKglD,SAAS1lB,IAAKt/B,KAAKglD,SAAStiB,aACnE1gC,KAAK,SAAAqf,GAMF,OALAthB,EAAKgmD,QAAU1kC,EAEfthB,EAAK4lD,mBACL5lD,EAAKglD,kBAAkBiB,OAEhBjmD,IAEVuC,MAAM,SAAAC,GAUH,MATAxC,EAAKklD,aAAc,EAEnBllD,EAAK8kD,iBAAiB3I,SAClBj8C,KAAMklD,EAAA,EAA0Bc,WAChCziD,QAASjB,IAGbxC,EAAKglD,kBAAkBiB,OAEjBzjD,MAIlBoiD,EAAAplD,UAAA2mD,OAAA,WACSlmD,KAAKilD,cAIVjlD,KAAKilD,aAAc,EACnBjlD,KAAK6kD,iBAAiBjJ,aAElB57C,KAAK+lD,SAAW/lD,KAAK+lD,QAAQ5e,aAC7BnnC,KAAK+lD,QAAQ5e,WAAWC,YAAYpnC,KAAK+lD,SACzC/lD,KAAK+lD,QAAQI,cAAcC,WAI3BzB,EAAAplD,UAAAomD,iBAAR,WACS3lD,KAAK+lD,SAAY/lD,KAAK+lD,QAAQM,eAAkBrmD,KAAKglD,SAASsB,SAInEtmD,KAAK8kD,eAAelI,UAAU58C,KAAK+lD,QAAQM,eAE3CrmD,KAAK8kD,eAAevqC,MAChBta,KAAMsmD,EAAA,EAAyBC,gBAC/BhjD,QAASxD,KAAKglD,SAASsB,WAGnC3B,EAjGA,0BCRM8B,GACFC,KAAM,GACNtjC,MAAO,UACPujC,gBAAiB,WAGfC,EAAqB,iDAE3B,WAKI,SAAAC,EACIplD,GAEAzB,KAAK8mD,QAAO5jD,EAAA,YAAQujD,EAAmBhlD,GAAWA,EAAQ6kD,QAE1DtmD,KAAK+mD,mBAEL/mD,KAAKgnD,WAAahnD,KAAKinD,kBACvBjnD,KAAKknD,WAAalnD,KAAKmnD,kBAEvBnnD,KAAKgnD,WAAWzf,YAAYvnC,KAAKknD,YA0FzC,OAvFIL,EAAAtnD,UAAAsmD,KAAA,SAAKuB,GACD,GAAIA,EAAU,CACV,IAAMC,EAASj2C,SAASC,eAAe+1C,GAEvC,IAAKC,EACD,MAAM,IAAIjnD,MAAM,8EAGpBinD,EAAO9f,YAAYvnC,KAAKgnD,YAG5BhnD,KAAKgnD,WAAW7rC,MAAMmsC,WAAa,UACnCtnD,KAAKgnD,WAAW7rC,MAAMosC,QAAU,KAGpCV,EAAAtnD,UAAAymD,KAAA,eAAAjmD,EAAAC,KACUwnD,EAAsB,WACxBznD,EAAKinD,WAAW7rC,MAAMmsC,WAAa,SAEnCvnD,EAAKinD,WAAW5oC,oBAAoB,gBAAiBopC,IAGzDxnD,KAAKgnD,WAAW9oC,iBAAiB,gBAAiBspC,GAElDxnD,KAAKgnD,WAAW7rC,MAAMosC,QAAU,KAG5BV,EAAAtnD,UAAA0nD,gBAAR,WACI,IAAMl2C,EAAYK,SAASsuB,cAAc,OAazC,OAXA3uB,EAAUoK,MAAMvL,QAAU,QAC1BmB,EAAUoK,MAAMssC,OAAS,IACzB12C,EAAUoK,MAAMusC,KAAO,IACvB32C,EAAUoK,MAAMwsC,OAAS,OACzB52C,EAAUoK,MAAMysC,MAAQ,OACxB72C,EAAUoK,MAAM0sC,SAAW,WAC3B92C,EAAUoK,MAAM2sC,MAAQ,IACxB/2C,EAAUoK,MAAMrF,IAAM,IACtB/E,EAAUoK,MAAM4sC,WAAa,qBAC7Bh3C,EAAUoK,MAAMosC,QAAU,IAEnBx2C,GAGH81C,EAAAtnD,UAAA4nD,gBAAR,WACI,IAAMa,EAAY52C,SAASsuB,cAAc,OAiBzC,OAfAsoB,EAAU7sC,MAAMvL,QAAU,QAC1Bo4C,EAAU7sC,MAAMysC,MAAW5nD,KAAK8mD,QAAQJ,KAAI,KAC5CsB,EAAU7sC,MAAMwsC,OAAY3nD,KAAK8mD,QAAQJ,KAAI,KAC7CsB,EAAU7sC,MAAM8sC,aAAkBjoD,KAAK8mD,QAAQJ,KAAI,KACnDsB,EAAU7sC,MAAM+sC,OAAS,YACzBF,EAAU7sC,MAAMgtC,YAAiBnoD,KAAK8mD,QAAQH,gBAAe,IAAI3mD,KAAK8mD,QAAQH,gBAAe,IAAI3mD,KAAK8mD,QAAQ1jC,MAAK,IAAIpjB,KAAK8mD,QAAQ1jC,MACpI4kC,EAAU7sC,MAAMitC,OAAS,SACzBJ,EAAU7sC,MAAM0sC,SAAW,WAC3BG,EAAU7sC,MAAMusC,KAAO,IACvBM,EAAU7sC,MAAM2sC,MAAQ,IACxBE,EAAU7sC,MAAMrF,IAAM,MACtBkyC,EAAU7sC,MAAMqd,UAAY,gCAC5BwvB,EAAU7sC,MAAMktC,eAAiB,cACjCL,EAAU7sC,MAAMmtC,UAAe1B,EAAkB,uDAE1CoB,GAGHnB,EAAAtnD,UAAAwnD,iBAAR,WAGI,IAAI31C,SAASC,eAAeu1C,GAA5B,CAIA,IAAMzrC,EAAQ/J,SAASsuB,cAAc,SAErCvkB,EAAM5V,GAAKqhD,EAEXx1C,SAASm3C,KAAKhhB,YAAYpsB,GAEtBA,EAAMqtC,iBAAiBC,eACvBttC,EAAMqtC,MAAME,WAAW,gCACN9B,EAAkB,yLAO/CC,EAzGA,qBCRA,SAAAhnD,GACI,SAAA8oD,EAAY7oD,GAAZ,IAAAC,EACIF,EAAA/B,KAAAkC,KAAMF,GAAW,uCAAqCE,YAEtDD,EAAKE,KAAO,mBAEpB,OANgDiD,EAAA,UAAAylD,EAAA9oD,GAMhD8oD,EANA,MAAgD,aCKhD,WACI,SAAAC,EACY5D,GAAAhlD,KAAAglD,WAsEhB,OAnEI4D,EAAArpD,UAAAumD,YAAA,SAAYxe,EAAa5E,GACrB,IAAM3xB,EAAYK,SAASC,eAAeqxB,GAClC9/B,GAAA5C,KAAAglD,cAAAniD,eAAA,IAAAD,EAAA,IAAAA,EAER,IAAKmO,EACD,MAAM,IAAI83C,EAAmB,gFAGjC,IAAMxnC,EAASjQ,SAASsuB,cAAc,UAUtC,OARAre,EAAOimB,IAAMA,EACbjmB,EAAOlG,MAAM+sC,OAAS,OACtB7mC,EAAOlG,MAAMvL,QAAU,OACvByR,EAAOlG,MAAMysC,MAAQ,OACrBvmC,EAAOynC,qBAAsB,EAE7B/3C,EAAUw2B,YAAYlmB,GAEfrhB,KAAK+oD,kBAAkB1nC,EAAQxe,GACjCP,MAAM,SAAAC,GAGH,MAFAwO,EAAUq2B,YAAY/lB,GAEhB9e,KAIVqmD,EAAArpD,UAAAwpD,kBAAR,SAA0B1nC,EAA2B2nC,GAGjD,OAAO,IAAI18C,QAAQ,SAACC,EAASC,GACzB,IAAM3J,EAAUqN,OAAO+4C,WAAW,WAC9Bz8C,EAAO,IAAIq8C,EAAmB,yEAC/BG,GAEGE,EAAgB,SAACrqC,GACnB,GAAIA,EAAMs9B,SAAW99C,OAAA8qD,EAAA,EAAA9qD,CAAYgjB,EAAOimB,OAIpCjpC,OAAA+qD,EAAA,EAAA/qD,CAAcwgB,EAAMzc,KAAM+iD,EAAA,EAA0Bc,cACpDvkC,IACAlV,EAAO,IAAIq8C,EAAmBhqC,EAAMzc,KAAKoB,QAAQ1D,WAGjDzB,OAAA+qD,EAAA,EAAA/qD,CAAcwgB,EAAMzc,KAAM+iD,EAAA,EAA0BK,cAAc,CAClEnkC,EAAOlG,MAAMvL,QAAU,GAEvB,IAAMy5C,EAAYxqC,EAAMzc,KAAKoB,SAAWqb,EAAMzc,KAAKoB,QAAQ6lD,UACrDC,EAAUjrD,OAAAkrD,EAAA,cAAAlrD,EACZmrD,WAAW,EACXC,WAAW,EACXC,wBAAyBL,EAAY,gBAAkB,iBACxDhoC,GAEHK,IACAnV,EAAQ+8C,EAAQA,EAAQz4B,OAAS,MAInCnP,EAAW,WACbxR,OAAOkO,oBAAoB,UAAW8qC,GACtCh5C,OAAOy5C,aAAa9mD,IAGxBqN,OAAOgO,iBAAiB,UAAWgrC,MAG/CN,EAxEA,GCwBc,SAAAgB,EAAwBnoD,GAClC,IAAM06C,EAAS99C,OAAA8qD,EAAA,EAAA9qD,CAAYoD,EAAQ69B,KASnC,OARyB,IAAIuqB,EACzB,IAAIC,EACJ,IAAIC,EAAA,EAA8C5N,GAClD,IAAI6N,EAAA,EAAwC7N,GAC5C,IAAI8N,GAAmB3D,OAAQ7kD,EAAQ6kD,QAAU7kD,EAAQ6kD,OAAO4D,mBAChEzoD,GAGoBmkD,+IC3B5BuE,EAAA,WACI,SAAAA,EACYC,EACAlzC,GADAlX,KAAAoqD,yBACApqD,KAAAkX,yBAqChB,OAlCIizC,EAAA5qD,UAAAk8B,eAAA,SACID,EACA/5B,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GAAS,OAAApF,OAAAgsD,EAAA,OAAAhsD,CACZA,OAAAisD,EAAA,GAAAjsD,CAAGA,OAAAi6C,EAAA,aAAAj6C,CAAaksD,EAAA,EAAmBC,0BACnCnsD,OAAAosD,EAAA,KAAApsD,CAAK0B,EAAKqqD,uBAAuB3uB,eAAeD,EAAa/5B,IACxDiE,KACGrH,OAAAqsD,EAAA,UAAArsD,CAAU,SAACuE,OAAET,EAAAS,EAAAT,KAAW,OAAA9D,OAAAgsD,EAAA,OAAAhsD,CACpB0B,EAAKmX,uBAAuBwC,oBAAoBjY,EAAhD1B,CAAyD0D,GACzDpF,OAAAisD,EAAA,GAAAjsD,CAAGA,OAAAi6C,EAAA,aAAAj6C,CAAaksD,EAAA,EAAmBI,wBAAyBxoD,EAAKC,YAG/EsD,KACErH,OAAAqsD,EAAA,WAAArsD,CAAW,SAAAkE,GAAS,OAAAlE,OAAAusD,EAAA,EAAAvsD,CAAiBksD,EAAA,EAAmBM,qBAAsBtoD,QAItF4nD,EAAA5qD,UAAAo8B,gBAAA,SACIl6B,GADJ,IAAA1B,EAAAC,KAGI,OAAO,SAAAyD,GAAS,OAAApF,OAAAgsD,EAAA,OAAAhsD,CACZA,OAAAisD,EAAA,GAAAjsD,CAAGA,OAAAi6C,EAAA,aAAAj6C,CAAaksD,EAAA,EAAmBO,2BACnCzsD,OAAAosD,EAAA,KAAApsD,CAAK0B,EAAKqqD,uBAAuBzuB,gBAAgBl6B,IAC5CiE,KACGrH,OAAAqsD,EAAA,UAAArsD,CAAU,SAACuE,OAAET,EAAAS,EAAAT,KAAW,OAAA9D,OAAAgsD,EAAA,OAAAhsD,CACpB0B,EAAKmX,uBAAuBwC,oBAAoBjY,EAAhD1B,CAAyD0D,GACzDpF,OAAAisD,EAAA,GAAAjsD,CAAGA,OAAAi6C,EAAA,aAAAj6C,CAAaksD,EAAA,EAAmBQ,yBAA0B5oD,EAAKC,YAGhFsD,KACErH,OAAAqsD,EAAA,WAAArsD,CAAW,SAAAkE,GAAS,OAAAlE,OAAAusD,EAAA,EAAAvsD,CAAiBksD,EAAA,EAAmBS,sBAAuBzoD,QAG3F4nD,EAxCA,uCCPA,IAAAc,EAAA,WACI,SAAAA,EACYvoD,GAAA1C,KAAA0C,iBAchB,OAXIuoD,EAAA1rD,UAAAk8B,eAAA,SAAeD,EAAkC54B,OAAEC,QAAA,IAAAD,QAAAC,QAG/C,OAAO7C,KAAK0C,eAAe6X,KAFf,qCAE2B1X,QAAOA,EAAEV,KAAMq5B,KAG1DyvB,EAAA1rD,UAAAo8B,gBAAA,SAAgB/4B,OAAEC,QAAA,IAAAD,QAAAC,QAGd,OAAO7C,KAAK0C,eAAem3C,OAFf,qCAE6Bh3C,QAAOA,KAExDooD,EAhBA,kFCLc,SAAAC,EAAmB7rD,EAAa8rD,GAC1C,OAAIjrB,MAAMC,QAAQ9gC,GACPA,EAAOiuB,IAAI,SAAA1uB,GAAS,OAAAssD,EAAStsD,EAAOusD,KAGzB,iBAAX9rD,EACAhB,OAAAomD,EAAA,UAAApmD,CAAUA,OAAAomD,EAAA,OAAApmD,CAAOgB,EAAQ8rD,GAAY,SAACvhB,EAAQhrC,EAAOM,GACxD0qC,EAAO1qC,GAAOgsD,EAAStsD,EAAOusD,QAI/B9rD,0DCPX+rD,EAAA,WACI,SAAAA,EACYn8B,GAAAjvB,KAAAivB,QAchB,OAXIm8B,EAAA7rD,UAAAmtB,QAAA,WACI,OAAO1sB,KAAKivB,MAAM7sB,MAGtBgpD,EAAA7rD,UAAA20B,aAAA,WACI,OAAOl0B,KAAKivB,MAAM5Y,OAAO00B,WAG7BqgB,EAAA7rD,UAAA23B,UAAA,WACI,QAASl3B,KAAKivB,MAAMmJ,SAASlB,WAdhBk0B,EAAY7qD,EAAA,YADhC0qC,EAAA,GACoBmgB,GAArB,2DCAAC,EAAA,WACI,SAAAA,EACYC,GAAAtrD,KAAAsrD,UAsBhB,OAnBID,EAAA9rD,UAAA+xB,WAAA,WACI,OAAOtxB,KAAKsrD,QAAQlpD,MAGxBipD,EAAA9rD,UAAAy1B,eAAA,WACI,OAAOh1B,KAAKsrD,QAAQj1C,OAAOk1C,mBAG/BF,EAAA9rD,UAAAw1B,cAAA,WACI,OAAO/0B,KAAKsrD,QAAQj1C,OAAOm1C,kBAG/BH,EAAA9rD,UAAAu4B,WAAA,WACI,QAAS93B,KAAKsrD,QAAQlzB,SAAS3B,kBAGnC40B,EAAA9rD,UAAAw4B,WAAA,WACI,QAAS/3B,KAAKsrD,QAAQlzB,SAAS1B,kBAtBlB20B,EAAc9qD,EAAA,YADlC0qC,EAAA,GACoBogB,GAArB,2DCAAI,EAAA,WACI,SAAAA,EACYl8B,GAAAvvB,KAAAuvB,YAMhB,OAHIk8B,EAAAlsD,UAAAsK,YAAA,WACI,OAAO7J,KAAKuvB,UAAUntB,MANTqpD,EAAgBlrD,EAAA,YADpC0qC,EAAA,GACoBwgB,GAArB,uCCJA,IAAAC,EAAA,WACI,SAAAA,EACY55B,GAAA9xB,KAAA8xB,sBAiEX,OA9DD45B,EAAAnsD,UAAA0zB,eAAA,SAAejvB,GACX,IAAIA,GAAYhE,KAAK8xB,oBAAoBzb,OAAOs1C,iBAAmB3nD,EAInE,OAAOhE,KAAK8xB,oBAAoBzb,OAAOu1C,aAG3CF,EAAAnsD,UAAA2zB,gBAAA,SAAgBlvB,GACZ,IAAIA,GAAYhE,KAAK8xB,oBAAoBzb,OAAOw1C,kBAAoB7nD,EAIpE,OAAOhE,KAAK8xB,oBAAoBzb,OAAOy1C,cAG3CJ,EAAAnsD,UAAAi1B,mBAAA,SAAmBxwB,GACf,IAAIA,GAAYhE,KAAK8xB,oBAAoBzb,OAAO+5B,qBAAuBpsC,EAIvE,OAAOhE,KAAK8xB,oBAAoBzb,OAAOs0B,iBAG3C+gB,EAAAnsD,UAAAwsD,0BAAA,SAA0B/nD,GACtB,IAAIA,GAAYhE,KAAK8xB,oBAAoBzb,OAAOq6B,4BAA8B1sC,EAI9E,OAAOhE,KAAK8xB,oBAAoBzb,OAAOs6B,wBAG3C+a,EAAAnsD,UAAAw2B,YAAA,SAAY/xB,GACR,QAAIA,GAAYhE,KAAK8xB,oBAAoBsG,SAASuzB,iBAAmB3nD,MAI5DhE,KAAK8xB,oBAAoBsG,SAASrC,aAG/C21B,EAAAnsD,UAAAy2B,aAAA,SAAahyB,GACT,QAAIA,GAAYhE,KAAK8xB,oBAAoBsG,SAASyzB,kBAAoB7nD,MAI7DhE,KAAK8xB,oBAAoBsG,SAASpC,cAG/C01B,EAAAnsD,UAAAi4B,eAAA,SAAexzB,GACX,QAAIA,GAAYhE,KAAK8xB,oBAAoBsG,SAASgY,qBAAuBpsC,MAIhEhE,KAAK8xB,oBAAoBsG,SAASZ,gBAG/Ck0B,EAAAnsD,UAAAy4B,oBAAA,SAAoBh0B,GAChB,QAAIA,GAAYhE,KAAK8xB,oBAAoBsG,SAASsY,4BAA8B1sC,MAIvEhE,KAAK8xB,oBAAoBsG,SAASJ,qBAC9C0zB,EAnEL,2DCIAM,EAAA,WACI,SAAAA,EACYC,GAAAjsD,KAAAisD,mBAsBhB,OAnBID,EAAAzsD,UAAAgyB,oBAAA,WACI,OAAOvxB,KAAKisD,iBAAiB7pD,MAGjC4pD,EAAAzsD,UAAAy1B,eAAA,WACI,OAAOh1B,KAAKisD,iBAAiB51C,OAAO61C,4BAGxCF,EAAAzsD,UAAAw1B,cAAA,WACI,OAAO/0B,KAAKisD,iBAAiB51C,OAAO81C,2BAGxCH,EAAAzsD,UAAAu4B,WAAA,WACI,QAAS93B,KAAKisD,iBAAiB7zB,SAASzB,2BAG5Cq1B,EAAAzsD,UAAAw4B,WAAA,WACI,QAAS/3B,KAAKisD,iBAAiB7zB,SAASxB,2BAtB3Bo1B,EAAuBzrD,EAAA,YAD3C0qC,EAAA,GACoB+gB,GAArB,2DCCAI,EAAA,WACI,SAAAA,EACYj9B,GAAAnvB,KAAAmvB,gBAYhB,OATIi9B,EAAA7sD,UAAA4K,mBAAA,WACI,IAAMC,EAAepK,KAAKmvB,cAAc/sB,KAExC,GAAKgI,GAAiBA,EAAa,GAInC,OAAOA,EAAa,GAAGF,iBAZVkiD,EAAuB7rD,EAAA,YAD3C0qC,EAAA,GACoBmhB,GAArB,2DCDAC,EAAA,WACI,SAAAA,EACYr8B,GAAAhwB,KAAAgwB,qBAchB,OAXIq8B,EAAA9sD,UAAA0xB,qBAAA,WACI,OAAOjxB,KAAKgwB,mBAAmB5tB,MAGnCiqD,EAAA9sD,UAAA20B,aAAA,WACI,OAAOl0B,KAAKgwB,mBAAmB3Z,OAAO00B,WAG1CshB,EAAA9sD,UAAA23B,UAAA,WACI,QAASl3B,KAAKgwB,mBAAmBoI,SAASlB,WAd7Bm1B,EAAuB9rD,EAAA,YAD3C0qC,EAAA,GACoBohB,GAArB,2DCDAC,EAAA,WACI,SAAAA,EACYp6B,GAAAlyB,KAAAkyB,sBAkDhB,OA/CIo6B,EAAA/sD,UAAAq1B,sBAAA,SAAsB5wB,GAClB,IAAIA,GAAYhE,KAAKkyB,oBAAoB7b,OAAOk2C,wBAA0BvoD,EAI1E,OAAOhE,KAAKkyB,oBAAoB7b,OAAOm2C,oBAG3CF,EAAA/sD,UAAAm1B,qBAAA,SAAqB1wB,GACjB,IAAIA,GAAYhE,KAAKkyB,oBAAoB7b,OAAOo2C,uBAAyBzoD,EAIzE,OAAOhE,KAAKkyB,oBAAoB7b,OAAOq2C,mBAG3CJ,EAAA/sD,UAAAi1B,mBAAA,SAAmBxwB,GACf,IAAIA,GAAYhE,KAAKkyB,oBAAoB7b,OAAO+5B,qBAAuBpsC,EAIvE,OAAOhE,KAAKkyB,oBAAoB7b,OAAOs0B,iBAG3C2hB,EAAA/sD,UAAAo4B,kBAAA,SAAkB3zB,GACd,QAAIA,GAAYhE,KAAKkyB,oBAAoBkG,SAASm0B,wBAA0BvoD,MAInEhE,KAAKkyB,oBAAoBkG,SAAST,mBAG/C20B,EAAA/sD,UAAAk4B,kBAAA,SAAkBzzB,GACd,QAAIA,GAAYhE,KAAKkyB,oBAAoBkG,SAASq0B,uBAAyBzoD,MAIlEhE,KAAKkyB,oBAAoBkG,SAASX,mBAG/C60B,EAAA/sD,UAAAi4B,eAAA,SAAexzB,GACX,QAAIA,GAAYhE,KAAKkyB,oBAAoBkG,SAASgY,qBAAuBpsC,MAIhEhE,KAAKkyB,oBAAoBkG,SAASZ,gBAlD9B80B,EAAwB/rD,EAAA,YAD5C0qC,EAAA,GACoBqhB,GAArB,0ECMAK,EAAA,WACI,SAAAA,EACYx9B,EACAF,GADAjvB,KAAAmvB,gBACAnvB,KAAAivB,QAyIhB,OAtII09B,EAAAptD,UAAA8K,gBAAA,WACI,OAAOrK,KAAKmvB,cAAc/sB,MAG9BuqD,EAAAptD,UAAAqtD,mBAAA,SAAmBrnD,GACf,IAAM6E,EAAepK,KAAKmvB,cAAc/sB,KAExC,GAAKgI,GAAiBA,EAAaymB,OAInC,OAAOxyB,OAAAqsC,EAAA,KAAArsC,CAAK+L,GAAgB7E,GAAEA,KAGlConD,EAAAptD,UAAAojD,wBAAA,SAAwBpwC,GACpB,IAAMnI,EAAepK,KAAKmvB,cAAc/sB,KAExC,GAAKgI,GAAiBA,EAAaymB,OAInC,OAAOxyB,OAAAqsC,EAAA,KAAArsC,CAAK+L,EAAc,SAAAmyB,GACtB,OAAAl+B,OAAAwuD,EAAA,EAAAxuD,CAAek+B,EAAYryB,gBAAiBqI,MAIpDo6C,EAAAptD,UAAAgL,kBAAA,WACI,IAAMH,EAAepK,KAAKmvB,cAAc/sB,KAExC,GAAIgI,GAAgBA,EAAaymB,OAC7B,OAAOzmB,EAAa,GAAG4mB,wBAI/B27B,EAAAptD,UAAA20B,aAAA,WACI,OAAOl0B,KAAKmvB,cAAc9Y,OAAO00B,WAGrC4hB,EAAAptD,UAAAu1B,eAAA,WACI,OAAO90B,KAAKmvB,cAAc9Y,OAAOm0B,aAGrCmiB,EAAAptD,UAAAwzB,4BAAA,WACI,OAAO/yB,KAAKmvB,cAAc9Y,OAAOy2C,0BAGrCH,EAAAptD,UAAAwtD,mBAAA,WACI,IAAMllD,EAAO7H,KAAKivB,MAAMvC,UAExB,IAAK7kB,EACD,SAGJ,IAAMmlD,GAAuBhtD,KAAKqK,uBAAyBs/B,OACvD,SAACsjB,EAAS1wB,GAAgB,OAAA0wB,EAAQ3yB,OAAOiC,EAAY2nB,kBAIzD,OAAQr8C,EAAK6rC,UAAU4B,mBAAqB/a,OACxC,SAAAsP,GAAQ,OAAAmjB,EAAoB/W,QAAQpM,EAAKtkC,IAAgB,KAIjEonD,EAAAptD,UAAA60B,eAAA,SAAeK,GACX,OAAIA,EACOz0B,KAAKmvB,cAAc9Y,OAAO20B,YAAYvW,GAG1Cp2B,OAAAqsC,EAAA,KAAArsC,CAAK2B,KAAKmvB,cAAc9Y,OAAO20B,cAG1C2hB,EAAAptD,UAAAs1B,eAAA,SAAeJ,GACX,OAAIA,EACOz0B,KAAKmvB,cAAc9Y,OAAOy6B,YAAYrc,GAG1Cp2B,OAAAqsC,EAAA,KAAArsC,CAAK2B,KAAKmvB,cAAc9Y,OAAOy6B,cAG1C6b,EAAAptD,UAAA2tD,uBAAA,SAAuB36C,GACnB,IAAMgqB,EAAcv8B,KAAK2iD,wBAAwBpwC,GAEjD,OAAOgqB,EAAcv8B,KAAKo0B,eAAemI,EAAYh3B,IAAMvF,KAAK80B,kBAGpE63B,EAAAptD,UAAAo1B,6BAAA,SAA6BF,GACzB,OAAIA,EACOz0B,KAAKmvB,cAAc9Y,OAAO82C,0BAA0B14B,GAGxDp2B,OAAAqsC,EAAA,KAAArsC,CAAK2B,KAAKmvB,cAAc9Y,OAAO82C,4BAG1CR,EAAAptD,UAAA23B,UAAA,WACI,OAAiD,IAA1Cl3B,KAAKmvB,cAAciJ,SAASlB,WAGvCy1B,EAAAptD,UAAAs2B,yBAAA,WACI,OAAgE,IAAzD71B,KAAKmvB,cAAciJ,SAASvC,0BAGvC82B,EAAAptD,UAAAs4B,WAAA,WACI,OAAkD,IAA3C73B,KAAKmvB,cAAciJ,SAASP,YAGvC80B,EAAAptD,UAAA63B,WAAA,SAAW3C,GACP,OAAIA,GACiE,IAA1Dz0B,KAAKmvB,cAAciJ,SAAShB,WAAW3C,IAGM,IAAjDp2B,OAAAqsC,EAAA,KAAArsC,CAAK2B,KAAKmvB,cAAciJ,SAAShB,aAG5Cu1B,EAAAptD,UAAAq4B,WAAA,SAAWnD,GACP,OAAIA,GACiE,IAA1Dz0B,KAAKmvB,cAAciJ,SAASR,WAAWnD,IAGM,IAAjDp2B,OAAAqsC,EAAA,KAAArsC,CAAK2B,KAAKmvB,cAAciJ,SAASR,aAG5C+0B,EAAAptD,UAAA6tD,iBAAA,SAAiB76C,GACb,IAAMgqB,EAAcv8B,KAAK2iD,wBAAwBpwC,GAEjD,OAAOgqB,EAAcv8B,KAAKo3B,WAAWmF,EAAYh3B,IAAMvF,KAAK63B,cAGhE80B,EAAAptD,UAAAm4B,yBAAA,SAAyBjD,GACrB,OAAIA,GAC+E,IAAxEz0B,KAAKmvB,cAAciJ,SAASV,yBAAyBjD,IAGM,IAA/Dp2B,OAAAqsC,EAAA,KAAArsC,CAAK2B,KAAKmvB,cAAciJ,SAASV,2BA1I3Bi1B,EAAmBpsD,EAAA,YADvC8sD,EAAA,GACoBV,GAArB,2DCHAW,EAAA,WACI,SAAAA,EACY19B,EACAZ,EACAM,GAFAtvB,KAAA4vB,SACA5vB,KAAAgvB,kBACAhvB,KAAAsvB,WA8BhB,OA3BIg+B,EAAA/tD,UAAAwK,SAAA,WACY,IAAA3H,EAAApC,KAAA4vB,OAAAxtB,KACFsH,EAAiB1J,KAAKgvB,gBAAgBrlB,oBACtClC,EAAUzH,KAAKsvB,SAASgC,iBAE9B,GAAKlvB,GAASsH,EAId,OAAAnJ,EAAA,YACO6B,GACHsH,eAAcA,EACdjC,QAAOA,KAIf6lD,EAAA/tD,UAAA4L,aAAA,WACI,OAAOnL,KAAK4vB,OAAO7rB,MAGvBupD,EAAA/tD,UAAA20B,aAAA,WACI,OAAOl0B,KAAK4vB,OAAOvZ,OAAO00B,WAG9BuiB,EAAA/tD,UAAA23B,UAAA,WACI,QAASl3B,KAAK4vB,OAAOwI,SAASlB,WAhCjBo2B,EAAa/sD,EAAA,YADjC0qC,EAAA,GACoBqiB,GAArB,gICGMvtB,GACF1pB,UACA+hB,aAGU,SAAAm1B,EACV5pD,EACA2Q,GAQA,YATA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAA8sC,EAAA,gBAAA9sC,EACZ+D,KAAMgpC,EACN/0B,OAAQg1B,EACRjT,SAAUkT,GAGPC,CAAQ5nC,EAAO2Q,GAG1B,SAAA82B,EACIhpC,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAKutD,EAAA,EAAyB5hB,8BAC9B,KAAK6hB,EAAA,EAAmBhiB,sBACxB,KAAKiiB,EAAA,EAAsBzhB,4BAC3B,KAAKyhB,EAAA,EAAsBvhB,2BAC3B,KAAKuhB,EAAA,EAAsBxhB,2BAC3B,KAAKwhB,EAAA,EAAsBthB,8BAC3B,KAAKuhB,EAAA,EAAiB7hB,qBACtB,KAAK6hB,EAAA,EAAiB5hB,sBACtB,KAAK6hB,EAAA,EAA0BthB,8BAC/B,KAAKshB,EAAA,EAA0BrhB,+BAC3B,OAAOj4B,EAAO9Q,QAASjD,EAAA,YAAM6B,EAASkS,EAAO9Q,QAAQqE,MAASzF,EAElE,QACI,OAAOA,GAIf,SAAAkpC,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,MAA8B2H,EAAc3H,UAGpC9jB,EAAOrU,MACf,KAAKwtD,EAAA,EAAmB9gB,sBACpB,OAAApsC,EAAA,YAAY63B,GAAUlB,WAAW,IAErC,KAAKu2B,EAAA,EAAmB7gB,mBACxB,KAAK6gB,EAAA,EAAmBhiB,sBACpB,OAAAlrC,EAAA,YAAY63B,GAAUlB,WAAW,IAErC,QACI,OAAOkB,GAIf,SAAAiT,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,MAA0B0pB,EAAc1pB,QAGhC/B,EAAOrU,MACf,KAAKwtD,EAAA,EAAmB9gB,sBACxB,KAAK8gB,EAAA,EAAmBhiB,sBACpB,OAAAlrC,EAAA,YAAY8V,GAAQ00B,eAAWpmC,IAEnC,KAAK8oD,EAAA,EAAmB7gB,mBACpB,OAAArsC,EAAA,YAAY8V,GAAQ00B,UAAWz2B,EAAO9Q,UAE1C,QACI,OAAO6S,2GCxET0pB,GACF1pB,QACI82C,6BACAniB,eACA8F,gBAEJ1Y,UACIhB,cACAM,4BACAE,gBAIM,SAAAi2B,EACVlqD,EACA2Q,GAQA,YATA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAA8sC,EAAA,gBAAA9sC,EACZ+D,KAAMgpC,EACN/0B,OAAQg1B,EACRjT,SAAUkT,GAGPC,CAAQ5nC,EAAO2Q,GAG1B,SAAA82B,EACIhpC,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAK6tD,EAAA,EAAmBriB,sBACxB,KAAKsiB,EAAA,EAAsBzK,6BAC3B,KAAKyK,EAAA,EAAsB9hB,4BAC3B,KAAK8hB,EAAA,EAAsB7hB,2BAC3B,KAAK6hB,EAAA,EAAsB5hB,2BAC3B,KAAK4hB,EAAA,EAAsB3hB,8BACvB,OAAO93B,EAAO9Q,QAAU8Q,EAAO9Q,QAAQ4G,aAAehI,EAE1D,KAAK4rD,EAAA,EAAmBjD,yBACpB,SAEJ,QACI,OAAO3oD,GAIf,SAAAipC,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,MAAiC0pB,EAAc1pB,QAGvC/B,EAAOrU,MACf,KAAK6tD,EAAA,EAAmBnhB,sBACxB,KAAKmhB,EAAA,EAAmBriB,sBACxB,KAAKsiB,EAAA,EAAsBzK,6BAC3B,KAAKyK,EAAA,EAAsB3K,6BACvB,OAAA7iD,EAAA,YAAY8V,GAAQ00B,eAAWpmC,IAEnC,KAAKmpD,EAAA,EAAmBlhB,mBACxB,KAAKmhB,EAAA,EAAsBxK,0BACvB,OAAAhjD,EAAA,YAAY8V,GAAQ00B,UAAWz2B,EAAO9Q,UAE1C,KAAKuqD,EAAA,EAAsBtK,4BAC3B,KAAKsK,EAAA,EAAsB9hB,4BACvB,OAAA1rC,EAAA,YAAY8V,GAAQm0B,iBAAa7lC,IAErC,KAAKopD,EAAA,EAAsBrK,yBACvB,OAAAnjD,EAAA,YAAY8V,GAAQm0B,YAAal2B,EAAO9Q,UAE5C,KAAKuqD,EAAA,EAAsB7hB,2BAC3B,KAAK6hB,EAAA,EAAsBpK,2BAKvB,OAJIrvC,EAAOvQ,OACPsS,EAAO20B,YAAY12B,EAAOvQ,KAAKwB,SAAMZ,GAGlC0R,EAEX,KAAK03C,EAAA,EAAsBnK,wBAKvB,OAJItvC,EAAOvQ,OACPsS,EAAO20B,YAAY12B,EAAOvQ,KAAKwB,IAAM+O,EAAO9Q,SAGzC6S,EAEX,KAAK03C,EAAA,EAAsB5hB,2BAC3B,KAAK4hB,EAAA,EAAsBlK,2BAKvB,OAJIvvC,EAAOvQ,OACPsS,EAAOy6B,YAAYx8B,EAAOvQ,KAAKwB,SAAMZ,GAGlC0R,EAEX,KAAK03C,EAAA,EAAsBjK,wBAKvB,OAJIxvC,EAAOvQ,OACPsS,EAAOy6B,YAAYx8B,EAAOvQ,KAAKwB,IAAM+O,EAAO9Q,SAGzC6S,EAEX,KAAK03C,EAAA,EAAsB7K,8BAC3B,KAAK6K,EAAA,EAAsB3hB,8BAKvB,OAJI93B,EAAOvQ,OACPsS,EAAO82C,0BAA0B74C,EAAOvQ,KAAKwB,SAAMZ,GAGhD0R,EAEX,KAAK03C,EAAA,EAAsB5K,2BAKvB,OAJI7uC,EAAOvQ,OACPsS,EAAO82C,0BAA0B74C,EAAOvQ,KAAKwB,IAAM+O,EAAO9Q,SAGvD6S,EAEX,QACI,OAAOA,GAIf,SAAAi1B,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,MAAqC2H,EAAc3H,UAG3C9jB,EAAOrU,MACf,KAAK6tD,EAAA,EAAmBnhB,sBACpB,OAAApsC,EAAA,YAAY63B,GAAUlB,WAAW,IAErC,KAAK62B,EAAA,EAAsB3K,6BACvB,OAAA7iD,EAAA,YAAY63B,GAAUvC,0BAA0B,IAEpD,KAAKi4B,EAAA,EAAmBriB,sBACxB,KAAKqiB,EAAA,EAAmBlhB,mBACpB,OAAArsC,EAAA,YAAY63B,GAAUlB,WAAW,IAErC,KAAK62B,EAAA,EAAsBzK,6BAC3B,KAAKyK,EAAA,EAAsBxK,0BACvB,OAAAhjD,EAAA,YAAY63B,GAAUvC,0BAA0B,IAEpD,KAAKk4B,EAAA,EAAsBtK,4BACvB,OAAAljD,EAAA,YAAY63B,GAAUP,YAAY,IAEtC,KAAKk2B,EAAA,EAAsB9hB,4BAC3B,KAAK8hB,EAAA,EAAsBrK,yBACvB,OAAAnjD,EAAA,YAAY63B,GAAUP,YAAY,IAEtC,KAAKk2B,EAAA,EAAsBpK,2BAKvB,OAJIrvC,EAAOvQ,OACPq0B,EAAShB,WAAW9iB,EAAOvQ,KAAKwB,KAAM,GAGnC6yB,EAEX,KAAK21B,EAAA,EAAsB7hB,2BAC3B,KAAK6hB,EAAA,EAAsBnK,wBAKvB,OAJItvC,EAAOvQ,OACPq0B,EAAShB,WAAW9iB,EAAOvQ,KAAKwB,KAAM,GAGnC6yB,EAEX,KAAK21B,EAAA,EAAsBlK,2BAKvB,OAJIvvC,EAAOvQ,OACPq0B,EAASR,WAAWtjB,EAAOvQ,KAAKwB,KAAM,GAGnC6yB,EAEX,KAAK21B,EAAA,EAAsB5hB,2BAC3B,KAAK4hB,EAAA,EAAsBjK,wBAKvB,OAJIxvC,EAAOvQ,OACPq0B,EAASR,WAAWtjB,EAAOvQ,KAAKwB,KAAM,GAGnC6yB,EAEX,KAAK21B,EAAA,EAAsB7K,8BAKvB,OAJI5uC,EAAOvQ,OACPq0B,EAASV,yBAAyBpjB,EAAOvQ,KAAKwB,KAAM,GAGjD6yB,EAEX,KAAK21B,EAAA,EAAsB3hB,8BAC3B,KAAK2hB,EAAA,EAAsB5K,2BAKvB,OAJI7uC,EAAOvQ,OACPq0B,EAASV,yBAAyBpjB,EAAOvQ,KAAKwB,KAAM,GAGjD6yB,EAEX,QACI,OAAOA,4GC/LT2H,GACF1pB,UACA+hB,aAGU,SAAA61B,EACVtqD,EACA2Q,GAQA,YATA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAA8sC,EAAA,gBAAA9sC,EACZ+D,KAAMgpC,EACN/0B,OAAQg1B,EACRjT,SAAUkT,GAGPC,CAAQ5nC,EAAO2Q,GAG1B,SAAA82B,EACIhpC,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAK6tD,EAAA,EAAmBriB,sBACxB,KAAKyiB,EAAA,EAAiBpiB,qBACtB,KAAKoiB,EAAA,EAAiBniB,sBACtB,KAAKoiB,EAAA,EAAgBjQ,mBACjB,OAAO5pC,EAAO9Q,QAAU8Q,EAAO9Q,QAAQiE,QAAUrF,EAErD,QACI,OAAOA,GAIf,SAAAipC,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,UAGQ/B,EAAOrU,MACf,KAAKiuD,EAAA,EAAiBE,qBACtB,KAAKF,EAAA,EAAiBpiB,qBAClB,OAAAvrC,EAAA,YAAY8V,GAAQm1C,sBAAkB7mD,IAE1C,KAAKupD,EAAA,EAAiBG,kBAClB,OAAA9tD,EAAA,YAAY8V,GAAQm1C,iBAAkBl3C,EAAO9Q,UAEjD,KAAK0qD,EAAA,EAAiBI,sBACtB,KAAKJ,EAAA,EAAiBniB,sBAClB,OAAAxrC,EAAA,YAAY8V,GAAQk1C,uBAAmB5mD,IAE3C,KAAKupD,EAAA,EAAiBK,mBAClB,OAAAhuD,EAAA,YAAY8V,GAAQk1C,kBAAmBj3C,EAAO9Q,UAElD,QACI,OAAO6S,GAIf,SAAAi1B,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,UAGQ9jB,EAAOrU,MACf,KAAKiuD,EAAA,EAAiBE,qBAClB,OAAA7tD,EAAA,YAAY63B,GAAU3B,kBAAkB,IAE5C,KAAKy3B,EAAA,EAAiBpiB,qBACtB,KAAKoiB,EAAA,EAAiBG,kBAClB,OAAA9tD,EAAA,YAAY63B,GAAU3B,kBAAkB,IAE5C,KAAKy3B,EAAA,EAAiBI,sBAClB,OAAA/tD,EAAA,YAAY63B,GAAU1B,kBAAkB,IAE5C,KAAKw3B,EAAA,EAAiBniB,sBACtB,KAAKmiB,EAAA,EAAiBK,mBAClB,OAAAhuD,EAAA,YAAY63B,GAAU1B,kBAAkB,IAE5C,QACI,OAAO0B,4FChFT2H,KAEQ,SAAAyuB,EACV7qD,EACA2Q,GAMA,YAPA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAA8sC,EAAA,gBAAA9sC,EACZ+D,KAAMgpC,GAGHG,CAAQ5nC,EAAO2Q,GAG1B,SAAA82B,EACIhpC,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAK6tD,EAAA,EAAmBriB,sBACpB,OAAOn3B,EAAO9Q,QAASjD,EAAA,YAAM6B,EAASkS,EAAO9Q,QAAQoG,UAAaxH,EAEtE,QACI,OAAOA,mHCnBT29B,GACF1pB,UACA+hB,aAGU,SAAAq2B,EACV9qD,EACA2Q,GAQA,YATA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAA8sC,EAAA,gBAAA9sC,EACZ+D,KAAMgpC,EACN/0B,OAAQg1B,EACRjT,SAAUkT,GAGPC,CAAQ5nC,EAAO2Q,GAG1B,SAAA82B,EACIhpC,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAK6tD,EAAA,EAAmBriB,sBACxB,KAAKijB,EAAA,EAAsBziB,4BAC3B,KAAKyiB,EAAA,EAAsBxiB,2BAC3B,KAAKwiB,EAAA,EAAsBviB,2BAC3B,KAAKuiB,EAAA,EAAsBtiB,8BAC3B,KAAK8hB,EAAA,EAAiBpiB,qBACtB,KAAKoiB,EAAA,EAAiBniB,sBACtB,KAAK4iB,EAAA,EAA0BriB,8BAC/B,KAAKqiB,EAAA,EAA0BpiB,+BAC3B,OAAOj4B,EAAO9Q,QAAU8Q,EAAO9Q,QAAQmE,iBAAmBvF,EAE9D,QACI,OAAOA,GAIf,SAAAipC,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,MAAqC0pB,EAAc1pB,QAG3C/B,EAAOrU,MACf,KAAK0uD,EAAA,EAA0BC,8BAC/B,KAAKD,EAAA,EAA0BriB,8BAC3B,OAAA/rC,EAAA,YAAY8V,GAAQ81C,+BAA2BxnD,IAEnD,KAAKgqD,EAAA,EAA0BE,2BAC3B,OAAAtuD,EAAA,YAAY8V,GAAQ81C,0BAA2B73C,EAAO9Q,UAE1D,KAAKmrD,EAAA,EAA0BG,+BAC/B,KAAKH,EAAA,EAA0BpiB,+BAC3B,OAAAhsC,EAAA,YAAY8V,GAAQ61C,gCAA4BvnD,IAEpD,KAAKgqD,EAAA,EAA0BI,4BAC3B,OAAAxuD,EAAA,YAAY8V,GAAQ61C,2BAA4B53C,EAAO9Q,UAE3D,QACI,OAAO6S,GAIf,SAAAi1B,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,MAAyC2H,EAAc3H,UAG/C9jB,EAAOrU,MACf,KAAK0uD,EAAA,EAA0BC,8BAC3B,OAAAruD,EAAA,YAAY63B,GAAUzB,2BAA2B,IAErD,KAAKg4B,EAAA,EAA0BriB,8BAC/B,KAAKqiB,EAAA,EAA0BE,2BAC3B,OAAAtuD,EAAA,YAAY63B,GAAUzB,2BAA2B,IAErD,KAAKg4B,EAAA,EAA0BG,+BAC3B,OAAAvuD,EAAA,YAAY63B,GAAUxB,2BAA2B,IAErD,KAAK+3B,EAAA,EAA0BpiB,+BAC/B,KAAKoiB,EAAA,EAA0BI,4BAC3B,OAAAxuD,EAAA,YAAY63B,GAAUxB,2BAA2B,IAErD,QACI,OAAOwB,mGCvFT2H,GACF1pB,UACAtS,QACAq0B,aAGU,SAAA42B,EACVrrD,EACA2Q,GASA,YAVA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAA8sC,EAAA,gBAAA9sC,EACZ+D,KAAMgpC,EACN/0B,OAAQg1B,EACRtnC,KAAM47C,EACNvnB,SAAUkT,GAGPC,CAAQ5nC,EAAO2Q,GAG1B,SAAA82B,EACIhpC,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAKgvD,EAAA,EAAgB/Q,mBACrB,KAAK+Q,EAAA,EAAgBC,2BACjB,OAAO56C,EAAO9Q,QACRnF,OAAAmuC,EAAA,KAAAnuC,CAAIkC,EAAA,YAAM6B,EAASkS,EAAO9Q,UAAY,iBAAkB,YACxDpB,EAEV,QACI,OAAOA,GAIf,SAAAu9C,EACI57C,EACAuQ,GAEA,OAAQA,EAAOrU,MACf,KAAKgvD,EAAA,EAAgBE,uBACrB,KAAKF,EAAA,EAAgBviB,qBACjB,OAAOp4B,EAAO9Q,QAASjD,EAAA,YAChBwD,EACAuQ,EAAOvQ,MACVqrD,YAAa96C,EAAO9Q,QAAQsG,MAAMslD,YAClCC,WAAY/6C,EAAO9Q,QAAQsG,MAAMgD,MACjCjJ,QAASyQ,EAAO9Q,QAAQsG,OAASwK,EAAO9Q,QAAQsG,MAAMjG,UACtDE,EAER,QACI,OAAOA,GAIf,SAAAsnC,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,MAA2B0pB,EAAc1pB,QAGjC/B,EAAOrU,MACf,KAAKgvD,EAAA,EAAgBK,mBACrB,KAAKL,EAAA,EAAgB/Q,mBACrB,KAAK+Q,EAAA,EAAgBC,2BACrB,KAAKD,EAAA,EAAgBM,2BACjB,OAAAhvD,EAAA,YAAY8V,GAAQ00B,eAAWpmC,IAEnC,KAAKsqD,EAAA,EAAgBO,gBACrB,KAAKP,EAAA,EAAgBQ,wBACjB,OAAAlvD,EAAA,YAAY8V,GAAQ00B,UAAWz2B,EAAO9Q,UAE1C,QACI,OAAO6S,GAIf,SAAAi1B,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,MAA+B2H,EAAc3H,UAGrC9jB,EAAOrU,MACf,KAAKgvD,EAAA,EAAgBK,mBACrB,KAAKL,EAAA,EAAgBM,2BACjB,OAAAhvD,EAAA,YAAY63B,GAAUlB,WAAW,IAErC,KAAK+3B,EAAA,EAAgB/Q,mBACrB,KAAK+Q,EAAA,EAAgBO,gBACrB,KAAKP,EAAA,EAAgBC,2BACrB,KAAKD,EAAA,EAAgBQ,wBACjB,OAAAlvD,EAAA,YAAY63B,GAAUlB,WAAW,IAErC,QACI,OAAOkB,6EC1FD,SAAAs3B,EACVC,EACA9lB,EACAshB,GAEA,IAAM/qB,EAAQ/hC,OAAAomD,EAAA,UAAApmD,CAAUsxD,EAA4B,iBAAdxE,EAAyB9sD,OAAAomD,EAAA,OAAApmD,CAAO8sD,GAAaA,GAC7EyE,EAAeD,EAAK9Y,QAQ1B,OANe,IAAXzW,EACAwvB,EAASxrB,KAAKyF,GAEd+lB,EAASxvB,GAAS/hC,OAAAomD,EAAA,cAAApmD,CAAcwrC,GAAQxrC,OAAAomD,EAAA,OAAApmD,IAAWsxD,EAAMvvB,GAAQyJ,GAAQA,EAGtE+lB,2FCfL7vB,GACF1pB,UACA+hB,aAGU,SAAAy3B,EACVlsD,EACA2Q,GAQA,YATA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAA8sC,EAAA,gBAAA9sC,EACZgY,OAAQg1B,EACRjpC,KAAMgpC,EACNhT,SAAUkT,GAGPC,CAAQ5nC,EAAO2Q,GAG1B,SAAA82B,EACIhpC,EACAkS,GAEA,OAAQA,EAAOrU,MACf,KAAK6vD,EAAA,EAA0BC,+BAC3B,OAAOz7C,EAAO9Q,YAElB,QACI,OAAOpB,GAIf,SAAAipC,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,MAAqC0pB,EAAc1pB,QAG3C/B,EAAOrU,MACf,KAAK6vD,EAAA,EAA0BE,+BAC/B,KAAKF,EAAA,EAA0BC,+BAC3B,OAAAxvD,EAAA,YAAY8V,GAAQ00B,eAAWpmC,IAEnC,KAAKmrD,EAAA,EAA0BG,4BAC3B,OAAA1vD,EAAA,YAAY8V,GAAQ00B,UAAWz2B,EAAO9Q,UAE1C,QACI,OAAO6S,GAIf,SAAAi1B,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,MAAyC2H,EAAc3H,UAG/C9jB,EAAOrU,MACf,KAAK6vD,EAAA,EAA0BE,+BAC3B,OAAAzvD,EAAA,YAAY63B,GAAUlB,WAAW,IAErC,KAAK44B,EAAA,EAA0BC,+BAC/B,KAAKD,EAAA,EAA0BG,4BAC3B,OAAA1vD,EAAA,YAAY63B,GAAUlB,WAAW,IAErC,QACI,OAAOkB,2DClDf83B,EAAA,WACI,SAAAA,EACY7sD,GAAArD,KAAAqD,oBA+FhB,OA5FI6sD,EAAA3wD,UAAAm8B,OAAA,SAAOF,EAAkC/5B,GAAzC,IAAA1B,EAAAC,KACI,OAAOmwD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtB,IAAMqC,EAAWvC,GAAWA,EAAQuC,SAC9BD,GAASC,SAAQA,GAEvBrC,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAa+xD,EAAA,EAA2BC,qBAAiB1rD,EAAWZ,IAElFhE,EAAKsD,kBAAkB7E,IAAIwF,GACtB03B,OAAOF,EAAa/5B,GACpBO,KAAK,WACFL,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAa+xD,EAAA,EAA2BE,qBAAiB3rD,EAAWZ,IAClFpC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkB+xD,EAAA,EAA2BG,aAAchuD,EAAOwB,SAKjGmsD,EAAA3wD,UAAAq8B,QAAA,SAAQn6B,GAAR,IAAA1B,EAAAC,KACI,OAAOmwD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtB,IAAMqC,EAAWvC,GAAWA,EAAQuC,SAC9BD,GAASC,SAAQA,GAEvBrC,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAa+xD,EAAA,EAA2BI,sBAAkB7rD,EAAWZ,IAEnFhE,EAAKsD,kBAAkB7E,IAAIwF,GACtB43B,QAAQn6B,GACRO,KAAK,WACFL,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAa+xD,EAAA,EAA2BK,sBAAkB9rD,EAAWZ,IACnFpC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkB+xD,EAAA,EAA2BM,cAAenuD,EAAOwB,SAKlGmsD,EAAA3wD,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,OAAOmwD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtB,IAAMqC,EAAWvC,GAAWA,EAAQuC,SAC9BD,GAASC,SAAQA,GAEvBrC,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAa+xD,EAAA,EAA2BrqD,yBAAqBpB,EAAWZ,IAEtFhE,EAAKsD,kBAAkB7E,IAAIwF,GACtB8B,WAAWrE,GACXO,KAAK,WACFL,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAa+xD,EAAA,EAA2BpqD,yBAAqBrB,EAAWZ,IACtFpC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkB+xD,EAAA,EAA2BnqD,iBAAkB1D,EAAOwB,SAKrGmsD,EAAA3wD,UAAA2G,aAAA,SAAazE,GAAb,IAAA1B,EAAAC,KACI,OAAOmwD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtB,IAAMqC,EAAWvC,GAAWA,EAAQuC,SAC9BD,GAASC,SAAQA,GAEvBrC,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAa+xD,EAAA,EAA2BjqD,2BAAuBxB,EAAWZ,IAExFhE,EAAKsD,kBAAkB7E,IAAIwF,GACtBkC,aAAazE,GACbO,KAAK,WACFL,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAa+xD,EAAA,EAA2BhqD,2BAAuBzB,EAAWZ,IACxFpC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkB+xD,EAAA,EAA2B/pD,mBAAoB9D,EAAOwB,SAKvGmsD,EAAA3wD,UAAA+G,kBAAA,SAAkBpC,EAA4BzC,GAC1C,OAAO0uD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtB,IACMoC,GAASC,SADEvC,GAAWA,EAAQuC,UAGpCrC,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAa+xD,EAAA,EAA2B7pD,8BAA0B5B,EAAWZ,IAE3FG,IAASlC,KAAK,WACVL,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAa+xD,EAAA,EAA2B5pD,+BAA2B7B,EAAWZ,IAC5FpC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkB+xD,EAAA,EAA2B3pD,wBAAyBlE,EAAOwB,SAI5GmsD,EAjGA,kDCFAS,EAAA,WACI,SAAAA,EACY3gD,EACAC,QAAA,IAAAA,MAAAC,QADAlQ,KAAAgQ,gBACAhQ,KAAAiQ,UAsFhB,OAnFI0gD,EAAApxD,UAAAqxD,WAAA,eAAA7wD,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,yDACX7d,KAAK,WACF,IAAKjC,EAAKkQ,QAAQsL,YAAcxb,EAAKkQ,QAAQsL,UAAUgF,OACnD,MAAM,IAAIif,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQsL,UAAUgF,UAI1CowC,EAAApxD,UAAAsxD,QAAA,eAAA9wD,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,iEACX7d,KAAK,WACF,IAAKjC,EAAKkQ,QAAQsL,YAAcxb,EAAKkQ,QAAQsL,UAAU2E,aACnD,MAAM,IAAIsf,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQsL,UAAU2E,gBAI1CywC,EAAApxD,UAAAuxD,kBAAA,eAAA/wD,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,iEACX7d,KAAK,WACF,IAAKjC,EAAKkQ,QAAQsL,YAAcxb,EAAKkQ,QAAQsL,UAAUw1C,cACnD,MAAM,IAAIvxB,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQsL,UAAUw1C,iBAI1CJ,EAAApxD,UAAA4V,WAAA,eAAApV,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,yDACX7d,KAAK,WACF,IAAKjC,EAAKkQ,QAAQsL,YAAcxb,EAAKkQ,QAAQsL,UAAUnG,OACnD,MAAM,IAAIoqB,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQsL,UAAUnG,UAI1Cu7C,EAAApxD,UAAAyxD,mBAAA,eAAAjxD,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,kEACX7d,KAAK,WACF,IAAKjC,EAAKkQ,QAAQsL,YAAcxb,EAAKkQ,QAAQsL,UAAUwoB,eACnD,MAAM,IAAIvE,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQsL,UAAUwoB,kBAI1C4sB,EAAApxD,UAAA0xD,iBAAA,eAAAlxD,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,gEACX7d,KAAK,WACF,IAAKjC,EAAKkQ,QAAQsL,YAAcxb,EAAKkQ,QAAQsL,UAAU+B,aACnD,MAAM,IAAIkiB,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQsL,UAAU+B,gBAI1CqzC,EAAApxD,UAAA2xD,kBAAA,eAAAnxD,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,iEACX7d,KAAK,WACF,IAAKjC,EAAKkQ,QAAQsL,YAAcxb,EAAKkQ,QAAQsL,UAAU41C,cACnD,MAAM,IAAI3xB,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQsL,UAAU41C,iBAG9CR,EAzFA,2DCFAS,EAAA,WAaI,SAAAA,EACYC,GAAArxD,KAAAqxD,yBAPJrxD,KAAAsxD,mBAmIZ,OAzHIF,EAAA7xD,UAAAuG,WAAA,SAAW4J,GACP1P,KAAKuxD,aAAe7hD,GAGxB0hD,EAAA7xD,UAAA+gB,UAAA,eAAAvgB,EAAAC,KACI,IAAKA,KAAKuxD,aACN,MAAM,IAAIC,EAAA,EAAoBA,EAAA,EAAwBpiD,uBAQ1D,OALKpP,KAAKqM,UACNrM,KAAKqM,QAAUrM,KAAKqxD,uBAAuBT,aACtC5uD,KAAK,SAAAue,GAAU,OAAAA,EAAOthB,QAASwyD,cAAe1xD,EAAKwxD,kBAGrDvxD,KAAKqM,SAGhB+kD,EAAA7xD,UAAA4gB,UAAA,WASI,OARKngB,KAAK0xD,UACN1xD,KAAK0xD,QAAUplD,QAAQmN,KACnBzZ,KAAKsgB,YACLtgB,KAAKqxD,uBAAuBl8C,eAE/BnT,KAAK,SAACY,OAAC2d,EAAA3d,EAAA,GAAoB,OAAZA,EAAA,GAAmB3D,QAASshB,OAAMA,OAG/CvgB,KAAK0xD,SAGhBN,EAAA7xD,UAAAukC,kBAAA,WASI,OARK9jC,KAAKgkC,kBACNhkC,KAAKgkC,gBAAkB13B,QAAQmN,KAC3BzZ,KAAKsgB,YACLtgB,KAAKqxD,uBAAuBL,uBAE3BhvD,KAAK,SAACY,OAAC2d,EAAA3d,EAAA,GAA4B,OAApBA,EAAA,GAAmC3D,QAASshB,OAAMA,OAGnEvgB,KAAKgkC,iBAGhBotB,EAAA7xD,UAAAyhB,OAAA,WASI,OARKhhB,KAAK2xD,OACN3xD,KAAK2xD,KAAOrlD,QAAQmN,KAChBzZ,KAAKsgB,YACLtgB,KAAKqxD,uBAAuBR,YAE/B7uD,KAAK,SAACY,OAAC2d,EAAA3d,EAAA,GAA0B,OAAlBA,EAAA,GAA+B3D,QAASshB,OAAMA,OAG3DvgB,KAAK2xD,MAGhBP,EAAA7xD,UAAAiiB,iBAAA,SAAiB/f,GACb,IAAMi1C,EAAWj1C,GAAWA,EAAQ2T,OAAS,SAAW,UACpDw8C,EAAS5xD,KAAKsxD,gBAAgB5a,GAmBlC,OAjBKkb,IACDA,EAAStlD,QAAQmN,KACbzZ,KAAKsgB,YACLtgB,KAAKqxD,uBAAuBP,sBAE/B9uD,KAAK,SAACY,OAAC2d,EAAA3d,EAAA,GAA2B,OAAnBA,EAAA,GAAiC3D,OAAMsB,EAAA,UAAGggB,OAAMA,EAAEsxC,OAAO,GAASpwD,MACjFa,MAAM,SAAAC,GACH,GAAIA,GAAwB,qCAAfA,EAAM+T,KACf,OAASmL,gBAAY9c,EAAW+c,SAAU,WAAM,OAAApV,QAAQC,YAG5D,MAAMhK,IAGVvC,KAAKsxD,gBAAgB5a,GAAYkb,GAG9BA,GAGXR,EAAA7xD,UAAAuyD,gBAAA,WASI,OARK9xD,KAAK+xD,gBACN/xD,KAAK+xD,cAAgBzlD,QAAQmN,KACzBzZ,KAAKsgB,YACLtgB,KAAKqxD,uBAAuBJ,qBAE/BjvD,KAAK,SAACY,OAAC2d,EAAA3d,EAAA,GAA0B,OAAlBA,EAAA,GAA+B3D,QAASshB,OAAMA,OAG3DvgB,KAAK+xD,eAGhBX,EAAA7xD,UAAAyyD,0BAAA,WASI,OARKhyD,KAAKiyD,aACNjyD,KAAKiyD,WAAa3lD,QAAQmN,KACtBzZ,KAAKsgB,YACLtgB,KAAKqxD,uBAAuBH,sBAE3BlvD,KAAK,SAACY,OAAC2d,EAAA3d,EAAA,GAAuB,OAAfA,EAAA,GAAyB3D,QAASshB,OAAMA,OAGzDvgB,KAAKiyD,YAGhBb,EAAA7xD,UAAAmiB,SAAA,eAAA3hB,EAAAC,KACI,OAAOsM,QAAQmN,KACXzZ,KAAKkyD,UAAUlyD,KAAK2xD,MACpB3xD,KAAKkyD,UAAUlyD,KAAKsxD,gBAAgBziB,SACpC7uC,KAAKkyD,UAAUlyD,KAAKsxD,gBAAgBl8C,QACpCpV,KAAKkyD,UAAUlyD,KAAK+xD,eACpB/xD,KAAKkyD,UAAUlyD,KAAKiyD,cACrBjwD,KAAK,WACJjC,EAAK4xD,UAAOhtD,EACZ5E,EAAKgyD,mBAAgBptD,EACrB5E,EAAKuxD,mBACLvxD,EAAKkyD,gBAAattD,KAIlBysD,EAAA7xD,UAAA2yD,UAAR,SAAkBx0D,GACd,OAAOA,EACHA,EAAOsE,KAAK,SAAAmwD,GAAO,OAAAA,EAAIzwC,aACvBpV,QAAQC,WAEpB6kD,EA1IA,oFCRc,SAAAgB,EAAgCxoD,EAAoBF,GAC9D,IAAM0mB,EAAYxmB,EAASwmB,WAAa1mB,EAAe0mB,WAAa,GAC9DC,EAAWzmB,EAASymB,UAAY3mB,EAAe2mB,UAAY,GAEjE,OACIgV,WAAYz7B,EAASy7B,eAAiB/X,IAAI,SAAA/a,GAAW,OAAAlU,OAAAg0D,EAAA,EAAAh0D,CAAqBkU,KAC1Eqa,WAAYhjB,EAASrE,GACrB+sD,QAAS1oD,EAAS0oD,QAClB1iB,YAAahmC,EAASgmC,YACtBvJ,MAAOz8B,EAASy8B,OAAS38B,EAAe28B,OAAS,GACjDjW,UAASA,EACTC,SAAQA,EACRnyB,KAAM0L,EAAS2oD,WAAaniC,EAAWC,GAAU3iB,KAAK,qCClB9D,IAAA8kD,EAAA,WACI,SAAAA,EAAoBC,GAAAzyD,KAAAyyD,MAKxB,OAHID,EAAAjzD,UAAA+tC,UAAA,SAAUnzB,GACN,OAAOu4C,KAAKC,MAAMx4C,EAASu4C,KAAKE,IAAI,GAAI5yD,KAAKyyD,OAErDD,EANA,uCCGAj1D,EAAAU,EAAAoD,EAAA,sBAAAwxD,IAAA,IAAMC,GACF,oBACA,sBACA,qBACA,oBACA,iBAGU,SAAAD,EAA8Blf,GACxC,OACIr9B,KAAMq9B,EAAOr9B,KACb82B,SAAUuG,EAAOof,YACjBxe,aAAcue,EAAY7c,QAAQtC,EAAOqf,4CCZnC,SAAAC,EAAuCte,GACjD,OACIr+B,KAAMq+B,EAAgBr+B,KACtBs9B,iBAAkBe,EAAgBG,KAClCoe,iBAAkBve,EAAgBwe,UAClCxe,iBACIye,QAASze,EAAgBye,QACzB98C,KAAMq+B,EAAgBr+B,KACtB+8C,aAAc1e,EAAgB0e,wJCC5B,SAAAC,EAA6BxpD,EAAcoB,QAAA,IAAAA,UACrD,IAAMu+B,EAAgB3/B,EAAMiQ,SAAS0vB,cAC/BuD,EAAoB,IAAIumB,EAAA,EAAkB9pB,GAEhD,OACIlkC,GAAIuE,EAAMlD,QACVgoC,MAAOvwC,OAAAm1D,EAAA,EAAAn1D,CAAuByL,EAAM4pC,UAAW5pC,EAAMiQ,SAAS0vB,cAAe,aAC7E7iC,QAASkD,EAAMlD,QACfmT,SAAUjQ,EAAMiQ,SAASzD,KACzBm9C,qBAAsB3pD,EAAM2pD,qBAC5B5vD,QAuFR,SAAkCgsC,EAA0BhsC,QAAA,IAAAA,UACxD,IAAMgmC,EAAOxrC,OAAAomD,EAAA,KAAApmD,CAAKwxC,EAAU6jB,GAE5B,IAAK7pB,EACD,SAGJ,OACItkC,GAAIskC,EAAKvkC,WACToH,OAAQinD,EAA2B9pB,EAAK6F,OAAOC,MAC/CikB,SAAU/pB,EAAK6F,OAAOmkB,aACtBC,UAAWjwD,EAAQiwD,WAlGVC,CAAyBjqD,EAAM+lC,SAAU3kC,EAAUrH,SAC5DwW,UACIF,OAAQrQ,EAAMkqD,WACd3mB,cAAeL,EAAkBM,UAAUxjC,EAAMkqD,aAErDrgB,QACIC,iBAAkBv1C,OAAAomD,EAAA,OAAApmD,CAAOyL,EAAMrC,QAAS,SAACosC,EAAKF,GAC1C,OAAOE,EAAMF,EAAOC,kBACrB,GACHnsC,QAASqC,EAAMrC,QAAQ6lB,IAAI2mC,EAAA,IAE/B7mB,UACIjzB,OAAQrQ,EAAMkpC,eACd3F,cAAeL,EAAkBM,UAAUxjC,EAAMkpC,iBAErDlmC,MAAO5B,EAAUmkD,WACjBD,YAAalkD,EAAUkkD,YACvBrb,yBACAY,gBAmDR,SAA+B9E,GAC3B,IAAMjB,EAAQvwC,OAAAomD,EAAA,OAAApmD,CAAOwxC,GAAYvqC,WAAY,oBAE7C,OACIsvC,sBAAuBv2C,OAAAomD,EAAA,OAAApmD,CAAOuwC,EAAO,SAACiF,EAAKhK,GAAS,OAAAA,EAAK1vB,OAAS05B,GAAK,GACvEkB,wBAAyB12C,OAAAomD,EAAA,MAAApmD,CAAMuwC,EAAMthB,IAAI,SAAAuc,GAAQ,OAC7CvzB,KAAMuzB,EAAK6F,OAAOp5B,KAClBs9B,iBAAkB/J,EAAK1vB,OACvB+4C,iBAAkBrpB,EAAK6F,OAAOyjB,UAC9Bxe,iBACIye,QAASvpB,EAAK1vB,OAAS0vB,EAAK6F,OAAOyjB,UACnC78C,KAAMuzB,EAAK6F,OAAOp5B,KAClB+8C,aAAc,OAEjB,SAjEYa,CAAsBpqD,EAAM+lC,UAC7CskB,WAuFR,SAAqCrqD,GACjC,IAAMsqD,KAUN,OAROtqD,EAAM4pC,UAAU4B,cAAahb,OAC7BxwB,EAAM4pC,UAAU2gB,cAGjBngB,QAAQ,SAAArK,GACVuqB,EAAiBvqB,EAAKtkC,IAM9B,SAAiCgwC,GAG7B,OAFe,KAAM,KAAM,MAEd5L,OAAO,SAACwqB,EAAY79C,GAC7B,IAAMuzB,EAAO0L,EAAS+e,aAAe/e,EAAS+e,YAAYjQ,KAAK,SAAAxa,GAAQ,OAAAA,EAAKvzB,OAASA,IAErF,OAAKuzB,GAILsqB,EAAW79C,IACPpY,KAAMq3C,EAASr3C,KACf28C,YAAatF,EAASr3C,KACtBq2D,MAAOhf,EAASrI,SAChB5N,IAAKuK,EAAK2qB,KACVC,UAAW5qB,EAAK4K,KAChBigB,YAAa7qB,EAAK2qB,KAClBG,YAAa9qB,EAAK+qB,QAClBC,YAAahrB,EAAKvzB,MAGf69C,GAdIA,OAbiBW,CAAwBjrB,KAGjDuqB,EAlGSW,CAA4BjrD,GACxC4C,OAAQ5C,EAAM4C,OACdsoD,gBAAiBlrD,EAAMkrD,gBACvBC,eAAgBnrD,EAAMmrD,eACtBC,WAAYprD,EAAMorD,WAClBjgB,UACI96B,OAAQrQ,EAAMorC,kBACd7H,cAAeL,EAAkBM,UAAUxjC,EAAMorC,mBACjDC,qBAAsBrrC,EAAMsrC,2BAC5BC,4BAA6BrI,EAAkBM,UAAUxjC,EAAMsrC,6BAEnExF,aACIz1B,OAgCZ,SAA0B01B,GACtB,IAAMhG,EAAOxrC,OAAAomD,EAAA,KAAApmD,CAAKwxC,GAAYvqC,WAAY,gBAE1C,OAAOukC,EAAOA,EAAK1vB,OAAS,EAnCZg7C,CAAiBrrD,EAAM+lC,WAEnC8F,MAAO7rC,EAAM6rC,MACbC,UACIz7B,OAAQrQ,EAAM+rC,kBACdxI,cAAeL,EAAkBM,UAAUxjC,EAAM+rC,oBAErDtuC,YACI4S,OAAQrQ,EAAMsrD,YACd/nB,cAAevjC,EAAMurD,uBAmBjC,SAAA1B,EAAoCjnD,GAChC,MAAO,kBAAkBA,EA0C7B,SAAAgnD,EAA+B7vD,GAC3B,MAA8B,oBAAvBA,EAAQyB,YAA2D,gBAAvBzB,EAAQyB,mEClGlDy6B,GACT1pB,UACA+hB,aCxBU,SAAAk9B,EACV3xD,EACA2Q,GAOA,YARA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAAwD,EAAA,gBAAAxD,EACZgY,OAAQg1B,EACRjT,SAAUkT,GAGPC,CAAQ5nC,EAAO2Q,GAG1B,SAAA+2B,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,MAAsC0pB,EAAc1pB,QAG5C/B,EAAOrU,MACf,KAAKs1D,EAAA,EAA2BxvD,oBAChC,KAAKwvD,EAAA,EAA2BvvD,oBAC5B,OAAA9C,EAAA,YACOmT,GACHs0B,qBAAiBhmC,EACjByrC,wBAAoBzrC,IAG5B,KAAK4wD,EAAA,EAA2BtvD,iBAC5B,OAAA/C,EAAA,YACOmT,GACHs0B,gBAAiBr2B,EAAO9Q,QACxB4sC,mBAAoB97B,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGvD,KAAKuxD,EAAA,EAA2BpvD,sBAChC,KAAKovD,EAAA,EAA2BnvD,sBAC5B,OAAAlD,EAAA,YACOmT,GACHu0B,uBAAmBjmC,EACnBu7C,0BAAsBv7C,IAG9B,KAAK4wD,EAAA,EAA2BlvD,mBAC5B,OAAAnD,EAAA,YACOmT,GACHu0B,kBAAmBt2B,EAAO9Q,QAC1B08C,qBAAsB5rC,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGzD,KAAKuxD,EAAA,EAA2BC,uBAChC,KAAKD,EAAA,EAA2BE,uBAC5B,OAAAvyD,EAAA,YACOmT,GACHm2C,wBAAoB7nD,EACpB4nD,2BAAuB5nD,IAG/B,KAAK4wD,EAAA,EAA2BG,oBAC5B,OAAAxyD,EAAA,YACOmT,GACHm2C,mBAAoBl4C,EAAO9Q,QAC3B+oD,sBAAuBj4C,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAG1D,KAAKuxD,EAAA,EAA2BI,sBAChC,KAAKJ,EAAA,EAA2BK,sBAC5B,OAAA1yD,EAAA,YACOmT,GACHq2C,uBAAmB/nD,EACnB8nD,0BAAsB9nD,IAG9B,KAAK4wD,EAAA,EAA2BM,mBAC5B,OAAA3yD,EAAA,YACOmT,GACHq2C,kBAAmBp4C,EAAO9Q,QAC1BipD,qBAAsBn4C,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGzD,QACI,OAAOqS,GAIf,SAAAi1B,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,MAA0C2H,EAAc3H,UAGhD9jB,EAAOrU,MACf,KAAKs1D,EAAA,EAA2BxvD,oBAC5B,OAAA7C,EAAA,YACOk1B,GACHZ,gBAAgB,EAChB4Y,mBAAoB97B,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGvD,KAAKuxD,EAAA,EAA2BtvD,iBAChC,KAAKsvD,EAAA,EAA2BvvD,oBAC5B,OAAA9C,EAAA,YACOk1B,GACHZ,gBAAgB,EAChB4Y,wBAAoBzrC,IAG5B,KAAK4wD,EAAA,EAA2BpvD,sBAC5B,OAAAjD,EAAA,YACOk1B,GACH8J,kBAAkB,EAClBge,qBAAsB5rC,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGzD,KAAKuxD,EAAA,EAA2BlvD,mBAChC,KAAKkvD,EAAA,EAA2BnvD,sBAC5B,OAAAlD,EAAA,YACOk1B,GACH8J,kBAAkB,EAClBge,0BAAsBv7C,IAG9B,KAAK4wD,EAAA,EAA2BC,uBAC5B,OAAAtyD,EAAA,YACOk1B,GACHT,mBAAmB,EACnB40B,sBAAuBj4C,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAG1D,KAAKuxD,EAAA,EAA2BG,oBAChC,KAAKH,EAAA,EAA2BE,uBAC5B,OAAAvyD,EAAA,YACOk1B,GACHT,mBAAmB,EACnB40B,2BAAuB5nD,IAG/B,KAAK4wD,EAAA,EAA2BI,sBAC5B,OAAAzyD,EAAA,YACOk1B,GACHX,mBAAmB,EACnBg1B,qBAAsBn4C,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGzD,KAAKuxD,EAAA,EAA2BM,mBAChC,KAAKN,EAAA,EAA2BK,sBAC5B,OAAA1yD,EAAA,YACOk1B,GACHX,mBAAmB,EACnBg1B,0BAAsB9nD,IAG9B,QACI,OAAOyzB,0FC1HF2H,GACT1pB,UACA+hB,aC5BU,SAAA09B,EACVnyD,EACA2Q,GAOA,YARA,IAAA3Q,MAAAo8B,GAGgB1hC,OAAAwD,EAAA,gBAAAxD,EACZgY,OAAQg1B,EACRjT,SAAUkT,GAGPC,CAAQ5nC,EAAO2Q,GAG1B,SAAA+2B,EACIh1B,EACA/B,GAEA,YAHA,IAAA+B,MAAsC0pB,EAAc1pB,QAG5C/B,EAAOrU,MACf,KAAK81D,EAAA,EAA2BhwD,oBAChC,KAAKgwD,EAAA,EAA2B/vD,oBAC5B,OAAA9C,EAAA,YACOmT,GACHs0B,qBAAiBhmC,EACjByrC,wBAAoBzrC,IAG5B,KAAKoxD,EAAA,EAA2B9vD,iBAC5B,OAAA/C,EAAA,YACOmT,GACHs0B,gBAAiBr2B,EAAO9Q,QACxB4sC,mBAAoB97B,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGvD,KAAK+xD,EAAA,EAA2B5vD,sBAChC,KAAK4vD,EAAA,EAA2B3vD,sBAC5B,OAAAlD,EAAA,YACOmT,GACHu0B,uBAAmBjmC,EACnBu7C,0BAAsBv7C,IAG9B,KAAKoxD,EAAA,EAA2B1vD,mBAC5B,OAAAnD,EAAA,YACOmT,GACHu0B,kBAAmBt2B,EAAO9Q,QAC1B08C,qBAAsB5rC,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGzD,KAAK+xD,EAAA,EAA2B1F,gBAChC,KAAK0F,EAAA,EAA2BzF,gBAC5B,OAAAptD,EAAA,YACOmT,GACHu1C,iBAAajnD,EACbgnD,oBAAgBhnD,IAGxB,KAAKoxD,EAAA,EAA2BxF,aAC5B,OAAArtD,EAAA,YACOmT,GACHu1C,YAAat3C,EAAO9Q,QACpBmoD,eAAgBr3C,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGnD,KAAK+xD,EAAA,EAA2BvF,iBAChC,KAAKuF,EAAA,EAA2BtF,iBAC5B,OAAAvtD,EAAA,YACOmT,GACHy1C,kBAAcnnD,EACdknD,qBAAiBlnD,IAGzB,KAAKoxD,EAAA,EAA2BrF,cAC5B,OAAAxtD,EAAA,YACOmT,GACHy1C,aAAcx3C,EAAO9Q,QACrBqoD,gBAAiBv3C,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGpD,KAAK+xD,EAAA,EAA2BxvD,yBAChC,KAAKwvD,EAAA,EAA2BvvD,0BAC5B,OAAAtD,EAAA,YACOmT,GACHs6B,4BAAwBhsC,EACxB+rC,+BAA2B/rC,IAGnC,KAAKoxD,EAAA,EAA2BtvD,wBAC5B,OAAAvD,EAAA,YACOmT,GACHs6B,uBAAwBr8B,EAAO9Q,QAC/BktC,0BAA2Bp8B,EAAOvQ,KAAKC,WAG/C,QACI,OAAOqS,GAIf,SAAAi1B,EACIlT,EACA9jB,GAEA,YAHA,IAAA8jB,MAA0C2H,EAAc3H,UAGhD9jB,EAAOrU,MACf,KAAK81D,EAAA,EAA2BhwD,oBAC5B,OAAA7C,EAAA,YACOk1B,GACHZ,gBAAgB,EAChB4Y,mBAAoB97B,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGvD,KAAK+xD,EAAA,EAA2B9vD,iBAChC,KAAK8vD,EAAA,EAA2B/vD,oBAC5B,OAAA9C,EAAA,YACOk1B,GACHZ,gBAAgB,EAChB4Y,wBAAoBzrC,IAG5B,KAAKoxD,EAAA,EAA2B5vD,sBAC5B,OAAAjD,EAAA,YACOk1B,GACH8J,kBAAkB,EAClBge,qBAAsB5rC,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGzD,KAAK+xD,EAAA,EAA2B1vD,mBAChC,KAAK0vD,EAAA,EAA2B3vD,sBAC5B,OAAAlD,EAAA,YACOk1B,GACH8J,kBAAkB,EAClBge,0BAAsBv7C,IAG9B,KAAKoxD,EAAA,EAA2B1F,gBAC5B,OAAAntD,EAAA,YACOk1B,GACHrC,aAAa,EACb41B,eAAgBr3C,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGnD,KAAK+xD,EAAA,EAA2BxF,aAChC,KAAKwF,EAAA,EAA2BzF,gBAC5B,OAAAptD,EAAA,YACOk1B,GACHrC,aAAa,EACb41B,oBAAgBhnD,IAGxB,KAAKoxD,EAAA,EAA2BvF,iBAC5B,OAAAttD,EAAA,YACOk1B,GACHpC,cAAc,EACd61B,gBAAiBv3C,EAAOvQ,MAAQuQ,EAAOvQ,KAAKC,WAGpD,KAAK+xD,EAAA,EAA2BrF,cAChC,KAAKqF,EAAA,EAA2BtF,iBAC5B,OAAAvtD,EAAA,YACOk1B,GACHpC,cAAc,EACd61B,qBAAiBlnD,IAGzB,KAAKoxD,EAAA,EAA2BxvD,yBAC5B,OAAArD,EAAA,YACOk1B,GACHJ,qBAAqB,EACrB0Y,0BAA2Bp8B,EAAOvQ,KAAKC,WAG/C,KAAK+xD,EAAA,EAA2BvvD,0BAChC,KAAKuvD,EAAA,EAA2BtvD,wBAC3B,OAAAvD,EAAA,YACMk1B,GACHJ,qBAAqB,EACrB0Y,+BAA2B/rC,IAGnC,QACI,OAAOyzB,iEChLD,SAAA49B,EAA+BzjD,EAAmCnI,GAC5E,IAAI6rD,EAQJ,OCZU,SAA+B1jD,GAGzC,YAAoC,IAFbA,EAEMhN,GDGzB2wD,CAAqB3jD,GAEdnI,GAAgBA,EAAaymB,SACpColC,EAAY7rD,EAAa,GAAG7E,IAF5B0wD,EAAY1jD,EAAQhN,IAMpBA,GAAI0wD,EACJ7lC,UAAW7d,EAAQ6d,UACnBC,SAAU9d,EAAQ8d,SAClBC,QAAS/d,EAAQ+d,QACjB6lC,aAAc5jD,EAAQsP,SACtBu0C,aAAc7jD,EAAQuP,SACtByO,KAAMhe,EAAQge,KACd8lC,SAAU9jD,EAAQie,gBAClB8lC,aAAc/jD,EAAQke,oBACtB8lC,SAAUhkD,EAAQuI,WAClBsH,QAAS7P,EAAQ6P,QACjBzS,YAAa4C,EAAQ5C,YACrB+gB,MAAOne,EAAQme,MACfC,aAAcpe,EAAQoe,+EE9BhB,SAAA6lC,IACV,IACI,OAAOC,QAAAhyB,IAAAiyB,UAAwB,cACjC,MAAOC,GACL,MAAO,yFCIfC,EAAA,WACI,SAAAA,EACYl0D,GAAA1C,KAAA0C,iBAkChB,OA/BIk0D,EAAAr3D,UAAAm7B,UAAA,SAAU9zB,EAAiBhE,OAAEC,QAAA,IAAAD,QAAAC,QACnBy8B,EAAM,0BAA0B14B,EAChC9D,GAAY0X,OAAQk+B,EAAA,EAAYC,QAChCF,GACFG,SACI,WACA,sCACA,kCACA,qCACA,kCACFlrC,KAAK,MAGX,OAAO1N,KAAK0C,eAAelE,IAAI8gC,GAC3BmZ,OAAMA,EACN31C,QAAOA,EACPD,QAAOA,KAIf+zD,EAAAr3D,UAAAiQ,YAAA,SAAYrN,EAAgCS,OAAEC,QAAA,IAAAD,QAAAC,QAG1C,OAAO7C,KAAK0C,eAAe6X,KAFf,kCAE2BpY,KAAIA,EAAEU,QAAOA,KAGxD+zD,EAAAr3D,UAAAoV,cAAA,SAAc/N,EAAiBhE,OAAEC,QAAA,IAAAD,QAAAC,QACvBy8B,EAAM,kCAAkC14B,EAE9C,OAAO5G,KAAK0C,eAAe6X,KAAK+kB,GAAOz8B,QAAOA,KAEtD+zD,EApCA,kICWAC,EAAA,WACI,SAAAA,EACYC,EACAhpD,GADA9N,KAAA82D,sBACA92D,KAAA8N,qBAsHhB,OAnHI+oD,EAAAt3D,UAAAm7B,UAAA,SAAU9zB,EAAiBnF,GAA3B,IAAA1B,EAAAC,KACI,OAAO,IAAIw5C,EAAA,WAAW,SAAC73C,GACnBA,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa04D,EAAA,EAAgBzH,qBAE3CvvD,EAAK+2D,oBAAoBp8B,UAAU9zB,EAASnF,GACvCO,KAAK,SAAAC,GACFN,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa04D,EAAA,EAAgB7Y,mBAAoBj8C,EAASE,OACxER,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkB04D,EAAA,EAAgBvH,gBAAiBvtD,SAMlF40D,EAAAt3D,UAAAsH,kBAAA,SAAkBD,EAAiBnF,GAAnC,IAAA1B,EAAAC,KACI,OAAO,IAAIw5C,EAAA,WAAW,SAAC73C,GACnBA,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa04D,EAAA,EAAgBxH,6BAE3CxvD,EAAK+2D,oBAAoBp8B,UAAU9zB,EAASnF,GACvCO,KAAK,SAAAC,GACFN,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa04D,EAAA,EAAgB7H,2BAA4BjtD,EAASE,OAChFR,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkB04D,EAAA,EAAgBtH,wBAAyBxtD,SAK1F40D,EAAAt3D,UAAA0J,iBAAA,SAAiBxH,GAAjB,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAApF,OAAA+6C,EAAA,MAAA/6C,CAAM,WAClB,IAAMuI,EAAU7G,EAAKi3D,mBAAmBvzD,EAAMG,YAE9C,IAAKgD,EACD,MAAM,IAAI2yC,EAAA,EAAiBA,EAAA,EAAqB3f,gBAGpD,OAAO75B,EAAK26B,UAAU9zB,EAASnF,OAIvCo1D,EAAAt3D,UAAAiQ,YAAA,SAAYhM,EAA2B/B,GAAvC,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAApF,OAAA26C,EAAA,OAAA36C,CACZA,OAAA46C,EAAA,GAAA56C,CAAGA,OAAA8sC,EAAA,aAAA9sC,CAAa04D,EAAA,EAAgBE,uBAChC54D,OAAA+6C,EAAA,MAAA/6C,CAAM,WACF,IAAMsF,EAAQF,EAAMG,WACd25B,EAAiB55B,EAAM8G,OAAOwjC,oBAC9BvnC,EAAW/C,EAAM+C,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAI6yC,EAAA,EAAiBA,EAAA,EAAqBpyC,iBAGpD,OAAO9I,OAAA64D,EAAA,KAAA74D,CACH0B,EAAK+N,mBAAmB5G,SAASR,EAAUjF,GACtCO,KAAK,WAAM,OAAAjC,EAAK+2D,oBAAoBtnD,YAAYzP,EAAKo3D,uBAAuB3zD,EAASkD,EAAS0wD,gBAAiB75B,GAAiB97B,MACvIiE,KACErH,OAAAg7C,EAAA,UAAAh7C,CAAU,SAAA4D,GAAY,OAAA5D,OAAA26C,EAAA,OAAA36C,CAElB0B,EAAK26B,UAAUz4B,EAASE,KAAKC,KAAK0H,MAAMlD,QAASnF,GACjDpD,OAAA46C,EAAA,GAAA56C,CAAGA,OAAA8sC,EAAA,aAAA9sC,CAAa04D,EAAA,EAAgBrqB,qBAAsBzqC,EAASE,KAAKC,KAAI7B,EAAA,YAAO0B,EAASE,KAAK4B,MAAM+I,MAAO7K,EAASa,QAAQgK,gBAGpIpH,KACCrH,OAAAg7C,EAAA,WAAAh7C,CAAW,SAAAkE,GAAS,OAAAlE,OAAAi7C,EAAA,EAAAj7C,CAAiB04D,EAAA,EAAgBM,kBAAmB90D,SAKpFs0D,EAAAt3D,UAAAoV,cAAA,SAAc/N,EAAiBnF,GAA/B,IAAA1B,EAAAC,KACI,OAAO3B,OAAA26C,EAAA,OAAA36C,CACHA,OAAA46C,EAAA,GAAA56C,CAAGA,OAAA8sC,EAAA,aAAA9sC,CAAa04D,EAAA,EAAgBO,yBAChCj5D,OAAA64D,EAAA,KAAA74D,CAAK2B,KAAK82D,oBAAoBniD,cAAc/N,EAASnF,IAChDiE,KACGrH,OAAAg7C,EAAA,UAAAh7C,CAAU,SAAA4D,GAAY,OAAA5D,OAAA26C,EAAA,OAAA36C,CAClB0B,EAAK26B,UAAU9zB,EAASnF,GACxBpD,OAAA46C,EAAA,GAAA56C,CAAGA,OAAA8sC,EAAA,aAAA9sC,CAAa04D,EAAA,EAAgB5H,uBAAwBltD,EAASE,KAAKC,YAGpFsD,KACErH,OAAAg7C,EAAA,WAAAh7C,CAAW,SAAAkE,GAAS,OAAAlE,OAAAi7C,EAAA,EAAAj7C,CAAiB04D,EAAA,EAAgBQ,oBAAqBh1D,OAI1Es0D,EAAAt3D,UAAAy3D,mBAAR,SAA2BrzD,GACvB,IAAMmG,EAAQnG,EAAMmG,MAAMC,WACpBrD,EAAW/C,EAAM+C,SAASC,cAEhC,OAAQmD,GAASA,EAAMlD,SAAaF,GAAYA,EAASE,SAGrDiwD,EAAAt3D,UAAA43D,uBAAR,SAA+B3zD,EAA2B4zD,EAAyB75B,GACvE,IAAA15B,EAAAL,EAAAK,QAASiG,EAAAvJ,EAAA,OAAAiD,GAAA,YAEjB,OAAKK,EAQLtD,EAAA,YACOuJ,GACHstD,gBAAeA,EACf75B,eAAcA,EACd15B,SACI2F,YAAa3F,EAAQ2F,YACrBtL,KAAM2F,EAAQG,SACdwB,QAAS3B,EAAQQ,aAdrB9D,EAAA,YACOuJ,GACHstD,gBAAeA,EACf75B,eAAcA,KAe9Bs5B,EAzHA,kDCbAW,EAAA,oBAAAA,KAkCA,OAjCIA,EAAAj4D,UAAAqI,QAAA,SAAQ6vD,EAAaC,GACjB,OAAOr5D,OAAAomD,EAAA,QAAApmD,CACH2B,KAAK23D,WAAWF,GAChBz3D,KAAK23D,WAAWD,KAIhBF,EAAAj4D,UAAAo4D,WAAR,SAAmB9vD,GACf,OACI2/B,WAAY3/B,EAAK2/B,WACjBztB,SAAUlS,EAAKkS,SACfxU,GAAIsC,EAAKtC,GACTmuC,WACI2gB,aAAcxsD,EAAK6rC,UAAU2gB,aAAa/mC,IAAI,SAAAuc,GAAQ,OAClDkJ,kBAAmBlJ,EAAKkJ,kBACxBK,UAAWvJ,EAAKuJ,UAChB3F,SAAU5D,EAAK4D,SACfI,UAAWhE,EAAKgE,aAEpBlmC,iBAAkBE,EAAK6rC,UAAU/rC,iBAAiB2lB,IAAI,SAAAuc,GAAQ,OAC1D1vB,OAAQ0vB,EAAK1vB,OACbwzB,UAAW9D,EAAK8D,aAEpB2H,cAAeztC,EAAK6rC,UAAU4B,cAAchoB,IAAI,SAAAuc,GAAQ,OACpDkJ,kBAAmBlJ,EAAKkJ,kBACxBK,UAAWvJ,EAAKuJ,UAChB3F,SAAU5D,EAAK4D,SACfI,UAAWhE,EAAKgE,UAChB+pB,aAAc/tB,EAAK+tB,mBAKvCJ,EAlCA,uCCNc,SAAAK,EAAuBC,GACjC,OAAKA,EAIEA,EAAM1xB,MAAM,kBACd9Y,IAAI,SAAAyqC,GAAQ,OAAAA,EAAKtoB,QAAQ,SAAU,MACnC/hC,KAAK,KACLsqD,OANM,4ECAfC,EAAA,SAAAp4D,GACI,SAAAo4D,EAAYn4D,GAAZ,IAAAC,EACIF,EAAA/B,KAAAkC,KAAMF,GAAW,0CAAwCE,YAEzDD,EAAKE,KAAO,qBAEpB,OANkDM,EAAA,UAAA03D,EAAAp4D,GAMlDo4D,EANA,MAAkD,0ECSlDC,EAAA,WACI,SAAAA,EACYC,GAAAn4D,KAAAm4D,uBA8ChB,OA3CID,EAAA34D,UAAAw9B,YAAA,SAAYzmB,EAAc7U,GAA1B,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAA0sD,EAAA,WAAWlxD,OAAO,SAAC0C,GAC/B,IACM+E,EADQjD,EAAMG,WACG8C,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAI0xD,EAAA,EAAiBA,EAAA,EAAqBjxD,iBAGpDxF,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAag6D,EAAA,EAAiBjK,uBAE5CruD,EAAKo4D,qBAAqBp7B,YAAYr2B,EAASnB,GAAI+Q,EAAM7U,GACpDO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAag6D,EAAA,EAAiBvsB,qBAAsB3pC,IAClER,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkBg6D,EAAA,EAAiBhK,kBAAmBpsD,UAKrFi2D,EAAA34D,UAAAy9B,aAAA,SAAa1mB,EAAc7U,GAA3B,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAA0sD,EAAA,WAAWlxD,OAAO,SAAC0C,GAC/B,IACM+E,EADQjD,EAAMG,WACG8C,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAI0xD,EAAA,EAAiBA,EAAA,EAAqBjxD,iBAGpDxF,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAag6D,EAAA,EAAiB/J,wBAE5CvuD,EAAKo4D,qBAAqBn7B,aAAat2B,EAASnB,GAAI+Q,EAAM7U,GACrDO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAag6D,EAAA,EAAiBtsB,sBAAuB5pC,IACnER,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkBg6D,EAAA,EAAiB9J,mBAAoBtsD,UAI1Fi2D,EAhDA,2DCNAI,EAAA,WACI,SAAAA,EACY51D,GAAA1C,KAAA0C,iBA6BhB,OA1BI41D,EAAA/4D,UAAAw9B,YAAA,SAAYzX,EAAoBizC,EAAoB31D,OAAEC,QAAA,IAAAD,QAAAC,QAC5Cy8B,EAAM,6BAA6Bha,EAAU,WAC7CxiB,GAAY0X,OAAQo/B,EAAA,EAAYjB,QAEtC,OAAO34C,KAAK0C,eAAe6X,KAAK+kB,GAC5Bx8B,QAAOA,EACPD,QAAOA,EACP41C,QACIG,QAAS4f,EAAA,EAAwB9qD,KAAK,MAE1CvL,MAAQo2D,WAAUA,MAI1BD,EAAA/4D,UAAAy9B,aAAA,SAAa1X,EAAoBizC,EAAoB31D,OAAEC,QAAA,IAAAD,QAAAC,QAC7Cy8B,EAAM,6BAA6Bha,EAAU,YAAYizC,EACzDz1D,GAAY0X,OAAQo/B,EAAA,EAAYjB,QAEtC,OAAO34C,KAAK0C,eAAem3C,OAAOva,GAC9Bx8B,QAAOA,EACPD,QAAOA,EACP41C,QACIG,QAAS4f,EAAA,EAAwB9qD,KAAK,SAItD4qD,EA/BA,0ECMAG,EAAA,WACI,SAAAA,EACYC,GAAA14D,KAAA04D,gCA8ChB,OA3CID,EAAAl5D,UAAA09B,qBAAA,SAAqB0X,EAAyBlzC,GAA9C,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAA0sD,EAAA,WAAWlxD,OAAO,SAAC0C,GAC/B,IACM+E,EADQjD,EAAMG,WACG8C,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAI0xD,EAAA,EAAiBA,EAAA,EAAqBjxD,iBAGpDxF,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAas6D,EAAA,EAA0B/J,gCAErD7uD,EAAK24D,8BAA8Bz7B,qBAAqBv2B,EAASnB,GAAIovC,EAAiBlzC,GACjFO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAas6D,EAAA,EAA0BrsB,8BAA+BnqC,IACpFR,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkBs6D,EAAA,EAA0B9J,2BAA4B5sD,UAKvGw2D,EAAAl5D,UAAA29B,sBAAA,SAAsByX,EAAyBlzC,GAA/C,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAA0sD,EAAA,WAAWlxD,OAAO,SAAC0C,GAC/B,IACM+E,EADQjD,EAAMG,WACG8C,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAI0xD,EAAA,EAAiBA,EAAA,EAAqBjxD,iBAGpDxF,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAas6D,EAAA,EAA0B7J,iCAErD/uD,EAAK24D,8BAA8Bx7B,sBAAsBx2B,EAASnB,GAAIovC,EAAiBlzC,GAClFO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAas6D,EAAA,EAA0BpsB,+BAAgCpqC,IACrFR,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkBs6D,EAAA,EAA0B5J,4BAA6B9sD,UAI5Gw2D,EAhDA,2DCNAG,EAAA,WACI,SAAAA,EACYl2D,GAAA1C,KAAA0C,iBA6BhB,OA1BIk2D,EAAAr5D,UAAA09B,qBAAA,SAAqB3X,EAAoBuzC,EAA6Bj2D,OAAEC,QAAA,IAAAD,QAAAC,QAC9Dy8B,EAAM,6BAA6Bha,EAAU,qBAC7CxiB,GAAY0X,OAAQo/B,EAAA,EAAYjB,QAEtC,OAAO34C,KAAK0C,eAAe6X,KAAK+kB,GAC5Bx8B,QAAOA,EACPD,QAAOA,EACP41C,QACIG,QAAS4f,EAAA,EAAwB9qD,KAAK,MAE1CvL,MAAQ02D,oBAAmBA,MAInCD,EAAAr5D,UAAA29B,sBAAA,SAAsB5X,EAAoBuzC,EAA6Bj2D,OAAEC,QAAA,IAAAD,QAAAC,QAC/Dy8B,EAAM,6BAA6Bha,EAAU,sBAAsBuzC,EACnE/1D,GAAY0X,OAAQo/B,EAAA,EAAYjB,QAEtC,OAAO34C,KAAK0C,eAAem3C,OAAOva,GAC9Bx8B,QAAOA,EACPD,QAAOA,EACP41C,QACIG,QAAS4f,EAAA,EAAwB9qD,KAAK,SAItDkrD,EA/BA,uCCLA,IAAAE,EAAA,WAWA,OAPI,SAAYx3C,GAAZ,IAAAvhB,EAAAC,KACU+4D,EAAc,IAAIzsD,QAAW,SAACC,EAASC,GACzCzM,EAAKohB,OAAS3U,IAGlBxM,KAAKshB,QAAUhV,QAAQ0sD,MAAM13C,EAASy3C,KAT9C,kGCMc,SAAAE,EAAiC1U,EAAoCC,GAC/E,OAAOnmD,OAAAqsC,EAAA,QAAArsC,CAAQqmD,EAAUH,GAAWG,EAAUF,IAGlD,SAAAE,EAAmBnyC,GACf,IAAM2mD,GAAe,KAAM,gBAE3B,OAAQ76D,OAAOuiC,KAAKviC,OAAA86D,EAAA,EAAA96D,CAAYkU,QAC3Bo3B,OACG,SAACC,EAAQ1qC,SAAQ,OAA8B,IAA9Bg6D,EAAYjjB,QAAQ/2C,IAAeqT,EAAQrT,GAAMqB,EAAA,YACzDqpC,IAAMhnC,MAAG1D,GAAMqT,EAAQrT,GAAI0D,IAChCgnC,0FCdF,SAAAwvB,EAAsB/5D,GAChC,OAAOhB,OAAAg7D,EAAA,EAAAh7D,CAASgB,EAAQ,SAACT,EAAYM,GAAgB,OAAAb,OAAAi7D,EAAA,EAAAj7D,CAAUa,oCCCrD,SAAAq6D,EAAiChnD,GAC3C,OACIhN,GAAIgN,EAAQhN,GACZ6qB,UAAW7d,EAAQ6d,UACnBC,SAAU9d,EAAQ8d,SAClBC,QAAS/d,EAAQ+d,QACjBzO,SAAUtP,EAAQ4jD,aAClBr0C,SAAUvP,EAAQ6jD,aAClB7lC,KAAMhe,EAAQge,KACdC,gBAAiBje,EAAQ8jD,SACzB5lC,oBAAqBle,EAAQ+jD,aAC7Bx7C,WAAYvI,EAAQgkD,SACpBn0C,QAAS7P,EAAQ6P,QACjBzS,YAAa4C,EAAQ5C,YACrB+gB,MAAOne,EAAQme,MACfC,aAAcpe,EAAQoe,sGCX9B6oC,EAAA,WACI,SAAAA,EACYC,GAAAz5D,KAAAy5D,gCAiBhB,OAdID,EAAAj6D,UAAAiC,cAAA,SAAcC,GAAd,IAAA1B,EAAAC,KACI,OAAOmwD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtBA,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAayxD,EAAA,EAA0BE,iCAErDjwD,EAAK05D,8BAA8Bj4D,cAAcC,GAC5CO,KAAK,SAAAC,GACFN,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAayxD,EAAA,EAA0BC,+BAAgC9tD,EAASE,KAAKC,OACnGT,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkByxD,EAAA,EAA0BG,4BAA6BhuD,SAI5Gu3D,EAnBA,uCCJA,IAAAE,EAAA,WACI,SAAAA,EACYh3D,EACAC,GADA3C,KAAA0C,iBACA1C,KAAA2C,UAWhB,OARI+2D,EAAAn6D,UAAAiC,cAAA,SAAcoB,OAAEC,QAAA,IAAAD,QAAAC,QAENC,GACFC,kBAAmB/C,KAAK2C,QAAQK,QAGpC,OAAOhD,KAAK0C,eAAelE,IALf,sCAK0BsE,QAAOA,EAAED,QAAOA,KAE9D62D,EAdA,uECaAC,EAAA,WACI,SAAAA,EACYt2D,GAAArD,KAAAqD,oBA+EhB,OA5EIs2D,EAAAp6D,UAAAmT,cAAA,SAAcH,EAA6B9Q,GAA3C,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAAs2C,EAAA,WAAW96C,OAAO,SAAC0C,GAC/B,IAAMkC,EAAUJ,EAAMG,WAAWC,QAAQuB,eACnCpB,EAAWvC,GAAWA,EAAQuC,UAAYH,GAAWA,EAAQyB,WAEnE3D,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAau7D,EAAA,EAA2BpE,4BAAwB7wD,GAAaX,SAAQA,KAEnGjE,EAAKsD,kBAAkB7E,IAAIwF,GACtB0O,cAAcH,EAAOhS,EAAA,YAAOkB,GAASuC,SAAQA,KAC7ChC,KAAK,WACFL,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAau7D,EAAA,EAA2BnE,4BAAwB9wD,GAAaX,SAAQA,KACnGrC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkBu7D,EAAA,EAA2BlE,oBAAqBnzD,GAASyB,SAAQA,WAKlH21D,EAAAp6D,UAAA28B,aAAA,SAAaD,EAA0Bx6B,GAAvC,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAAs2C,EAAA,WAAW96C,OAAO,SAAC0C,GAC/B,IAAMkC,EAAUJ,EAAMG,WAAWC,QAAQuB,eACnCpB,EAAWvC,GAAWA,EAAQuC,UAAYH,GAAWA,EAAQyB,WAEnE3D,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAau7D,EAAA,EAA2BjE,2BAAuBhxD,GAAaX,SAAQA,KAElGjE,EAAKsD,kBAAkB7E,IAAIwF,GACtBk4B,aAAaD,EAAgB17B,EAAA,YAAOkB,GAASuC,SAAQA,KACrDhC,KAAK,WACFL,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAau7D,EAAA,EAA2BhE,2BAAuBjxD,GAAaX,SAAQA,KAClGrC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkBu7D,EAAA,EAA2B/D,mBAAoBtzD,GAASyB,SAAQA,WAKjH21D,EAAAp6D,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAAs2C,EAAA,WAAW96C,OAAO,SAAC0C,GAC/B,IAAMkC,EAAUJ,EAAMG,WAAWC,QAAQuB,eACnCpB,EAAWvC,GAAWA,EAAQuC,UAAYH,GAAWA,EAAQyB,WAC7Du0D,EAAat5D,EAAA,YAAQkB,GAASuC,SAAQA,IAE5CrC,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAau7D,EAAA,EAA2B7zD,yBAAqBpB,GAAaX,SAAQA,KAEhGjE,EAAKsD,kBAAkB7E,IAAIwF,GACtB8B,WAAW+zD,GACX73D,KAAK,WACFL,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAau7D,EAAA,EAA2B5zD,yBAAqBrB,GAAaX,SAAQA,KAChGrC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkBu7D,EAAA,EAA2B3zD,iBAAkB1D,GAASyB,SAAQA,WAK/G21D,EAAAp6D,UAAA2G,aAAA,SAAazE,GAAb,IAAA1B,EAAAC,KACI,OAAO,SAAAyD,GAAS,OAAAs2C,EAAA,WAAW96C,OAAO,SAAC0C,GAC/B,IAAMkC,EAAUJ,EAAMG,WAAWC,QAAQuB,eACnCpB,EAAWvC,GAAWA,EAAQuC,UAAYH,GAAWA,EAAQyB,WAEnE3D,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAau7D,EAAA,EAA2BzzD,2BAAuBxB,GAAaX,SAAQA,KAElGjE,EAAKsD,kBAAkB7E,IAAIwF,GACtBkC,aAAY3F,EAAA,YAAMkB,GAASuC,SAAQA,KACnChC,KAAK,WACFL,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAau7D,EAAA,EAA2BxzD,2BAAuBzB,GAAaX,SAAQA,KAClGrC,EAASU,aAEZC,MAAM,SAAAC,GACHZ,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkBu7D,EAAA,EAA2BvzD,mBAAoB9D,GAASyB,SAAQA,WAIrH21D,EAjFA,sRChBA,SAAA95D,GACI,SAAAi6D,EAAYh6D,GAAZ,IAAAC,EACIF,EAAA/B,KAAAkC,KAAMF,GAAW,qBAAmBE,YAEpCD,EAAKE,KAAO,oBAEpB,OANiDiD,EAAA,UAAA42D,EAAAj6D,GAMjDi6D,EANA,MAAiD,cCGjD,WAGI,SAAAC,EACcltD,GAAA7M,KAAA6M,SAHJ7M,KAAA4N,gBAAiB,EAqB/B,OAXImsD,EAAAx6D,UAAAuG,WAAA,SAAWrE,GAGP,OAFAzB,KAAK4N,gBAAiB,EAEftB,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAGvCm2D,EAAAx6D,UAAA2G,aAAA,SAAazE,GAGT,OAFAzB,KAAK4N,gBAAiB,EAEftB,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAE3Cm2D,EAtBA,KCKA,SAAAl6D,GAII,SAAAm6D,EACIv2D,EACQuK,EACAC,EACAgsD,EACAjqD,GALZ,IAAAjQ,EAOIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YALJD,EAAAiO,8BACAjO,EAAAkO,+BACAlO,EAAAk6D,+BACAl6D,EAAAiQ,gBAIRjQ,EAAKkQ,QAAUC,SA6GvB,OA1HuDhN,EAAA,UAAA82D,EAAAn6D,GAgBnDm6D,EAAAz6D,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,GAAIA,KAAK4N,eACL,OAAO/N,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,GAGpB,IAAA0O,EAAA1O,EAAA2O,OAAuBpM,EAAAvC,EAAAuC,SAE/B,IAAKmM,IAAkBnM,EACnB,MAAM,IAAIyF,EAAA,EAAqB,wEAGnC,OAAOzJ,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkB7K,IAC1EhC,KAAK,SAAA2B,GAAS,WAAI2I,QAAQ,SAACC,EAASC,GAGjC,GAFAzM,EAAKuQ,eAAiB3M,EAAMQ,eAAeC,iBAAiBJ,IAEvDjE,EAAKuQ,eACN,MAAM,IAAIhM,EAAA,EAAiBA,EAAA,EAAqBC,sBAG5C,IAAA3B,EAAAuN,EAAAa,eAAA,IAAApO,EAAA,aAAAA,EAaR7C,EAAKiQ,cAAcO,WAAWxQ,EAAKuQ,eAZnB,WACZvQ,EAAKmnC,oBAAmBhkC,EAAA,YACjBiN,GACHa,QAAS,SAAAzO,GACLiK,EAAOjK,GACPyO,EAAQzO,OAIhBgK,MAICjK,MAAMkK,OAEdxK,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrCu4D,EAAAz6D,UAAA2G,aAAA,SAAazE,GACT,OAAKzB,KAAK4N,gBAIV5N,KAAKsQ,oBAAiB3L,EAEf9E,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IALf5B,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAQlCu4D,EAAAz6D,UAAAm8B,OAAA,SAAOF,EAAkC/5B,GACrC,MAAM,IAAIy4D,EACN,6FAIRF,EAAAz6D,UAAAq8B,QAAA,SAAQn6B,GACJ,IACMoC,EADQ7D,KAAK6M,OAAOjJ,WACJC,QAAQuB,eAE9B,OAAKvB,EAIE7D,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6B2tB,QAAQ/3B,EAAQyB,WAAY7D,IAJvD6K,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAQnCo2D,EAAAz6D,UAAA2nC,oBAAR,SAA4BzlC,GAA5B,IAAA1B,EAAAC,KACI,IAAKA,KAAKsQ,iBAAmBtQ,KAAKiQ,QAAQqB,kBACtC,MAAM,IAAInC,EAAA,EAAoBA,EAAA,EAAwB0qB,wBAG1D,IAAK75B,KAAKsQ,eAAe7F,OAAOqG,WAC5B,MAAM,IAAIxM,EAAA,EAAiBA,EAAA,EAAqBC,sBAG5C,IAAA4H,EAAAnM,KAAAsQ,eAAAnE,mBAER,OAAO,IAAInM,KAAKiQ,QAAQqB,kBAAkBizB,OAAO9iC,EAAQsP,UAAW/Q,KAAKsQ,eAAe7F,OAAOqG,YAC3FsS,MAAO3hB,EAAQ2hB,OAAS,OACxBsjC,KAAMjlD,EAAQilD,MAAQ,QACtBzmD,KAAM,MACNk6D,sBAAsB,EACtBnpD,QAASvP,EAAQuP,QACjBygD,cAAe,WACX1xD,EAAKq6D,qBAAqBjuD,OAK9B6tD,EAAAz6D,UAAA66D,qBAAR,SAA6B34D,GAA7B,IAAA1B,EAAAC,KACIA,KAAKi6D,6BAA6BI,gBAC7Br4D,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACL,IAAKpC,EAAKkQ,QAAQG,OACd,MAAM,IAAIjB,EAAA,EAAoBA,EAAA,EAAwB2qB,wBAG1D/5B,EAAKkQ,QAAQG,OAAOkqD,MAAMtmD,WACtBumD,OAAO,EACP5oD,MAAO,6EACPhO,MAAO,GAAGlC,EAAQ+4D,YAAcr4D,EAAK2K,OACtCrL,EAAQmU,aAEX7V,EAAKk6D,6BAA6BQ,6BAGlDT,EA1HA,CAAuDU,KCGvD,SAAA76D,GAII,SAAA86D,EACIl3D,EACQyT,EACAlJ,EACA+qB,EACA9qB,EACA+O,EACAC,GAPZ,IAAAld,EASIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAPJD,EAAAmX,yBACAnX,EAAAiO,8BACAjO,EAAAg5B,iCACAh5B,EAAAkO,+BACAlO,EAAAid,yCACAjd,EAAAkd,4BATJld,EAAA66D,iBAA2B,0BAkJvC,OApJmE13D,EAAA,UAAAy3D,EAAA96D,GAgB/D86D,EAAAp7D,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACYkd,EAAAzb,EAAA0b,sBAA4CnZ,EAAAvC,EAAAuC,SAEpD,IAAKkZ,IAAwBlZ,EACzB,MAAM,IAAIyF,EAAA,EAAqB,uFAGnC,OAAOzJ,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkB7K,IAC1EhC,KAAK,SAAA2B,GACF5D,EAAKuQ,eAAiB3M,EAAMQ,eAAeC,iBAAiBJ,GAE5D,IAAM0C,EAAW/C,EAAM+C,SAASC,cAC1B6D,EAAc7G,EAAM8G,OAAOC,iBAEjC,IAAKhE,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAGpD,IAAKqD,EACD,MAAM,IAAIlG,EAAA,EAAiBA,EAAA,EAAqB8I,uBAGpD,IAAKrN,EAAKuQ,iBAAmBvQ,EAAKuQ,eAAeZ,YAC7C,MAAM,IAAIpL,EAAA,EAAiBA,EAAA,EAAqBC,sBAIhD,IAAAwM,EAAAmM,EAAAnM,UACAnO,EAAAsa,EAAAlM,eAAA,IAAApO,EAAA,aAAAA,EAGEwa,GACFpa,OAAQwH,EAAYyB,aAAa6Q,cACjCO,iBAAiB,EACjBhD,SAAU3T,EAAS2T,SACnBP,aAActP,EAAYuP,SAASzD,MAGvC,OAAOhK,QAAQmN,KACX1Z,EAAKkd,0BAA0B5O,KAAKtO,EAAKuQ,eAAe7F,OAAOgL,UAC/D1V,EAAKid,uCAAuClX,WAAW/F,EAAKuQ,eAAeZ,YAAa0N,KAE3Fpb,KAAK,SAACY,OAAC0a,EAAA1a,EAAA,GAAcwa,EAAAxa,EAAA,GACZi4D,EAAe96D,EAAKmnC,oBAAoBn2B,EAAWhR,EAAK66D,kBAS9D,OAPAt9C,EAAa1J,KAAKwJ,GAClBE,EAAaE,GAAG,kBAAmB,SAACC,GAChC,OAAA1d,EAAKwZ,2BAA2BkE,GAC3Bnb,MAAM,SAAAC,GAAS,OAAAyO,EAAQzO,OAEhC+a,EAAaE,GAAG,gBAAiB,SAAC3Z,EAAStB,GAAU,OAAAyO,EAAQzO,KAEtDs4D,IAEV74D,KAAK,SAAA64D,GAAkBA,EAAa1/C,MAAMmsC,WAAa,cAE3DtlD,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrCk5D,EAAAp7D,UAAAm8B,OAAA,SAAOF,EAAkC/5B,GACrC,MAAM,IAAIy4D,EACN,4FAIRS,EAAAp7D,UAAAq8B,QAAA,SAAQn6B,GACJ,OAAOzB,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6B2tB,QAAQ,wBAAyBn6B,KAI3Ek5D,EAAAp7D,UAAA2G,aAAA,SAAazE,GAAb,IAAA1B,EAAAC,KACI,OAAKA,KAAK4N,gBAIV5N,KAAKsQ,oBAAiB3L,EAEf3E,KAAKgd,uCAAuC9W,eAC9ClE,KAAK,WAAM,OAAAnC,EAAAN,UAAM2G,aAAYpI,KAAAiC,EAAC0B,MANxB5B,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAS1Bk5D,EAAAp7D,UAAAga,2BAAR,SAAmCkE,GAAnC,IAAA1d,EAAAC,KACU2D,EAAQ3D,KAAK6M,OAAOjJ,WAE1B,IAAK5D,KAAKsQ,eACN,MAAM,IAAIlQ,MAAM,kCAGZ,IAAA4D,EAAAhE,KAAAsQ,eAAA/K,GAER,OAAOvF,KAAK6M,OAAO8B,SACf3O,KAAK+4B,+BAA+BzyB,kBAAkB,WAClD,OAAOvG,EAAKid,uCAAuCU,cAC/CD,EACA9Z,EAAMuG,gBAAgBC,qBACtBxG,EAAM+F,eAAeC,qBAExB3H,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SAAS5O,EAAKmX,uBAAuBwC,2BAChE1V,SAAQA,KAAO2V,QAAS,uBAGzBghD,EAAAp7D,UAAA2nC,oBAAR,SAA4BxE,EAAqBo4B,GAC7C,IAAM/pD,EAAYK,SAAS2pD,cAAc,IAAIr4B,GAE7C,IAAK3xB,EACD,MAAM,IAAI3Q,MAAM,wCAGpB,OAAQ2Q,EAAUgqD,cAAc,IAAMD,IAClC96D,KAAKg7D,0BAA0BjqD,EAAW+pD,IAG1CH,EAAAp7D,UAAAy7D,0BAAR,SAAkCjqD,EAAoB+pD,GAClD,IAUMG,EAAqB7pD,SAASsuB,cAAc,OAMlD,OALAu7B,EAAmB9/C,MAAMmsC,WAAa,SACtC2T,EAAmBC,UAAYJ,EAC/BG,EAAmBE,UAZI,ucAcvBpqD,EAAUw2B,YAAY0zB,GACfA,GAEfN,EApJA,CAAmED,cCEnE,SAAA76D,GAGI,SAAAu7D,EACI33D,EACQuK,EACAC,EACAuU,EACA9f,EACA0T,GANZ,IAAArW,EAQIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YANJD,EAAAiO,8BACAjO,EAAAkO,+BACAlO,EAAAyiB,wBACAziB,EAAA2C,iBACA3C,EAAAqW,gBA4HhB,OArIsDlT,EAAA,UAAAk4D,EAAAv7D,GAclDu7D,EAAA77D,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACYq7D,EAAA55D,EAAAkhB,SAA2B3e,EAAAvC,EAAAuC,SAEnC,IAAKq3D,IAAoBr3D,EACrB,MAAM,IAAIyF,EAAA,EAAqB,0EAGnC,OAAOzJ,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkB7K,IAC1EhC,KAAK,SAAA2B,GACF5D,EAAKuQ,eAAiB3M,EAAMQ,eAAeC,iBAAiBJ,GAE5D,IAAM6D,EAAOlE,EAAMkE,KAAK6kB,UAClBliB,EAAc7G,EAAM8G,OAAOC,iBAEjC,IAAK7C,EACD,MAAM,IAAIvD,EAAA,EAAiBA,EAAA,EAAqBqoB,aAGpD,IAAKniB,EACD,MAAM,IAAIlG,EAAA,EAAiBA,EAAA,EAAqB8I,uBAGpD,IAAKrN,EAAKuQ,iBAAmBvQ,EAAKuQ,eAAenE,mBAAmB4X,iBAChE,MAAM,IAAI5U,EAAA,EAAoBA,EAAA,EAAwBC,uBAGlD,IAAA2B,EAAAsqD,EAAAtqD,UAER,OAAOhR,EAAKyiB,sBAAsBnU,KAAKtO,EAAKuQ,eAAe7F,OAAOgL,UAC7DzT,KAAK,SAAAs5D,GACF,IAAMr4C,EAAWq4C,EAAKr4C,SAEtBA,EAASK,WACLC,SAAU/Y,EAAYyB,aAAa6Q,gBAGnCmG,EAASs4C,cACTt4C,EAASu4C,eACLn4C,YAAatS,KAIrBkS,EAASzF,GAAGyF,EAASw4C,UAAUC,eAAgB,WAC3C37D,EAAK8M,OAAO8B,SAAS5O,EAAKiO,4BAA4Ba,kBAAkB7K,IACnEhC,KAAK,WACF,IACMkC,EADQnE,EAAK8M,OAAOjJ,WACLO,eAAeC,iBAAiBJ,GAC/C23D,EAAYz3D,GAAUA,EAAOiI,oBAAsBjI,EAAOiI,mBAAmB4X,iBAE/E43C,GACA14C,EAASa,cAAc63C,OAKvC14C,EAASzF,GAAGyF,EAASw4C,UAAUG,kBAAmB,SAACp4D,GAC/C,IACMU,EADQnE,EAAK8M,OAAOjJ,WACLO,eAAeC,iBAAiBJ,GAC/C63D,EAAY33D,GAAUA,EAAOiI,oBAAsBjI,EAAOiI,mBAAmB8X,kBAE/E43C,GACA97D,EAAKyZ,yBAAyBhW,EAASq4D,GAClC75D,KAAK,WACFjC,EAAK+7D,sBAMhC95D,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrC25D,EAAA77D,UAAAm8B,OAAA,SAAOF,EAAkC/5B,GACrC,MAAM,IAAIy4D,EACN,uFAIRkB,EAAA77D,UAAAq8B,QAAA,SAAQn6B,GACJ,IACMoC,EADQ7D,KAAK6M,OAAOjJ,WACJC,QAAQuB,eAE9B,OAAKvB,EAIE7D,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6B2tB,QAAQ/3B,EAAQyB,WAAY7D,IAJvD6K,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAQnCw3D,EAAA77D,UAAAia,yBAAR,SAAiChW,EAAiCq4D,GAC9D,IACMp6D,GACFqB,SACI0X,OAAQ,YACRC,eAAgB,oDAEpBtY,KAAM9D,OAAAqc,EAAA,EAAArc,EACFulB,aAAcpgB,EAAQogB,aACtBK,kBAAmB43C,IAEvB33D,OAAQ,QAGZ,OAAOlE,KAAK0C,eAAeq5D,YAbf,8DAagCt6D,IAGxC25D,EAAA77D,UAAAu8D,YAAR,WACI97D,KAAKoW,YAAYG,SAAS,iBACtBzT,SACI0X,OAAQ,YACRC,eAAgB,qCAEpBg+B,QACIujB,cAAc,MAI9BZ,EArIA,CAAsDV,KCPtD,SAAA76D,GAEI,SAAAo8D,EACIx4D,EACQwK,GAFZ,IAAAlO,EAIIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAFJD,EAAAkO,iCAuBhB,OA3BoD/K,EAAA,UAAA+4D,EAAAp8D,GAShDo8D,EAAA18D,UAAAm8B,OAAA,SAAOF,EAAkC/5B,GACrC,MAAM,IAAIy4D,EACN,uFAIR+B,EAAA18D,UAAAq8B,QAAA,SAAQn6B,GACJ,IACMoC,EADQ7D,KAAK6M,OAAOjJ,WACJC,QAAQuB,eAE9B,OAAKvB,EAIE7D,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6B2tB,QAAQ/3B,EAAQyB,WAAY7D,IAJvD6K,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAO/Cq4D,EA3BA,CAAoDvB,KCOpD,SAAA76D,GAII,SAAAq8D,EACIz4D,EACQuK,EACAC,EACAkX,GAJZ,IAAAplB,EAMIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAJJD,EAAAiO,8BACAjO,EAAAkO,+BACAlO,EAAAolB,4BAmGhB,OA3GwDjiB,EAAA,UAAAg5D,EAAAr8D,GAapDq8D,EAAA38D,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACYm8D,EAAA16D,EAAAwX,WAA+BjV,EAAAvC,EAAAuC,SAEvC,IAAKm4D,IAAsBn4D,EACvB,MAAM,IAAIyF,EAAA,EAAqB,4EAGnC,OAAOzJ,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkB7K,IAC1EhC,KAAK,SAAA2B,GAGF,GADA5D,EAAKuQ,eAAiB3M,EAAMQ,eAAeC,iBAAiBJ,IACvDjE,EAAKuQ,iBAAmBvQ,EAAKuQ,eAAenE,mBAAmBmZ,WAChE,MAAM,IAAIhhB,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,IAAMsD,EAAOlE,EAAMkE,KAAK6kB,UACxB,IAAK7kB,EACD,MAAM,IAAIvD,EAAA,EAAiBA,EAAA,EAAqBqoB,aAG5C,IAAA5b,EAAAorD,EAAAprD,UAEFvN,GACF8hB,WAAYvlB,EAAKuQ,eAAenE,mBAAmBmZ,WACnDC,iBAAkBxlB,EAAKuQ,eAAenE,mBAAmBoZ,iBACzDpL,OAAQtS,EAAK2/B,WAAW9iB,WACxB3K,SAAUlS,EAAKkS,SAASzD,KACxBmP,OAAQ5d,EAAKtC,GACbmgB,yBAAyB,EACzB0pC,YAAal/C,OAAO6F,SAASC,KAC7B,0EACA9F,OAAO6F,SAASqmD,UAGpB,OAAOr8D,EAAKolB,wBAAwB9W,KAAKtO,EAAKuQ,eAAe7F,OAAOgL,UAC/DzT,KAAK,SAAAq6D,GACFt8D,EAAKknC,cAAgBlnC,EAAKmnC,oBAAoBn2B,GAE9ChR,EAAKknC,cAAc/oB,iBAAiB,QAAS,WACzCm+C,EAAW31D,SAASlD,SAInCxB,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrCy6D,EAAA38D,UAAA2G,aAAA,SAAazE,GACT,OAAKzB,KAAK4N,gBAIV5N,KAAKsQ,oBAAiB3L,EAClB3E,KAAKinC,eAAiBjnC,KAAKinC,cAAcE,aACzCnnC,KAAKinC,cAAcE,WAAWC,YAAYpnC,KAAKinC,eAC/CjnC,KAAKinC,mBAAgBtiC,GAGlB9E,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IATf5B,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAYlCy6D,EAAA38D,UAAAm8B,OAAA,SAAOF,EAAkC/5B,GACrC,MAAM,IAAIy4D,EACN,uFAIRgC,EAAA38D,UAAAq8B,QAAA,SAAQn6B,GACJ,IACMoC,EADQ7D,KAAK6M,OAAOjJ,WACJC,QAAQuB,eAE9B,OAAKvB,EAIE7D,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6B2tB,QAAQ/3B,EAAQyB,WAAY7D,IAJvD6K,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAQnCs4D,EAAA38D,UAAA2nC,oBAAR,SAA4BxE,GACxB,IAAM3xB,EAAYK,SAAS2pD,cAAc,IAAIr4B,GAE7C,IAAK3xB,EACD,MAAM,IAAItH,EAAA,EAAqB,+DAGnC,IAAM8L,EAASnE,SAASsuB,cAAc,SAMtC,OAJAnqB,EAAOtV,KAAO,QACdsV,EAAO+xB,IAAM,4EACbv2B,EAAUw2B,YAAYhyB,GAEfA,GAEf2mD,EA3GA,CAAwDxB,aCFxD,SAAA76D,GAGI,SAAAy8D,EACI74D,EACQwK,EACA2P,EACAxH,GAJZ,IAAArW,EAMIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAJJD,EAAAkO,+BACAlO,EAAA6d,6BACA7d,EAAAqW,gBA6GhB,OApHuDlT,EAAA,UAAAo5D,EAAAz8D,GAYnDy8D,EAAA/8D,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,GAAIA,KAAK4N,eACL,OAAO/N,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,GAGpB,IAAAuC,EAAAvC,EAAAuC,SAEFu4D,EAAmBv8D,KAAK+d,qBAAqBtc,GAEnD,IAAKuC,EACD,MAAM,IAAIM,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,OAAOvE,KAAK4d,2BAA2B9X,WAAW9B,GAC7ChC,KAAK,WACFjC,EAAKke,cAAgBle,EAAKmnC,oBAAoBq1B,EAAiBxrD,aAElE/O,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrC66D,EAAA/8D,UAAA2G,aAAA,SAAazE,GAAb,IAAA1B,EAAAC,KACI,OAAKA,KAAK4N,gBAIN5N,KAAKie,eAAiBje,KAAKie,cAAckpB,aACzCnnC,KAAKie,cAAckpB,WAAWC,YAAYpnC,KAAKie,eAC/Cje,KAAKie,mBAAgBtZ,GAGlB3E,KAAK4d,2BAA2B1X,eAClClE,KAAK,WAAM,OAAAnC,EAAAN,UAAM2G,aAAYpI,KAAAiC,EAAC0B,MATxB5B,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAYlC66D,EAAA/8D,UAAAm8B,OAAA,SAAOF,EAAkC/5B,GACrC,MAAM,IAAIy4D,EACN,uFAIRoC,EAAA/8D,UAAAq8B,QAAA,SAAQn6B,GACJ,IACMoC,EADQ7D,KAAK6M,OAAOjJ,WACJC,QAAQuB,eAE9B,OAAKvB,EAIE7D,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6B2tB,QAAQ/3B,EAAQyB,WAAY7D,IAJvD6K,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAQnC04D,EAAA/8D,UAAA2nC,oBAAR,SAA4BxE,GACxB,IAAM3xB,EAAYK,SAAS2pD,cAAc,IAAIr4B,GAE7C,IAAK3xB,EACD,MAAM,IAAItH,EAAA,EAAqB,+DAGnC,IAAM8L,EAASvV,KAAK4d,2BAA2BgqB,aAAa5nC,KAAKme,0BAIjE,OAFApN,EAAUw2B,YAAYhyB,GAEfA,GAGH+mD,EAAA/8D,UAAAwe,qBAAR,SAA6Btc,GACzB,GAAyB,uBAArBA,EAAQuC,UAAqCvC,EAAQgd,mBACrD,OAAOhd,EAAQgd,mBAGnB,GAAyB,oBAArBhd,EAAQuC,UAAkCvC,EAAQid,gBAClD,OAAOjd,EAAQid,gBAGnB,MAAM,IAAIjV,EAAA,GAGN6yD,EAAA/8D,UAAAsoC,yBAAR,WACI7nC,KAAKoW,YAAYG,SAAS,iBACtBzT,SACI0X,OAAQ,YACRC,eAAgB,wCAKpB6hD,EAAA/8D,UAAAuoC,SAAR,SAAiBvlC,GACb,GAAIA,GAA2B,aAAlBA,EAAMzC,QACf,MAAMyC,GAKN+5D,EAAA/8D,UAAA4e,yBAAR,SAAiCU,GADjC,IAAA9e,EAAAC,KAII,OAFA6e,EAAMC,iBAEC9e,KAAK4d,2BAA2BW,gBAClCvc,KAAK,SAAAwH,GAAe,OAAAzJ,EAAK6d,2BAA2BF,cAAclU,GAC9DxH,KAAK,WAAM,OAAAjC,EAAK6d,2BAA2Bue,sBAAsB3yB,EAAYU,qBACjFlI,KAAK,WAAM,OAAAjC,EAAK8nC,6BAChBvlC,MAAM,SAAAC,GAAS,OAAAxC,EAAK+nC,SAASvlC,MAPtCW,EAAA,YADC6b,EAAA,gDAULu9C,EApHA,CAAuD5B,KCNvD,SAAA76D,GACI,SAAA28D,EACI/4D,EACQg5D,GAFZ,IAAA18D,EAIIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAFJD,EAAA08D,2BAgBhB,OAnBqDv5D,EAAA,UAAAs5D,EAAA38D,GAQjD28D,EAAAj9D,UAAAm8B,OAAA,SAAOF,EAAkC/5B,GACrC,OAAOzB,KAAK6M,OAAO8B,SACf3O,KAAKy8D,uBAAuBhhC,eAAeD,EAAa/5B,KAIhE+6D,EAAAj9D,UAAAq8B,QAAA,SAAQn6B,GACJ,OAAOzB,KAAK6M,OAAO8B,SACf3O,KAAKy8D,uBAAuB9gC,gBAAgBl6B,KAGxD+6D,EAnBA,CAAqD9B,GC2BvC,SAAAgC,EACVj5D,EACA4iB,GAEA,IAAMC,EAAW,IAAI/Y,EAAA,EACfkZ,EAAepoB,OAAAqoB,EAAA,gBAAAroB,GACfgpB,EAAwB,IAAIC,EAAA,EAAsBjB,GAClDkC,EAAwB,IAAIC,EAAA,EAC9BnB,EACA,IAAIiB,EAAA,EAAoB,IAAIF,EAAA,EAAoB/B,KAE9CoiB,EAAapqC,OAAAorB,EAAA,iBAAAprB,GACbwpB,EAA6B,IAAIC,EAAA,EAA2B,IAAIC,EAAA,EAA2B1B,IAC3Fs2C,EAA8B,IAAIz0C,EAAA,EAA4B7B,GAC9D2B,EAA8B,IAAIC,EAAA,EAA4B00C,GAyFpE,OAvFAr2C,EAASqC,SAAS,SAAU,WACxB,WAAIi0C,EACAn5D,EACAokB,EACAG,EACA20C,EACA,IAAI5zC,EAAA,EAAsBtC,MAIlCH,EAASqC,SAAS,wBAAyB,WACvC,WAAIk0C,EACAp5D,EACA8kB,EACAV,EACA,IAAI2W,EAAA,EAA8BlY,GAClC0B,EACA3pB,OAAA2rB,EAAA,EAAA3rB,CAA4CooB,EAAcJ,GAC1D,IAAI4D,EAAA,EAAyBxD,MAIrCH,EAASqC,SAAS,WAAY,WAC1B,WAAIm0C,EACAr5D,EACAokB,EACAG,EACA,IAAImC,EAAA,EAAqB1D,GACzBJ,EACAoiB,KAIRniB,EAASqC,SAAS,WAAY,WAC1B,WAAIo0C,EACAt5D,EACA,IAAIwkB,EAAA,EAA4B00C,MAIxCr2C,EAASqC,SAAS,aAAc,WAC5B,WAAIq0C,EACAv5D,EACAokB,EACAG,EACA,IAAI0C,EAAA,EAAuBjE,MAInCH,EAASqC,SAAS,qBAAsB,WACpC,WAAIs0C,EACAx5D,EACAukB,EACA3pB,OAAAisB,EAAA,EAAAjsB,CACIoF,EACA,IAAI8mB,EAAA,EACA,IAAIrD,EAAA,EACA,IAAIF,EAAA,EAAsBP,MAItCgiB,KAIRniB,EAASqC,SAAS,kBAAmB,WACjC,WAAIs0C,EACAx5D,EACAukB,EACA3pB,OAAAisB,EAAA,EAAAjsB,CACIoF,EACA,IAAIknB,EAAA,GAER8d,KAIRniB,EAASqC,SAAS,UAAW,WACzB,WAAIu0C,EACAz5D,EACA,IAAI05D,EAAA,EACA,IAAIC,EAAA,EAAsB/2C,GAC1BkC,MAKLjC,qOCpIX,WAGI,SAAA+2C,EACcxwD,GAAA7M,KAAA6M,SAHJ7M,KAAA4N,gBAAiB,EAqB/B,OAXIyvD,EAAA99D,UAAAuG,WAAA,SAAWrE,GAGP,OAFAzB,KAAK4N,gBAAiB,EAEftB,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAGvCy5D,EAAA99D,UAAA2G,aAAA,SAAazE,GAGT,OAFAzB,KAAK4N,gBAAiB,EAEftB,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAE3Cy5D,EAtBA,KCUA,SAAAx9D,GAII,SAAAy9D,EACI75D,EACQm1B,EACA5qB,EACAC,EACA+B,GALZ,IAAAjQ,EAOIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YALJD,EAAA64B,4BACA74B,EAAAiO,8BACAjO,EAAAkO,+BACAlO,EAAAiQ,gBAIRjQ,EAAKkQ,QAAUC,SAqJvB,OAlKuDhN,EAAA,UAAAo6D,EAAAz9D,GAgBnDy9D,EAAA/9D,UAAAuG,WAAA,SAAWrE,GAAX,IAAA1B,EAAAC,KACI,GAAIA,KAAK4N,eACL,OAAO/N,EAAAN,UAAMuG,WAAUhI,KAAAkC,KAACyB,GAGpB,IAAA0O,EAAA1O,EAAA2O,OAAuBpM,EAAAvC,EAAAuC,SAE/B,IAAKmM,IAAkBnM,EACnB,MAAM,IAAIyF,EAAA,EAAqB,wEAGnC,OAAOzJ,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkB7K,IAC1EhC,KAAK,SAAA2B,GAAS,WAAI2I,QAAQ,SAACC,EAASC,GAGjC,GAFAzM,EAAKuQ,eAAiB3M,EAAMQ,eAAeC,iBAAiBJ,IAEvDjE,EAAKuQ,eACN,MAAM,IAAIhM,EAAA,EAAiBA,EAAA,EAAqBC,sBASpDxE,EAAKiQ,cAAcO,WAAWxQ,EAAKuQ,eANnB,WACZvQ,EAAKw9D,mBAAmBptD,GACnBnO,KAAKuK,GACLjK,MAAMkK,KAIVlK,MAAMkK,OAEdxK,KAAK,WAAM,OAAAnC,EAAAN,UAAMuG,WAAUhI,KAAAiC,EAAC0B,MAGrC67D,EAAA/9D,UAAA2G,aAAA,SAAazE,GACT,OAAKzB,KAAK4N,gBAIV5N,KAAKsQ,oBAAiB3L,EAEf9E,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IALf5B,EAAAN,UAAM2G,aAAYpI,KAAAkC,KAACyB,IAQlC67D,EAAA/9D,UAAAmT,cAAA,SAAcH,EAA6B9Q,GACvC,OAAO6K,QAAQC,QAAQvM,KAAK6M,OAAOjJ,aAGvC05D,EAAA/9D,UAAA28B,aAAA,SAAashC,EAAkB/7D,GAC3B,OAAOzB,KAAK6M,OAAO8B,SACf3O,KAAK44B,0BAA0BoD,qBAAqBwhC,EAAU/7D,KAI9D67D,EAAA/9D,UAAAg+D,mBAAR,SAA2B97D,GAA3B,IAAA1B,EAAAC,KACI,OAAO,IAAIsM,QAAQ,SAACC,EAASC,GACjB,IAAAuE,EAAAtP,EAAAsP,UAAWnO,EAAAnB,EAAAg8D,uBAAA,IAAA76D,EAAA,aAAAA,EAA4B+N,EAAAlP,EAAAuP,eAAA,IAAAL,EAAA,aAAAA,EAAoBO,EAAAzP,EAAA0P,eAAA,IAAAD,EAAA,aAAAA,EAC7DJ,EAAa/Q,EAAKuQ,gBAAkBvQ,EAAKuQ,eAAe7F,OAAOqG,WAErE,IAAKM,SAASC,eAAeN,GACzB,OAAOvE,EAAO,IAAI/C,EAAA,EAAqB,8EAG3C,IAAK1J,EAAKkQ,QAAQqB,kBACd,OAAO9E,EAAO,IAAI2C,EAAA,EAAoBA,EAAA,EAAwB2qB,yBAGlE,IAAKhpB,EACD,OAAOtE,EAAO,IAAIlI,EAAA,EAAiBA,EAAA,EAAqBC,uBAG5D,IAAMyN,EAAS,IAAIjS,EAAKkQ,QAAQqB,kBAAkBW,QAAQyrD,aACtDjsD,QACIC,WAAY,cAEhBC,MAAO,6EACPC,SAAUd,EACV2sD,gBAAiB,SAAA5rD,GACb9R,EAAK49D,8BACA37D,KAAK,WAAM,OAAAy7D,EAAgB5rD,KAC3BvP,MAAM0O,IAEfA,QAAS,SAAAzO,GACLiK,EAAOjK,GACPyO,EAAQzO,IAEZ4O,QAAS,SAAAU,GACL9R,EAAKgS,sBAAsBF,GACtB7P,KAAK,WACFuK,IACA4E,EAAQU,KAEXvP,MAAM0O,MAMnB,OAFAgB,EAAO7S,KAAK4R,GAELiB,KAIPsrD,EAAA/9D,UAAAo+D,4BAAR,eAAA59D,EAAAC,KACUgE,EAAWhE,KAAKsQ,gBAAkBtQ,KAAKsQ,eAAe/K,GACtD6K,EAASpQ,KAAK6M,OAAOjJ,WAAWqL,eAAetI,YAAY,UAC3D8J,EAAcL,EAASA,EAAOK,iBAAc9L,EAElD,IAAKX,IAAayM,EACd,MAAM,IAAI0B,EAAA,EAGd,OAAOnS,KAAK6M,OAAO8B,SACftQ,OAAAwD,EAAA,aAAAxD,CAAak3D,EAAA,EAA2BC,4BAAwB7wD,GAAaX,SAAQA,KAEpFhC,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SACpB5O,EAAKkO,6BAA6B6tB,mBAAmB93B,GAAYyM,YAAWA,OAE/EzO,KAAK,SAAA2B,GACF,IAAMyM,EAASzM,EAAMsL,eAAetI,YAAY,UAC1C0L,EAAgBjC,GAAUA,EAAO6kC,UAAY7kC,EAAO6kC,SAAS1iC,QAC7DA,EAAU5O,EAAMuG,gBAAgBC,qBAEtC,IAAsB,IAAlBkI,EACA,MAAM,IAAIF,EAAA,EAGd,OAAKE,GAAiBhU,OAAAoU,EAAA,EAAApU,CAAuBgU,EAAeE,OACjDxS,EAAK8M,OAAOjJ,WAGhB7D,EAAK8M,OAAO8B,SACf5O,EAAK64B,0BAA0BlmB,cAAcrU,OAAAsU,EAAA,EAAAtU,CAAuBgU,OAG3ErQ,KAAK,WAAM,OAAAjC,EAAK8M,OAAO8B,SACpBtQ,OAAAwD,EAAA,aAAAxD,CAAak3D,EAAA,EAA2BE,4BAAwB9wD,GAAaX,SAAQA,OAExF1B,MAAM,SAAAC,GAAS,OAAAxC,EAAK8M,OAAO8B,SACxBtQ,OAAAwD,EAAA,kBAAAxD,CAAkBk3D,EAAA,EAA2BG,oBAAqBnzD,GAASyB,SAAQA,QAIvFs5D,EAAA/9D,UAAAwS,sBAAR,SAA8BF,GAC1B,OAAO7R,KAAK6M,OAAO8B,SACf3O,KAAKiO,6BAA6B2E,eAAe,UAC7CnC,YAAaoB,EAAegB,gCAI5CyqD,EAlKA,CAAuDM,KCRvD,SAAA/9D,GACI,SAAAg+D,EACIp6D,EACQm1B,GAFZ,IAAA74B,EAIIF,EAAA/B,KAAAkC,KAAMyD,IAAMzD,YAFJD,EAAA64B,8BAgBhB,OAnBqD11B,EAAA,UAAA26D,EAAAh+D,GAQjDg+D,EAAAt+D,UAAAmT,cAAA,SAAcH,EAA6B9Q,GACvC,OAAOzB,KAAK6M,OAAO8B,SACf3O,KAAK44B,0BAA0BlmB,cAAcH,EAAS9Q,KAI9Do8D,EAAAt+D,UAAA28B,aAAA,SAAashC,EAAkB/7D,GAC3B,OAAOzB,KAAK6M,OAAO8B,SACf3O,KAAK44B,0BAA0BoD,qBAAqBwhC,EAAU/7D,KAG1Eo8D,EAnBA,CAAqDD,GCMvC,SAAAE,EACVr6D,EACA4iB,GAEA,IAAMC,EAAW,IAAI/Y,EAAA,EACf8Z,EAAwB,IAAIC,EAAA,EAAsBjB,GAClD03C,EAA2B,IAAI5/B,EAAA,EAAyB9X,GACxD23C,EAA2B,IAAI9/B,EAAA,EAAyB6/B,EAA0B12C,GAmBxF,OAjBAf,EAASqC,SAAS,SAAU,WACxB,WAAIs1C,EACAx6D,EACAu6D,EACA,IAAIl2C,EAAA,EAA2B,IAAIC,EAAA,EAA2B1B,IAC9D,IAAI4B,EAAA,EAA4B,IAAIC,EAAA,EAA4B7B,IAChE,IAAI0C,EAAA,EAAsB1qB,OAAAqoB,EAAA,gBAAAroB,OAIlCioB,EAASqC,SAAS,UAAW,WACzB,WAAIu1C,EACAz6D,EACAu6D,KAID13C,gGCvCJ,IAAM63C,EAAoB,yFCAjCzgE,EAAAD,QAAAkC,QAAA,6CCAAjC,EAAAD,QAAAkC,QAAA,0ECIAy+D,EAAA,SAAAv+D,GACI,SAAAu+D,EAAYn8D,GAAZ,IAAAlC,EACIF,EAAA/B,KAAAkC,KAAMiC,GACFnC,QAAS,2CACXE,YAEFD,EAAKE,KAAO,YAEpB,OAR0CM,EAAA,UAAA69D,EAAAv+D,GAQ1Cu+D,EARA,OAA0C,yHCM5B,SAAAC,EAA2DjnB,GACrE,IAAMG,EAAe,SAAA13C,GAAG,SAAA23C,mDAAsB,OAARj3C,EAAA,UAAAi3C,EAAA33C,GAAQ23C,EAAzB,CAAiBJ,GAiBtC,OAfA/4C,OAAOo5C,oBAAoBL,EAAO73C,WAC7B20C,QAAQ,SAAAh1C,GACL,IAAMm4C,EAAah5C,OAAOq5C,yBAAyBN,EAAO73C,UAAWL,GAEhEm4C,GAAsB,gBAARn4C,GAInBb,OAAOC,eACHi5C,EAAgBh4C,UAChBL,EAQhB,SAAmDk4C,EAAgBl4C,EAAam4C,GAC5E,GAAgC,mBAArBA,EAAWz4C,MAClB,OAAOy4C,EAGX,IAAIinB,EAAW,IAAIC,EAAA,EACfr6D,EAASmzC,EAAWz4C,MACpB4/D,EAAiBngE,OAAAqsC,EAAA,QAAArsC,CAAQ6F,EAAQ,eAAC,IAAAqyC,KAAApc,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAoc,EAAApc,GAAAC,UAAAD,GAAY,OAAAmkC,EAAShoB,OAAMjc,MAAfikC,EAAmB/nB,KAErE,OAAOl4C,OAAAogE,EAAA,EAAApgE,CAAc+4C,EAAQl4C,GACzBV,IAAG,WAAH,IAAAuB,EAAAC,KACUpB,EAAQ,eAAE,IAAA23C,KAAApc,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAoc,EAAApc,GAAAC,UAAAD,GACZ,IAAMukC,EAAcF,EAAe1gE,KAAIu8B,MAAnBmkC,GAAoBz+D,GAAIu6B,OAAKic,IAEjD,GAAuC,IAAnC+nB,EAASxnB,aAAYzc,MAArBikC,EAAyB/nB,GACzB,OAAOmoB,EAGX,IAAMC,EAAWz6D,EAAOpG,KAAIu8B,MAAXn2B,GAAYnE,GAAIu6B,OAAKic,IAEtC,OAAIl4C,OAAAugE,EAAA,EAAAvgE,CAAQsgE,EAAUD,GAAeh+B,UAAW,SAAAxhC,GAAO,OAACb,OAAAwgE,EAAA,EAAAxgE,CAAUa,MACvDw/D,GAGXF,EAAeM,MAAMjnB,IAAIymB,EAAShoB,OAAMjc,MAAfikC,EAAmB/nB,GAAOooB,GAE5CA,IAKX,OAFAtgE,OAAOC,eAAe0B,KAAMd,EAAGqB,EAAA,YAAO82C,GAAYz4C,MAAKA,KAEhDA,GAEXi5C,IAAG,SAACj5C,GACA0/D,EAAW,IAAIC,EAAA,EACfr6D,EAAStF,EACT4/D,EAAiBngE,OAAAqsC,EAAA,QAAArsC,CAAQ6F,EAAQ,eAAC,IAAAqyC,KAAApc,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAoc,EAAApc,GAAAC,UAAAD,GAAY,OAAAmkC,EAAShoB,OAAMjc,MAAfikC,EAAmB/nB,QA3C7DwoB,CAAwB3nB,EAAO73C,UAAWL,EAAKm4C,MAIpDE,2EClBXynB,EAAA,WACI,SAAAA,EACYC,GAAAj/D,KAAAi/D,uBAkBhB,OAdID,EAAAz/D,UAAAs7B,WAAA,SAAWp5B,GADX,IAAA1B,EAAAC,KAEI,OAAO+5C,EAAA,WAAW96C,OAAO,SAAC0C,GACtBA,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa6gE,EAAA,EAAiBngB,sBAE5Ch/C,EAAKk/D,qBAAqBpkC,WAAWp5B,GAChCO,KAAK,SAAAC,GACFN,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAa6gE,EAAA,EAAiBrgB,oBAAqB58C,EAASE,OAC1ER,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkB6gE,EAAA,EAAiBpgB,iBAAkB78C,SAVpF1B,EAAA,YADCi6C,EAAA,kCAeLwkB,EApBA,4DCJAG,EAAA,WACI,SAAAA,EACYz8D,GAAA1C,KAAA0C,iBAchB,OAXIy8D,EAAA5/D,UAAAs7B,WAAA,SAAWj4B,OAAEC,QAAA,IAAAD,QAAAC,QAGT,OAAO7C,KAAK0C,eAAelE,IAFf,qCAGRqE,QAAOA,EACPC,SACI0X,OAAQk+B,EAAA,EAAYC,OACpB+B,iBAAkBd,EAAA,MAIlCulB,EAhBA,2ECJYC,iBAAZ,SAAYA,GACRA,IAAA,iDACAA,IAAA,6BACAA,IAAA,qCACAA,IAAA,6CACAA,IAAA,iDACAA,IAAA,+BACAA,IAAA,2CACAA,IAAA,mCACAA,IAAA,mCACAA,IAAA,+CAVJ,CAAYA,WAaZ,IAAAC,EAAA,SAAAx/D,GACI,SAAAw/D,EACWv8C,GADX,IAAA/iB,EAGIF,EAAA/B,KAAAkC,KAMR,SAAyBC,GACrB,OAAQA,GACR,KAAKm/D,EAAqBE,sBACtB,MAAO,iEAEX,KAAKF,EAAqBzyC,YACtB,MAAO,sDAEX,KAAKyyC,EAAqB1lC,oBACtB,MAAO,8DAEX,KAAK0lC,EAAqBj4D,gBACtB,MAAO,0DAEX,KAAKi4D,EAAqBhyD,sBAC1B,KAAKgyD,EAAqBG,mBACtB,MAAO,+DAEX,KAAKH,EAAqBzlC,aACtB,MAAO,uDAEX,KAAKylC,EAAqBxlC,eACtB,MAAO,0EAEX,KAAKwlC,EAAqBzgD,eACtB,MAAO,yDAEX,KAAKygD,EAAqB76D,qBACtB,MAAO,2FAEX,QACI,MAAO,+DArCDi7D,CAAgB18C,KAAS9iB,YAFxBD,EAAA+iB,UAIP/iB,EAAKE,KAAO,iBAEpB,OAR8CM,EAAA,UAAA8+D,EAAAx/D,GAQ9Cw/D,EARA,CAA8CI,EAAA,0GCThC,SAAAC,EACVz/D,EACAsC,EACAwB,GAEA,OAOJ,SAAuBuQ,GACnB,OAAOA,GAAUA,EAAOrU,MAAQqU,EAAO/R,MARnCo9D,CAAcp9D,GACPlE,OAAAgsD,EAAA,OAAAhsD,CAAOA,OAAAuhE,EAAA,GAAAvhE,CAAGkE,GAAQlE,OAAAwhE,EAAA,OAAAxhE,CAAOA,OAAAi6C,EAAA,kBAAAj6C,CAAkB4B,EAAMsC,EAAMiB,QAASO,KAGpE1F,OAAAwhE,EAAA,OAAAxhE,CAAOA,OAAAi6C,EAAA,kBAAAj6C,CAAkB4B,EAAMsC,EAAOwB,uECbrC+7D,iBAAZ,SAAYA,GACRA,IAAA,+DACAA,IAAA,mDACAA,IAAA,iDACAA,IAAA,mDAJJ,CAAYA,WAOZ,IAAAC,EAAA,SAAAlgE,GACI,SAAAkgE,EACWj9C,GADX,IAAA/iB,EAGIF,EAAA/B,KAAAkC,KAMR,SAAyBC,GACrB,OAAQA,GACR,KAAK6/D,EAAwBjmC,uBACzB,MAAO,oFAEX,KAAKimC,EAAwB1wD,sBACzB,MAAO,mFAEX,KAAK0wD,EAAwBhmC,uBACzB,MAAO,oFAEX,QACI,MAAO,8EAlBD0lC,CAAgB18C,KAAS9iB,YAFxBD,EAAA+iB,UAIP/iB,EAAKE,KAAO,oBAEpB,OARiDM,EAAA,UAAAw/D,EAAAlgE,GAQjDkgE,EARA,CAAiDN,EAAA,wFCKjDO,EAAA,WACI,SAAAA,EACYt9D,GAAA1C,KAAA0C,iBAqGhB,OAlGIs9D,EAAAzgE,UAAAg8B,gBAAA,SACIC,EACA/5B,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GAAS,OAAAs2C,EAAA,WAAW96C,OAAO,SAAC0C,GAC/B,IAAMgC,EAAQF,EAAMG,WACd8C,EAAW/C,EAAM+C,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAIu5D,EAAA,EAAiBA,EAAA,EAAqB94D,iBAGpD,IAAMyC,EAAWjG,EAAMiG,SAASC,cAEhC,GAAID,IAAaA,EAAS0oD,QACtB,MAAM,IAAI4N,EAAA,EAAc,oDAG5B,IAEIC,EAFEz2D,EAAiB/F,EAAM+F,eAAeC,oBAI5C,GAAKD,EAEE,CACKA,EAAA0Y,QAAA,IAASg+C,EAAA7/D,EAAA,OAAAmJ,GAAA,YAEjBy2D,EAAyB5/D,EAAA,YAClB6/D,EACA5kC,QANP2kC,EAA4B3kC,EAUhC75B,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAagiE,EAAA,EAAyBhiB,2BAEpDt+C,EAAKugE,8BAA8B55D,EAASnB,GAAI46D,EAA2B1+D,GACtEO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAagiE,EAAA,EAAyBtiB,yBAA0B57C,IAC9ER,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkBgiE,EAAA,EAAyB/hB,sBAAuBr8C,UAKjG+9D,EAAAzgE,UAAAmT,cAAA,SACIH,EACA9Q,GAFJ,IAAA1B,EAAAC,KAII,OAAO,SAAAyD,GAAS,OAAAs2C,EAAA,WAAW96C,OAAO,SAAC0C,GAC/B,IAAMgC,EAAQF,EAAMG,WACd8C,EAAW/C,EAAM+C,SAASC,cAEhC,IAAKD,EACD,MAAM,IAAIu5D,EAAA,EAAiBA,EAAA,EAAqB94D,iBAGpDxF,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAagiE,EAAA,EAAyBliB,gCAEpD,IAAMz0C,EAAiB/F,EAAM+F,eAAeC,oBAOtCw2D,EAAyB5/D,EAAA,YACxBgS,GACH8zB,WAAgC,IAAlB9zB,EAAQ8zB,OAAyB38B,EAAiBA,EAAe28B,MAAQ9zB,EAAQ8zB,QAG/F38B,GAAkBA,EAAenE,KACjC46D,EAA0B56D,GAAKmE,EAAenE,IAGlDxF,EAAKugE,8BAA8B55D,EAASnB,GAAI46D,EAA2B1+D,GACtEO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAA8sC,EAAA,aAAA9sC,CAAagiE,EAAA,EAAyBz0B,8BAA+BzpC,IACnFR,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAA8sC,EAAA,kBAAA9sC,CAAkBgiE,EAAA,EAAyBjiB,2BAA4Bn8C,UAK9F+9D,EAAAzgE,UAAA+gE,8BAAR,SACIh7C,EACA/S,EACA9Q,GAEA,OAAK8Q,EAAQhN,GAINvF,KAAK0C,eAAegQ,cAAc4S,EAAY/S,EAAS9Q,GAHnDzB,KAAK0C,eAAe69D,cAAcj7C,EAAY/S,EAAS9Q,IAK1Eu+D,EAvGA,0DCNMtmB,GACFd,SACI,uCACA,sCACA,WACA,sBACFlrC,KAAK,MAGX8yD,EAAA,WACI,SAAAA,EACY99D,GAAA1C,KAAA0C,iBAiBhB,OAdI89D,EAAAjhE,UAAAghE,cAAA,SAAcj7C,EAAoB/S,EAAsC3P,OAAEC,QAAA,IAAAD,QAAAC,QAChEy8B,EAAM,6BAA6Bha,EAAU,mBAC7CxiB,GAAY0X,OAAQo/B,EAAA,EAAYjB,QAEtC,OAAO34C,KAAK0C,eAAe6X,KAAK+kB,GAAOn9B,KAAMoQ,EAASkmC,OAAQiB,EAAgB52C,QAAOA,EAAED,QAAOA,KAGlG29D,EAAAjhE,UAAAmT,cAAA,SAAc4S,EAAoB/S,EAAmD3P,OAAEC,QAAA,IAAAD,QAAAC,QAC3E0C,EAAAgN,EAAAhN,GAAIpD,EAAA5B,EAAA,OAAAgS,GAAA,OACN+sB,EAAM,6BAA6Bha,EAAU,oBAAoB/f,EACjEzC,GAAY0X,OAAQo/B,EAAA,EAAYjB,QAEtC,OAAO34C,KAAK0C,eAAeo2C,IAAIxZ,GAAOmZ,OAAQiB,EAAgBv3C,KAAIA,EAAEW,QAAOA,EAAED,QAAOA,KAE5F29D,EAnBA,2DCfAC,EAAA,WAKI,SAAAA,EAAYh/D,GACRzB,KAAK0gE,cACL1gE,KAAK2gE,cACL3gE,KAAKglD,SAAQzkD,EAAA,UAAKimB,aAAc,WAAc/kB,GA8CtD,OA3CIg/D,EAAAlhE,UAAAf,IAAA,SAAIsO,EAAWE,GACX,IACI,OAAOhN,KAAK4gE,aACR9zD,GAAS9M,KAAKglD,SAASx+B,aACvBxZ,GAAcF,GAAS9M,KAAKglD,SAASx+B,cAE3C,MAAOjkB,GACL,OAAOvC,KAAK4gE,aACR5gE,KAAKglD,SAASx+B,aACdxZ,GAAchN,KAAKglD,SAASx+B,gBAKxCi6C,EAAAlhE,UAAAopB,SAAA,SAAS7b,EAAUu0C,GACf,GAAIrhD,KAAKiN,YAAYH,GACjB,MAAM,IAAI+zD,EAAA,EAAqB,IAAI/zD,EAAK,4BAG5C9M,KAAK0gE,WAAW5zD,GAASu0C,GAGnBof,EAAAlhE,UAAA0N,YAAV,SAAsBH,GAClB,QAAS9M,KAAK0gE,WAAW5zD,IAGrB2zD,EAAAlhE,UAAAuhE,aAAR,SAAqBh0D,GACjB,QAAS9M,KAAK2gE,WAAW7zD,IAGrB2zD,EAAAlhE,UAAAqhE,aAAR,SAAqB9zD,EAAeE,GAChC,IAAKhN,KAAK8gE,aAAa9zD,GAAa,CAChC,IAAMq0C,EAAUrhD,KAAK0gE,WAAW5zD,GAEhC,IAAKu0C,EACD,MAAM,IAAIwf,EAAA,EAAqB,IAAI/zD,EAAK,wBAG5C9M,KAAK2gE,WAAW3zD,GAAcq0C,IAGlC,OAAOrhD,KAAK2gE,WAAW3zD,IAE/ByzD,EAtDA,uCCFc,SAAAM,EAA2B3+D,GACrC,OAAO/D,OAAOuiC,KAAKx+B,GACdm4B,OAAO,SAAAr7B,GAAO,YAAcyF,IAAdvC,EAAKlD,KACnBouB,IAAI,SAAApuB,GACD,IAAMN,EAAQwD,EAAKlD,GAEnB,MAAqB,iBAAVN,EACGM,EAAG,IAAI8hE,mBAAmBpiE,GAG9BM,EAAG,IAAI8hE,mBAAmBpmD,KAAKC,UAAUjc,IAAU,MAEhE8O,KAAK,8ECNduzD,EAAA,WACI,SAAAA,EACYjxD,EACDC,QAAA,IAAAA,MAAAC,QADClQ,KAAAgQ,gBACDhQ,KAAAiQ,UAcf,OAXIgxD,EAAA1hE,UAAA8O,KAAA,SAAKoH,GAAL,IAAA1V,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,MAAKpK,EAAW,WAAa,IAAE,0CAC1CzT,KAAK,WACF,IAAKjC,EAAKkQ,QAAQgJ,WACd,MAAM,IAAIumB,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQgJ,cAGpCgoD,EAjBA,kDCJAC,EAAA,SAAArhE,GACI,SAAAqhE,EACW3+D,GADX,IAAAxC,EAGIF,EAAA/B,KAAAkC,KAAM,qGAAmGA,YAFlGD,EAAAwC,QAIPxC,EAAKE,KAAO,oCAEpB,OARgEM,EAAA,UAAA2gE,EAAArhE,GAQhEqhE,EARA,MAAgE,2DCahEC,EAAA,WAGI,SAAAA,EACYnhD,GAAAhgB,KAAAggB,uBAuHhB,OApHImhD,EAAA5hE,UAAAuG,WAAA,SACIY,EACAsD,EACAo3D,GAHJ,IAAArhE,EAAAC,KAKI,IAAKgK,EAAc0F,YACf,MAAM,IAAI8hD,EAAA,EAAiBA,EAAA,EAAqBjtD,sBAKpD,OAFAvE,KAAKggB,qBAAqBla,WAAWkE,EAAc0F,aAE5C1P,KAAKggB,qBAAqBgyC,4BAC5BhwD,KAAK,SAAAq/D,GAGF,OAFAthE,EAAKuhE,uBAAyBD,EAEvBthE,EAAKwhE,wBACR76D,EACAsD,EAAcmC,mBACdi1D,MAKhBD,EAAA5hE,UAAAmiB,SAAA,WACI,OAAO1hB,KAAKggB,qBAAqB0B,YAGrCy/C,EAAA5hE,UAAAiiE,cAAA,SAAch4D,GACV,IAAMhG,EAAUoX,KAAK6mD,MAAMj4D,EAAYk4D,kBAAkBC,iBAAiB70D,OAAO80D,gBAAgB,GAEjG,OACIryD,MAAO/L,EAAQ+L,MACftP,KAAMuD,EAAQvD,KACd46C,YAAar3C,EAAQq3C,YACrB3U,SACI27B,SAAUr+D,EAAQ0iC,QAAQ27B,SAC1BC,SAAUt+D,EAAQ0iC,QAAQ47B,SAC1BC,QAASv+D,EAAQ0iC,QAAQ67B,SAE7BC,QAASx+D,EAAQw+D,UAIjBb,EAAA5hE,UAAAgiE,wBAAR,SACI76D,EACAyF,EACAi1D,GAEA,IAAKj1D,EAAmB81D,cACpB,MAAM,IAAIzQ,EAAA,EAAiBA,EAAA,EAAqBjtD,sBAGpD,IAAM29D,GACFC,cACIC,QAASj2D,EAAmB81D,cAC5BI,aAAcl2D,EAAmBm2D,mBACjCxxD,WAAY3E,EAAmBo2D,kBAEnCC,iBACI1oD,aAAcpT,EAASmB,KAAKkS,SAASzD,KACrCmsD,iBAAkB,QAClBC,WAAYrkE,OAAAomD,EAAA,MAAApmD,CAAMqI,EAASa,WAAY,GAAGie,QAAQ,IAEtDm9C,kBACIC,wBAAwB,EACxBC,qBAAsB,QAE1BC,yBAA0B1B,EAC1B2B,eAAe,EACfC,qBAAqB,GAGzB,OAAOhjE,KAAKijE,0DACRjjE,KAAKshE,uBAAuB4B,yBAAyBhB,KAIrDf,EAAA5hE,UAAA0jE,0DAAR,SAAkEE,GAC9D,OACIC,WAAY,EACZC,gBAAiB,EACjBlB,cACIC,QAASe,EAAgChB,aAAaC,QACtDtxD,WAAYqyD,EAAgChB,aAAarxD,WACzDuxD,aAAcc,EAAgChB,aAAaE,cAE/DiB,wBACIrjE,KAAM,OACNsjE,YACIC,oBAAqB,WAAY,kBACjCC,oBAAqBN,EAAgCR,iBAAiBc,oBACtEb,wBAAwB,EACxBc,0BACIC,OAAQ,OACRX,qBAAqB,IAG7BY,2BACI3jE,KAAM,kBACNsjE,YACI/9D,QAAS,YACTq+D,uBAAwB,KACxBC,qCAAsCX,EAAgCY,oCAAoCR,WAAW,sCACrHS,uBAAwBb,EAAgCY,oCAAoCR,WAAW,wBACvGU,uBAAwBd,EAAgCY,oCAAoCR,WAAW,4BAInHf,gBAAiBW,EAAgCX,gBACjDO,eAAe,EACfD,wBAAyBK,EAAgCL,wBACzDoB,2BACIlB,oBAAqBG,EAAgCH,uBAIrE7B,EA3HA,2DCFAgD,EAAA,oBAAAA,KA+EA,OA9EIA,EAAA5kE,UAAAuG,WAAA,SACIY,EACAsD,EACAo3D,GAEA,OAAO90D,QAAQC,QAAQvM,KAAKokE,uDACxB19D,EACAsD,EAAcmC,mBACdi1D,KAIR+C,EAAA5kE,UAAAmiB,SAAA,WACI,OAAOpV,QAAQC,WAGnB43D,EAAA5kE,UAAAiiE,cAAA,SAAch4D,GACV,IACI,IAAMhG,EAAUoX,KAAK6mD,MAAMj4D,EAAYk4D,kBAAkBC,iBAAiB70D,OAE1E,OACIyC,MAAO/L,EAAQ+B,GACftF,KAAMuD,EAAQvD,KACdimC,SACI27B,SAAUr+D,EAAQqY,KAAKqS,MACvB4zC,SAAUt+D,EAAQqY,KAAK+R,QAGjC,MAAOy2C,GACL,MAAM,IAAI7S,EAAA,EAAqB,+CAI/B2S,EAAA5kE,UAAA6kE,uDAAR,SACI19D,EACAyF,EACAi1D,GAEA,OACIgC,WAAY,EACZC,gBAAiB,EACjBlB,cACIC,QAASj2D,EAAmB81D,cAC5BnxD,WAAY3E,EAAmBo2D,iBAC/BF,aAAcl2D,EAAmBm2D,oBAErCgB,wBACIrjE,KAAM,OACNsjE,YACIC,oBAAqB,WAAY,kBACjCC,qBAAsB,OAAQ,WAAY,MAAO,aAAc,QAC/Db,wBAAwB,EACxBc,0BACIC,OAAQ,OACRX,qBAAqB,IAG7BY,2BACI3jE,KAAM,kBACNsjE,YACI/9D,QAAS,SACT8+D,iBAAkBn4D,EAAmBo4D,cACrCC,wBAAyBr4D,EAAmBs4D,yBAIxDjC,iBACI1oD,aAAcpT,EAASmB,KAAKkS,SAASzD,KACrCmsD,iBAAkB,QAClBC,WAAYrkE,OAAAomD,EAAA,MAAApmD,CAAMqI,EAASa,WAAY,GAAGie,QAAQ,IAEtDu9C,eAAe,EACfD,yBAA0B1B,EAC1B8C,2BACIlB,qBAAqB,KAIrCmB,EA/EA,kDCPAO,EAAA,WAGI,SAAAA,EACY10D,GAAAhQ,KAAAgQ,gBAERhQ,KAAKiQ,QAAUC,OAcvB,OAXIw0D,EAAAnlE,UAAA4V,WAAA,eAAApV,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,+CACX7d,KAAK,WACF,IAAKjC,EAAKkQ,QAAQmF,OACd,MAAM,IAAIoqB,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQmF,UAGpCsvD,EApBA,wBCNAhnE,EAAAD,QAAAkC,QAAA,gCCAAjC,EAAAD,QAAAkC,QAAA,4JCEc,SAAAglE,EAAiC7kE,GAC3C,GAAKA,EAAQ0D,SAAY1D,EAAQ0D,QAAQ6lD,UAAzC,CAIA,IAAMlnD,EAAOiP,SAASC,eAAevR,EAAQ0D,QAAQ6lD,WAEhDlnD,IAAQA,EAAKyiE,aAAa,uBAI/BziE,EAAK0iE,aAAa,qBAAsB,KCPtC,SAAAC,EAAwBviE,GAC1B,MAC6B,iBAAlBA,EAAMzC,SACS,iBAAfyC,EAAMtC,OACa,iBAAlBsC,EAAMugB,UAAyBvgB,EAAMugB,UAC7CvgB,aAAiBnC,oBCUzB,WAII,SAAA2kE,EACYlgB,EACAC,EACAkgB,QAAA,IAAAA,UAFAhlE,KAAA6kD,mBACA7kD,KAAA8kD,iBACA9kD,KAAAglE,mBAERhlE,KAAK6kD,iBAAiBnJ,SAgF9B,OA7EIqpB,EAAAxlE,UAAA0lE,aAAA,WACI,IAAMnlE,GACFG,KAAMklD,EAAA,EAA0BC,kBAGpCplD,KAAKklE,aAAaplE,IAGtBilE,EAAAxlE,UAAA4lE,UAAA,SAAU3hE,GACN,IAAM1D,GACFG,KAAMklD,EAAA,EAA0BE,cAChC7hD,QAASxD,KAAKolE,gBAAgB5hE,IAGlCxD,KAAKklE,aAAaplE,IAGtBilE,EAAAxlE,UAAA8lE,eAAA,SAAe7hE,GACX,IAAM1D,GACFG,KAAMklD,EAAA,EAA0Bc,WAChCziD,QAASxD,KAAKolE,gBAAgB5hE,IAGlCxD,KAAKklE,aAAaplE,IAGtBilE,EAAAxlE,UAAA+lE,gBAAA,SAAgB9hE,GACZ,IAAM1D,GACFG,KAAMklD,EAAA,EAA0BK,YAChChiD,QAAOA,GAGXxD,KAAKklE,aAAaplE,IAGtBilE,EAAAxlE,UAAAgmE,WAAA,WACI,IAAMzlE,GACFG,KAAMklD,EAAA,EAA0BG,gBAGpCtlD,KAAKklE,aAAaplE,IAGtBilE,EAAAxlE,UAAAimE,cAAA,WACI,IAAM1lE,GACFG,KAAMklD,EAAA,EAA0BO,WAGpC1lD,KAAKklE,aAAaplE,IAGtBilE,EAAAxlE,UAAAkmE,cAAA,SAAcC,GACV1lE,KAAK6kD,iBAAiBhJ,YAAY0K,EAAA,EAAyBC,gBAAiB,SAAC5jD,OAAEY,EAAAZ,EAAAY,QAC3EkiE,EAAQliE,MAIRuhE,EAAAxlE,UAAA2lE,aAAR,SAAqBplE,GAArB,IAAAC,EAAAC,KACI3B,OAAOuiC,KAAK5gC,KAAKglE,kBACZ9wB,QAAQ,SAAAh1C,GACL,IAAMwmE,EAAU3lE,EAAKilE,iBAAiB9lE,GAElCwmE,GACAA,EAAQ5nE,KAAK,KAAMgC,KAI/BE,KAAK8kD,eAAevqC,KAAKza,IAGrBilE,EAAAxlE,UAAA6lE,gBAAR,SAAwB7iE,GACpB,OACIzC,QAASyC,EAAMzC,QACfG,KAAM6kE,EAAcviE,GAASA,EAAMtC,UAAO0E,EAC1Cme,QAASgiD,EAAcviE,GAASA,EAAMugB,aAAUne,IAG5DogE,EAzFA,KCnBA,oBAAAY,KAcA,OAbIA,EAAApmE,UAAA0lE,aAAA,aAEAU,EAAApmE,UAAA4lE,UAAA,aAEAQ,EAAApmE,UAAA8lE,eAAA,aAEAM,EAAApmE,UAAA+lE,gBAAA,aAEAK,EAAApmE,UAAAgmE,WAAA,aAEAI,EAAApmE,UAAAimE,cAAA,aAEAG,EAAApmE,UAAAkmE,cAAA,aACJE,EAdA,GCiCc,SAAAC,EAA0CnkE,SAC9CokE,EAAepkE,EAAQokE,cAAgB31D,OAAO41D,OAGpD,OAAI51D,SAAW21D,EACJ,IAAIE,EAGR,IAAIC,EACP,IAAIjc,EAAA,EAA6CtoD,EAAQwkE,cACzD,IAAIjc,EAAA,EAAyCvoD,EAAQwkE,aAAcJ,KAAajjE,MAC7EuiD,EAAA,EAA0BK,aAAcmf,EAAsB/hE,mCC1BzE,WASI,SAAAsjE,EACIz7D,EACQ07D,GAAAnmE,KAAAmmE,UAEF,IAAAvjE,EAAA5C,KAAAomE,iBAAA37D,GAAEzH,EAAAJ,EAAAI,OAAQqjE,EAAAzjE,EAAAyjE,QAASC,EAAA1jE,EAAA0jE,aAEzBtmE,KAAKumE,QAAUvjE,EACfhD,KAAKwmE,SAAWH,EAChBrmE,KAAKymE,cAAgBH,EACrBtmE,KAAK0mE,eAiIb,OAjHIR,EAAA3mE,UAAAonE,QAAA,SAAQzvB,GAAR,IAAAn3C,EAAAC,KACI3B,OAAOuiC,KAAKsW,GAAMhD,QAAQ,SAAAh1C,GACtB,IAAM0nE,EAAoBC,sBAAc3vB,EAAKh4C,GAE7Ca,EAAK0mE,cAAiBI,sBAAc3nE,GAASa,EAAK0mE,cAAcG,MASxEV,EAAA3mE,UAAAunE,UAAA,WACI,OAAO9mE,KAAK+mE,mBAAqB/mE,KAAKumE,QA5DvB,MAiFnBL,EAAA3mE,UAAAynE,UAAA,SAAU9nE,EAAakD,QAAA,IAAAA,UACnB,IAAM6kE,EAAiBJ,sBAAc3nE,EAErC,GAA+C,iBAApCc,KAAKymE,cAAcQ,GAG1B,OAFAjnE,KAAKmmE,QAAQ7oC,KAAK,oBAAoB2pC,EAAW,gBAE1CA,EAGX,IAAKjnE,KAAK0mE,YAAYO,GAAc,CAChC,IAAMC,EAAgB,IAAIC,EAAcnnE,KAAKwmE,SAASS,IAEtDjnE,KAAK0mE,YAAYO,GAAeC,EAAcE,QAAQpnE,KAAKymE,cAAcQ,IAAgB,IAG7F,OAAOjnE,KAAK0mE,YAAYO,GAAajnE,KAAKqnE,eAAejlE,KAGrD8jE,EAAA3mE,UAAA6mE,iBAAR,SAAyB37D,QAAA,IAAAA,UACrB,IAAM68D,GACFC,uBACAjB,gBACAD,WACArjE,OAAQyH,EAAOzH,QAxGJ,MA2GTqjE,EAAU57D,EAAO47D,YACjBC,EAAetmE,KAAKwnE,eAAe/8D,EAAO67D,kBAC1CiB,EAAsBvnE,KAAKwnE,eAAe/8D,EAAO88D,yBAavD,OAZwBlpE,OAAA4J,EAAA,MAAA5J,CAAMA,OAAOuiC,KAAK2mC,GAAsBlpE,OAAOuiC,KAAK0lC,IAE5DpyB,QAAQ,SAAAh1C,GAChBonE,GAAgBA,EAAapnE,IAC7BooE,EAAOhB,aAAapnE,GAAOonE,EAAapnE,GACxCooE,EAAOjB,QAAQnnE,GAAOmnE,EAAQnnE,IAAQooE,EAAOtkE,SAE7CskE,EAAOhB,aAAapnE,GAAOqoE,EAAoBroE,GAC/CooE,EAAOjB,QAAQnnE,GAtHR,QA0HRooE,GAGHpB,EAAA3mE,UAAAioE,eAAR,SAAuBnoE,EAAsBuqC,EAA2B69B,GAAxE,IAAA1nE,EAAAC,UAA6C,IAAA4pC,eAA2B,IAAA69B,MAAA,IACpE,IACIppE,OAAOuiC,KAAKvhC,GAAQ60C,QAAQ,SAAAh1C,GACxB,IAAMN,EAAQS,EAAOH,GACfwoE,EAAYD,EAAeA,EAAS,IAAIvoE,EAAQA,EAEtD,GAAIb,OAAA4J,EAAA,SAAA5J,CAASO,GACT,OAAOmB,EAAKynE,eAAe5oE,EAAuBgrC,EAAQ89B,GAG9D99B,EAAO89B,GAAa9oE,IAE1B,MAAOylE,GACLrkE,KAAKmmE,QAAQ7oC,KAAK,2BAA2B+mC,GAGjD,OAAOz6B,GAGHs8B,EAAA3mE,UAAA8nE,eAAR,SAAuBjlE,GACnB,OAAO/D,OAAOuiC,KAAKx+B,GAAMunC,OAAO,SAACC,EAAQ1qC,GACrC,IAAMN,EAAQwD,EAAKlD,GAInB,OAFA0qC,EAAO1qC,GAAiB,OAAVN,QAA4B+F,IAAV/F,EAAsB,GAAKA,EAEpDgrC,QAIPs8B,EAAA3mE,UAAAwnE,iBAAR,eAAAhnE,EAAAC,KACI,OAAO3B,OAAOuiC,KAAK5gC,KAAKwmE,UAAUl5C,IAAI,SAAApuB,GAAO,OAAAa,EAAKymE,SAAStnE,KACtDq7B,OAAO,SAAAjkB,GAAQ,OAAAA,EAAK8vB,MAAM,KAAK,KAAOrmC,EAAKwmE,QAAQngC,MAAM,KAAK,KAC9DvV,OAAS,GAEtBq1C,EAnJA,GCFc,SAAAyB,EAAgCl9D,GAC1C,YAD0C,IAAAA,UACnC,IAAIm9D,EACPn9D,EACApM,OAAAg/B,EAAA,EAAAh/B,mBCjBR,WAOI,SAAAwpE,EACIC,GAEA,IAAKA,EACD,MAAM,IAAI1nE,MAAM,6BAIhB,IAAAqpC,EAAAq+B,EAAAr+B,cACAs+B,EAAAD,EAAAC,eACAC,EAAAF,EAAAE,OACAC,EAAAH,EAAAG,mBACAC,EAAAJ,EAAAI,iBAGJ,GAC8B,iBAAnBH,GACW,iBAAXC,GACuB,iBAAvBC,GACqB,iBAArBC,GACkB,iBAAlBz+B,EAEP,MAAM,IAAIhgC,EAAA,EAAqB,sCAGnCzJ,KAAKmoE,eAAiBC,SAAS3+B,EAAe,IAC9CzpC,KAAKqoE,gBAAkBN,EACvB/nE,KAAKsoE,QAAUN,EACfhoE,KAAKuoE,oBAAsBN,EAC3BjoE,KAAKwoE,kBAAoBN,EA2CjC,OAxCIL,EAAAtoE,UAAAokE,OAAA,SAAOxpD,GACH,GAAsB,iBAAXA,EACP,MAAM,IAAI1Q,EAAA,EAAqB,2BAGnC,IAAMg/D,EAAkBzoE,KAAK0oE,cAAcvuD,GAErCwuD,EAAoB3oE,KAAK4oE,gBAAgBH,GAE/C,OAAOtuD,EAAS,EACZ,IAAIwuD,EACJA,GAGAd,EAAAtoE,UAAAmpE,cAAR,SAAsBvuD,GAClB,IACMvX,EADiB8vD,KAAKmW,IAAI1uD,GAC1BuK,WAAA0hB,MAAA,KAAEiH,EAAAzqC,EAAA,GAAe+N,EAAA/N,EAAA,GAAAkmE,OAAA,IAAAn4D,EAAA,GAAAA,EACjBo4D,EAAsB17B,EAAcoC,QAAQ,wBAAyBzvC,KAAKuoE,qBAEhF,GAAIvoE,KAAKmoE,eAAiB,EACtB,OAAOY,EAKX,IAFA,IAAIC,EAAiB,GAEZrrE,EAAI,EAAGA,EAAIqC,KAAKmoE,eAAgBxqE,GAAK,EAC1CqrE,GAAkB,IAGtB,OACID,GACA,GAAGD,EAAgBE,GAAiBnyB,MAAM,EAAG72C,KAAKmoE,iBACpDz6D,KAAK1N,KAAKwoE,oBAGRX,EAAAtoE,UAAAqpE,gBAAR,SAAwBH,GACpB,MAA+C,SAAvCzoE,KAAKqoE,gBAAgBY,cACzB,GAAGjpE,KAAKsoE,QAAUG,EAClB,GAAGA,EAAkBzoE,KAAKsoE,SAEtCT,EA/EA,KCGA,WAOI,SAAAqB,EACYC,GAAAnpE,KAAAmpE,eAERnpE,KAAKopE,mBAAqB,IAAIC,EAAkBrpE,KAAKmpE,aAAaG,iBAClEtpE,KAAKupE,gBAAkB,IAAIF,EAAkBrpE,KAAKmpE,aAAapvD,UAWvE,OARImvD,EAAA3pE,UAAAiqE,mBAAA,SAAmBrvD,GACf,IAAMsvD,EAAeC,WAAW1pE,KAAKmpE,aAAaG,gBAAgBG,cAClE,OAAOzpE,KAAKopE,mBAAmBzF,OAAOxpD,EAASsvD,IAGnDP,EAAA3pE,UAAAoqE,gBAAA,SAAgBxvD,GACZ,OAAOna,KAAKupE,gBAAgB5F,OAAOxpD,IAE3C+uD,EAtBA,GCkBc,SAAAU,EACVn/D,GAEA,OAAO,IAAIo/D,EAAgBp/D,qbCyFnBq/D,EAIAC,yHAJZ,SAAYD,GACRA,EAAA,YACAA,EAAA,cAFJ,CAAYA,WAIZ,SAAYC,GACRA,EAAA,kBACAA,EAAA,cACAA,EAAA,cAHJ,CAAYA,WC1FZ,iBAKI,SAAAC,EACYn9D,EACAmB,EACAi8D,EACAC,EACAn6D,EACAo6D,EACAznE,GANA1C,KAAA6M,SACA7M,KAAAgO,8BACAhO,KAAAiqE,yBACAjqE,KAAAkqE,wBACAlqE,KAAA+P,+BACA/P,KAAAmqE,2BACAnqE,KAAA0C,iBAqMhB,OAlMIsnE,EAAAzqE,UAAAuG,WAAA,SAAW9B,GAGP,OAFAhE,KAAK6d,UAAY7Z,EAEVhE,KAAK4iB,oBAGhBonD,EAAAzqE,UAAA2G,aAAA,WACI,OAAOlG,KAAKkqE,sBAAsBxoD,YAGtCsoD,EAAAzqE,UAAAqoC,aAAA,SACIwiC,EACAC,EACAC,GAEA,QAHA,IAAAD,MAAyBP,EAAWS,YACpC,IAAAD,MAA2BP,EAAYS,UAElCxqE,KAAKyqE,iBACN,MAAM,IAAIt7D,EAAA,EAAoBA,EAAA,EAAwBC,uBAG1D,OAAOpP,KAAKyqE,iBAAiB7iC,cACzB0iC,YAAWA,EACXD,WAAUA,EACVD,QAAOA,KAIfJ,EAAAzqE,UAAAgf,cAAA,WACI,IAAKve,KAAKyqE,iBACN,MAAM,IAAIt7D,EAAA,EAAoBA,EAAA,EAAwBC,uBAG1D,OAAOpP,KAAKyqE,iBAAiBC,gBAAgB1qE,KAAK2qE,2BAGtDX,EAAAzqE,UAAAme,cAAA,SAAclU,GAAd,IAAAzJ,EAAAC,KACI,OAAOA,KAAK4qE,UAAU5qE,KAAKkqE,sBAAsB1I,cAAch4D,IAC1DxH,KAAK,WAAM,OAAAjC,EAAK8qE,sBAAsBrhE,MAG/CwgE,EAAAzqE,UAAA48B,sBAAA,SAAsBjyB,GAClB,OAAOlK,KAAK6M,OAAO8B,SACf3O,KAAKmqE,yBAAyBz3D,cAAc1S,KAAK8qE,sCAAsC5gE,MAIvF8/D,EAAAzqE,UAAAqjB,iBAAR,eAAA7iB,EAAAC,KACUgE,EAAWhE,KAAK0nC,eAEtB,OAAO1nC,KAAK6M,OAAO8B,SAAS3O,KAAKgO,4BAA4Ba,kBAAkB7K,IAC1EhC,KAAK,SAAA2B,GACF,IAAMqG,EAAgBrG,EAAMQ,eAAeC,iBAAiBJ,GACtD0C,EAAW/C,EAAM+C,SAASC,cAC1By6D,IAAuBz9D,EAAMuG,gBAAgBC,qBAEnD,IAAKH,EACD,MAAM,IAAI1F,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,IAAKmC,EACD,MAAM,IAAIpC,EAAA,EAAiBA,EAAA,EAAqB6C,iBAG5C,IAAAsO,EAAAzL,EAAAS,OAAAgL,SAER,OAAOnJ,QAAQmN,KACX1Z,EAAKkqE,uBAAuB57D,OAC5BtO,EAAKmqE,sBAAsBpkE,WAAWY,EAAUsD,EAAeo3D,KAChEp/D,KAAK,SAACY,OAACmoE,EAAAnoE,EAAA,GAAWooE,EAAApoE,EAAA,GAIjB,OAHA7C,EAAK0qE,iBAAmB1qE,EAAKkrE,oBAAoBF,EAAWt1D,GAC5D1V,EAAKmrE,oBAAsBF,EAEpBjrE,EAAK0qE,iBAAiBU,cACzB7H,wBAEQrjE,KAAM+qE,EAAmB1H,sBAAsB,GAAGrjE,KAClDsjE,YACIC,mBAAoBwH,EAAmB1H,sBAAsB,GAAGC,WAAWC,mBAC3EC,oBAAqBuH,EAAmB1H,sBAAsB,GAAGC,WAAWE,uBAIxFL,WAAY4H,EAAmB5H,WAC/BC,gBAAiB2H,EAAmB3H,kBACrCrhE,KAAK,SAAAC,GACJ,IAAIA,EAAS2nC,OAIb,MAAM,IAAI71B,EAAA,SAMtBi2D,EAAAzqE,UAAA6rE,oBAAR,SAA4B9sD,GACxB,OACIre,KAAMqe,EAAgBujD,SACtB7/C,OAAQ1D,EAAgBwjD,WAIxBkI,EAAAzqE,UAAAorE,uBAAR,WACI,IAAK3qE,KAAKkrE,oBACN,MAAM,IAAI/4D,EAAA,EAGd,OAAOnS,KAAKkrE,qBAGRlB,EAAAzqE,UAAA0rE,oBAAR,SAA4BI,EAAsB51D,GAC9C,QAAiB9Q,IAAb8Q,EACA,MAAM,IAAInR,EAAA,EAAiBA,EAAA,EAAqBC,sBAGpD,IAAMiR,EAA+BC,EAAW,OAAS,aAEzD,OAAO,IAAI41D,EAAOx7B,SAASy7B,IAAIC,gBAAiB/1D,YAAWA,KAGvDw0D,EAAAzqE,UAAAmoC,aAAR,WACI,IAAK1nC,KAAK6d,UACN,MAAM,IAAI1O,EAAA,EAAoBA,EAAA,EAAwBC,uBAG1D,OAAOpP,KAAK6d,WAGRmsD,EAAAzqE,UAAAisE,qCAAR,SAA6ChiE,EAAgCjE,GACzE,OACIA,GAAEA,EACF6qB,UAAW5mB,EAAYk4D,kBAAkB+J,KAAK/hE,eAAexL,KAAKkoC,MAAM,KAAKyQ,MAAM,GAAI,GAAGnpC,KAAK,KAC/F2iB,SAAU7mB,EAAYk4D,kBAAkB+J,KAAK/hE,eAAexL,KAAKkoC,MAAM,KAAKyQ,OAAO,GAAGnpC,KAAK,KAC3F4iB,QAAS9mB,EAAYk4D,kBAAkB+J,KAAK/hE,eAAegiE,YAC3D7pD,SAAUrY,EAAYk4D,kBAAkB+J,KAAK/hE,eAAemY,SAC5DC,SAAUtY,EAAYk4D,kBAAkB+J,KAAK/hE,eAAeoY,SAAWtY,EAAYk4D,kBAAkB+J,KAAK/hE,eAAeiiE,SACzHp7C,KAAM/mB,EAAYk4D,kBAAkB+J,KAAK/hE,eAAekiE,SACxDp7C,gBAAiBhnB,EAAYk4D,kBAAkB+J,KAAK/hE,eAAemiE,mBACnEp7C,oBAAqBjnB,EAAYk4D,kBAAkB+J,KAAK/hE,eAAemiE,mBACvE/wD,WAAYtR,EAAYk4D,kBAAkB+J,KAAK/hE,eAAeoR,WAC9DnL,YAAanG,EAAYk4D,kBAAkB+J,KAAK/hE,eAAeiG,YAC/D+gB,MAAOlnB,EAAYk4D,kBAAkB+J,KAAK/hE,eAAeoiE,YACzDn7C,gBACA0V,MAAO78B,EAAY68B,QAInB2jC,EAAAzqE,UAAAurE,sCAAR,SAA8Cv4D,GAC1C,OACI6d,UAAW7d,EAAQrU,KAAKkoC,MAAM,KAAKyQ,MAAM,GAAI,GAAGnpC,KAAK,KACrD2iB,SAAU9d,EAAQrU,KAAKkoC,MAAM,KAAKyQ,OAAO,GAAGnpC,KAAK,KACjD4iB,QAAS/d,EAAQm5D,YACjB7pD,SAAUtP,EAAQsP,SAClBC,SAAUvP,EAAQuP,SAAWvP,EAAQo5D,SACrCp7C,KAAMhe,EAAQq5D,SACdp7C,gBAAiBje,EAAQs5D,mBACzBp7C,oBAAqBle,EAAQs5D,mBAC7B/wD,WAAYvI,EAAQuI,WACpBnL,YAAa4C,EAAQ5C,YACrB+gB,MAAOne,EAAQu5D,YACfn7C,kBAIAq5C,EAAAzqE,UAAAqrE,UAAR,SAAkBmB,GACd,IAAMztD,EAAkBytD,EAAgB7lC,QAExC,OAAOlmC,KAAK0C,eAAe6X,KAAK,iBAC5BzX,SACI0X,OAAQ,YACRC,eAAgB,qCAEpBtY,KAAM9D,OAAAqc,EAAA,EAAArc,EACFunC,aAAcmmC,EAAgB9rE,KAC9BsP,MAAOw8D,EAAgBx8D,MACvBoL,SAAU3a,KAAK0nC,eACfpzB,OAAQ,wBACRsK,iBAAkB5e,KAAKorE,oBAAoB9sD,QAK/C0rD,EAAAzqE,UAAAsrE,sBAAR,SAA8BrhE,GAC1B,IAAMwiE,EAAuBhsE,KAAK6M,OAAOjJ,WAAW8F,eAAeC,oBAEnE,IAAKqiE,EACD,MAAM,IAAI1nE,EAAA,EAAiBA,EAAA,EAAqBg7D,uBAGpD,IAAM2M,EAAyBjsE,KAAKwrE,qCAAqChiE,EAAawiE,EAAqBzmE,IAE3G,OAAOvF,KAAK6M,OAAO8B,SACf3O,KAAK+P,6BAA6B2C,cAAcu5D,KAG5DjC,EAjNA,YCzBA,WACI,SAAAkC,EACYl8D,EACAC,QAAA,IAAAA,MAAAC,QADAlQ,KAAAgQ,gBACAhQ,KAAAiQ,UAchB,OAXIi8D,EAAA3sE,UAAA8O,KAAA,eAAAtO,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,yCACX7d,KAAK,WACF,IAAKjC,EAAKkQ,QAAQo7D,OACd,MAAM,IAAIloE,EAAA,EAGd,OAAOpD,EAAKkQ,QAAQo7D,UAGpCa,EAjBA,GCOc,SAAAC,EAA0C1oE,EAAsB2oE,GAC1E,IAAM/lD,EAAgBhoB,OAAAo/B,EAAA,oBAAAp/B,GAChBooB,EAAepoB,OAAAqoB,EAAA,gBAAAroB,GAErB,OAAO,IAAIguE,EACP5oE,EACA,IAAIqkB,EAAA,EACA,IAAIC,EAAA,EAA2B1B,IAEnC,IAAIimD,EAAsB7lD,GAC1B2lD,EACA,IAAIxlD,EAAA,EACA,IAAIC,EAAA,EAA4BR,IAEpC,IAAI6X,EAAA,EACA,IAAIC,EAAA,EAAyB9X,GAC7B,IAAIiB,EAAA,EAAsBjB,IAE9BA,mHC5BM,SAAAkmD,EACVn1B,EACAl4C,EACAm4C,GAEA,IAAMm1B,EAAkB,IAAIC,QAE5B,SAAAC,EAAsCxoE,GAAtC,IAAAnE,EAAAC,KACI,OAAO,eAAE,MAAAu2C,KAAApc,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAoc,EAAApc,GAAAC,UAAAD,GACL,IAAMwyC,EAAUp2B,EAAKA,EAAK1lB,OAAS,GAGnC,KCbE,SAA0B+7C,GACpC,OAAOA,GAAmC,kBAAnBA,EAAM5pC,SDUb6pC,CAAAF,MAAA3pC,UAAA,IAAAA,SAGJ,OAAO9+B,EAAOpG,KAAIu8B,MAAXn2B,GAAYnE,GAAIu6B,OAAKic,IAGhC,IAAMu2B,EAAkBN,EAAgBhuE,IAAIuB,OAU5C,OARKysE,EAAgBhuE,IAAIuB,IACrBysE,EAAgB30B,IAAI93C,EAAM+sE,GAGzBA,EAAgB5tE,KACjB4tE,EAAgB5tE,GElBlB,SACV6tE,GAEA,IAAMzO,EAAW,IAAI0O,EAAA,EAgBrB,OAAO3uE,OAAA4J,EAAA,QAAA5J,CAdP,eAAgC,IAAAk4C,KAAApc,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAoc,EAAApc,GAAAC,UAAAD,GAC5B,IAAM7lB,EAASy4D,EAAGjvE,KAAIu8B,MAAP0yC,GAAQ/sE,MAAIs6B,OAAKic,IAEhC,OAAIjiC,aAAkBoO,EAAA,WACXrkB,OAAA0K,EAAA,KAAA1K,CAAKiW,GAAQ5O,KAAKrH,OAAAsH,EAAA,YAAAtH,IAGP,mBAAXiW,EACAjW,OAAA4J,EAAA,QAAA5J,CAAQ,SAAAoF,GAAS,OAAApF,OAAA0K,EAAA,KAAA1K,CAAKiW,EAAO7Q,IAAQiC,KAAKrH,OAAAsH,EAAA,YAAAtH,MAG9CiW,GAKP,eAAC,IAAAiiC,KAAApc,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAAoc,EAAApc,GAAAC,UAAAD,GAAY,OAAAmkC,EAAShoB,OAAMjc,MAAfikC,EAAmB/nB,KFHD02B,CAAY/oE,KAGhCtB,EAAAkqE,EAAgB5tE,IAAKpB,KAAIu8B,MAAAz3B,GAAC7C,GAAIu6B,OAAKic,KAIlD,OACI/3C,IAAG,WACC,GAAgC,mBAArB64C,EAAWz4C,MAClB,OAAOy4C,EAAWz4C,MAGtB,IAAMA,EAAQ8tE,EAAe5uE,KAAKkC,KAAMq3C,EAAWz4C,OAInD,OAFAP,OAAOC,eAAe0B,KAAMd,EAAGgE,EAAA,YAAOm0C,GAAYz4C,MAAKA,KAEhDA,2EGpCnB,IAAAsuE,EAAA,WACI,SAAAA,EACYxqE,GAAA1C,KAAA0C,iBA4ChB,OAzCIwqE,EAAA3tE,UAAA6S,kBAAA,SAAkB+6D,EAAoB10B,EAAkC71C,OAAEC,QAAA,IAAAD,QAAAC,QAChEy8B,EAAM,oBAAoB6tC,EAAU,WAE1C,OAAOntE,KAAK0C,eAAelE,IAAI8gC,GAAOmZ,OAAMA,EAAE51C,QAAOA,KAGzDqqE,EAAA3tE,UAAAu8B,mBAAA,SAAmBqxC,EAAoB10B,EAAkC71C,OAAEC,QAAA,IAAAD,QAAAC,QACjEy8B,EAAM,oBAAoB6tC,EAAU,YAE1C,OAAOntE,KAAK0C,eAAelE,IAAI8gC,GAAOmZ,OAAMA,EAAE51C,QAAOA,KAGzDqqE,EAAA3tE,UAAAqP,kBAAA,SAAkBu+D,EAAoB10B,EAAmC71C,OAAEC,QAAA,IAAAD,QAAAC,QACjEy8B,EAAM,oBAAoB6tC,EAAU,WAE1C,OAAOntE,KAAK0C,eAAelE,IAAI8gC,GAAOmZ,OAAMA,EAAE51C,QAAOA,KAGzDqqE,EAAA3tE,UAAAwP,aAAA,SAAao+D,EAAoBvqE,OAAEC,QAAA,IAAAD,QAAAC,QACzBy8B,EAAM,oBAAoB6tC,EAAU,YAE1C,OAAOntE,KAAK0C,eAAelE,IAAI8gC,GAAOz8B,QAAOA,KAGjDqqE,EAAA3tE,UAAAq8B,QAAA,SAAQuxC,EAAoBvqE,OAAEC,QAAA,IAAAD,QAAAC,QACpBy8B,EAAM,oBAAoB6tC,EAAU,WAE1C,OAAOntE,KAAK0C,eAAelE,IAAI8gC,GAAOz8B,QAAOA,KAGjDqqE,EAAA3tE,UAAA86D,cAAA,SAAcz3D,OAAEC,QAAA,IAAAD,QAAAC,QAGZ,OAAO7C,KAAK0C,eAAelE,IAFf,0BAE0BqE,QAAOA,KAGjDqqE,EAAA3tE,UAAAk7D,wBAAA,SAAwB73D,OAAEC,QAAA,IAAAD,QAAAC,QAGtB,OAAO7C,KAAK0C,eAAe6X,KAFf,qFAE2B1X,QAAOA,KAEtDqqE,EA9CA,iECOAE,EAAA,WACI,SAAAA,EACYnT,GAAAj6D,KAAAi6D,+BAiFhB,OA9EImT,EAAA7tE,UAAA6S,kBAAA,SAAkBpO,EAAkBy0C,EAAkCh3C,GAAtE,IAAA1B,EAAAC,KACI,OAAOmwD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtBA,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBC,sCAAkC3oE,GAAaX,SAAQA,KAE3GjE,EAAKk6D,6BAA6B7nD,kBAAkBpO,EAAUy0C,EAAQh3C,GACjEO,KAAK,SAACY,OAAE+N,EAAA/N,EAAAT,YAAA,IAAAwO,OACLhP,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBxsB,iCAAkC1+C,GAAQ6B,SAAQA,KACtGrC,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkBgvE,EAAA,EAAyBE,8BAA+BtrE,GAAY+B,SAAQA,UAK7HopE,EAAA7tE,UAAAu8B,mBAAA,SAAmB93B,EAAkBy0C,EAAkCh3C,GAAvE,IAAA1B,EAAAC,KACI,OAAOmwD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtBA,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBG,uCAAmC7oE,GAAaX,SAAQA,KAE5GjE,EAAKk6D,6BAA6Bn+B,mBAAmB93B,EAAUy0C,EAAQh3C,GAClEO,KAAK,SAACY,OAAE+N,EAAA/N,EAAAT,YAAA,IAAAwO,OACLhP,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBvsB,kCAAmC3+C,GAAQ6B,SAAQA,KACvGrC,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkBgvE,EAAA,EAAyBI,+BAAgCxrE,GAAY+B,SAAQA,UAK9HopE,EAAA7tE,UAAAqP,kBAAA,SAAkB5K,EAAkBy0C,EAAmCh3C,GAAvE,IAAA1B,EAAAC,KACI,OAAOmwD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtBA,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBK,sCAAkC/oE,GAAaX,SAAQA,KAE3GjE,EAAKk6D,6BAA6BrrD,kBAAkB5K,EAAUy0C,EAAQh3C,GACjEO,KAAK,SAACY,OAAE+N,EAAA/N,EAAAT,YAAA,IAAAwO,OACLhP,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBM,iCAAkCxrE,GAAQ6B,SAAQA,KACtGrC,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkBgvE,EAAA,EAAyBO,8BAA+B3rE,GAAY+B,SAAQA,UAK7HopE,EAAA7tE,UAAAwP,aAAA,SAAa/K,EAAkBvC,GAA/B,IAAA1B,EAAAC,KACI,OAAOmwD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtBA,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBQ,iCAA6BlpE,GAAaX,SAAQA,KAEtGjE,EAAKk6D,6BAA6BlrD,aAAa/K,EAAUvC,GACpDO,KAAK,SAACY,OAAET,EAAAS,EAAAT,KACLR,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBtsB,4BAA6B5+C,GAAQ6B,SAAQA,KACjGrC,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkBgvE,EAAA,EAAyBS,yBAA0B7rE,GAAY+B,SAAQA,UAKxHopE,EAAA7tE,UAAAq8B,QAAA,SAAQ53B,EAAkBvC,GAA1B,IAAA1B,EAAAC,KACI,OAAOmwD,EAAA,WAAWlxD,OAAO,SAAC0C,GACtBA,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBU,oCAAgCppE,GAAaX,SAAQA,KAEzGjE,EAAKk6D,6BAA6Br+B,QAAQ53B,EAAUvC,GAC/CO,KAAK,WACFL,EAASC,KAAKvD,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBW,oCAAgCrpE,GAAaX,SAAQA,KACzGrC,EAASU,aAEZC,MAAM,SAAAL,GACHN,EAASY,MAAMlE,OAAAi6C,EAAA,kBAAAj6C,CAAkBgvE,EAAA,EAAyBY,4BAA6BhsE,GAAY+B,SAAQA,UAK3HopE,EAAA7tE,UAAAqT,eAAA,SAAwD5O,EAAa5B,GACjE,OAAO/D,OAAAi6C,EAAA,aAAAj6C,CAAagvE,EAAA,EAAyBrsB,qBAAsB5+C,GAAQ4B,SAAQA,KAE3FopE,EAnFA,uCCRA,IAAAc,EAAA,WAGI,SAAAA,EACYl+D,GAAAhQ,KAAAgQ,gBAERhQ,KAAKiQ,QAAUC,OA4CvB,OAzCIg+D,EAAA3uE,UAAAgR,WAAA,SAAWrM,EAAuBiqE,GAE1B,IAAAvrE,EAAAsB,EAAAuG,OAAUqG,EAAAlO,EAAAkO,WAAY2E,EAAA7S,EAAA6S,SACtB9E,EAAAzM,EAAAiI,mBAAsB+E,QAAA,IAAAP,QAAAy9D,cAAA,IAAAl9D,EAAA,KAAAA,EAGpBouB,EAAM,YACkB,OAAzB8uC,EAAOnF,cAAyB,aAAe,cAChD,yCACGmF,EAAOnF,cAAa,KACtBxzD,EAAW,WAAa,KACC,OAAzB24D,EAAOnF,cAAyB,OAAS,IAC1C,0BAA0Bn4D,EAI9B,OAFA9Q,KAAKquE,iBAAiBnqE,EAAQiqE,GAEvBnuE,KAAKgQ,cAAc6P,WAAWyf,IAGjC4uC,EAAA3uE,UAAA8uE,iBAAR,SAAyBnqE,EAAuBiqE,GAAhD,IAAApuE,EAAAC,KACUsuE,EAAe,WACZvuE,EAAKkQ,QAAQG,SAIlBrQ,EAAKkQ,QAAQG,OAAOkqD,MAAMiU,YAAYrqE,EAAOiI,mBAAmB67B,UAChEjoC,EAAKkQ,QAAQG,OAAOkqD,MAAMkU,cAAa,KAGvCxuE,KAAKiQ,QAAQG,QAAUpQ,KAAKiQ,QAAQG,OAAOkqD,MAC3CgU,IAEAtuE,KAAKiQ,QAAQw+D,mBAAqBH,EAGlCtuE,KAAKiQ,QAAQqB,mBAAqB68D,EAClCA,IAEAnuE,KAAKiQ,QAAQy+D,sBAAwBP,GAGjDD,EAlDA,kDCAAS,EAAA,WACI,SAAAA,EACY3+D,EACAC,QAAA,IAAAA,MAAAC,QADAlQ,KAAAgQ,gBACAhQ,KAAAiQ,UAchB,OAXI0+D,EAAApvE,UAAA8O,KAAA,SAAKoH,GAAL,IAAA1V,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,MAAKpK,EAAW,WAAa,IAAE,sFAC1CzT,KAAK,WACF,IAAKjC,EAAKkQ,QAAQ2+D,EACd,MAAM,IAAIpvC,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQ2+D,KAGpCD,EAjBA,kDCAAE,EAAA,WACI,SAAAA,EACY7+D,EACDC,QAAA,IAAAA,MAAAC,QADClQ,KAAAgQ,gBACDhQ,KAAAiQ,UAcf,OAXI4+D,EAAAtvE,UAAA8O,KAAA,SAAKoH,GAAL,IAAA1V,EAAAC,KACI,OAAOA,KAAKgQ,cACP6P,WAAW,SAAQpK,EAAW,MAAQ,IAAE,gGACxCzT,KAAK,WACF,IAAKjC,EAAKkQ,QAAQqrD,KACd,MAAM,IAAI97B,EAAA,EAGd,OAAOz/B,EAAKkQ,QAAQqrD,QAGpCuT,EAjBA,sDCJA,WACI,SAAAC,EACYC,GAAA/uE,KAAA+uE,WA8BhB,OA3BID,EAAAvvE,UAAAyvE,IAAA,eAAI,IAAAC,KAAA90C,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAA80C,EAAA90C,GAAAC,UAAAD,GACAn6B,KAAKkvE,cAAa70C,MAAlBr6B,MAAmB,OAAKs6B,OAAK20C,KAGjCH,EAAAvvE,UAAAksE,KAAA,eAAK,IAAAwD,KAAA90C,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAA80C,EAAA90C,GAAAC,UAAAD,GACDn6B,KAAKkvE,cAAa70C,MAAlBr6B,MAAmB,QAAMs6B,OAAK20C,KAGlCH,EAAAvvE,UAAA+9B,KAAA,eAAK,IAAA2xC,KAAA90C,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAA80C,EAAA90C,GAAAC,UAAAD,GACDn6B,KAAKkvE,cAAa70C,MAAlBr6B,MAAmB,QAAMs6B,OAAK20C,KAGlCH,EAAAvvE,UAAAgD,MAAA,eAAM,IAAA0sE,KAAA90C,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAA80C,EAAA90C,GAAAC,UAAAD,GACFn6B,KAAKkvE,cAAa70C,MAAlBr6B,MAAmB,SAAOs6B,OAAK20C,KAGnCH,EAAAvvE,UAAA4vE,MAAA,eAAM,IAAAF,KAAA90C,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAA80C,EAAA90C,GAAAC,UAAAD,GACFn6B,KAAKkvE,cAAa70C,MAAlBr6B,MAAmB,SAAOs6B,OAAK20C,KAG3BH,EAAAvvE,UAAA2vE,cAAR,SAAsBjvE,OAAqB,MAAAgvE,KAAA90C,EAAA,EAAAA,EAAAC,UAAAvJ,OAAAsJ,IAAA80C,EAAA90C,EAAA,GAAAC,UAAAD,GAClCn6B,KAAK+uE,UAAa/uE,KAAK+uE,SAAS9uE,KAIrC2C,EAAA5C,KAAK+uE,SAAS9uE,IAAMnC,KAAIu8B,MAAAz3B,GAAC5C,KAAK+uE,UAAQz0C,OAAK20C,KAEnDH,EAhCA,KCAA,oBAAAM,KAUA,OATIA,EAAA7vE,UAAAyvE,IAAA,aAEAI,EAAA7vE,UAAAksE,KAAA,aAEA2D,EAAA7vE,UAAA+9B,KAAA,aAEA8xC,EAAA7vE,UAAAgD,MAAA,aAEA6sE,EAAA7vE,UAAA4vE,MAAA,aACJC,EAVA,mCCGA,IAAMC,ECDQ,SAAuBC,GACjC,YADiC,IAAAA,OAAA,GAC5BA,EAIE,IAAIC,EAAcC,SAHd,IAAIC,EDDJC,CAAkC,SAArBrxE,OAAAk7B,EAAA,EAAAl7B,IAEd,SAAAsxE,IACV,OAAON,yEEMX,WACI,SAAAO,EACY5vD,EACAtd,GADA1C,KAAAggB,uBACAhgB,KAAA0C,iBAgHhB,OA7GIktE,EAAArwE,UAAAuG,WAAA,SAAW4J,EAAqBjO,GAG5B,OAFAzB,KAAKggB,qBAAqBla,WAAW4J,GAE9B1P,KAAKggB,qBAAqB8xC,kBAC5B9vD,KAAK,SAAAsb,GAAgB,OAAAA,EAAauyD,mBAC/B3gE,UACIlM,OAAQvB,EAAQuB,OAChBiyC,UACI53B,gBAAiB5b,EAAQ4b,kBAGjCyyD,gBACIh2D,aAAcrY,EAAQqY,aACtBO,SAAUD,OAAO3Y,EAAQ4Y,gBAKzCu1D,EAAArwE,UAAA2G,aAAA,WACI,OAAOlG,KAAKggB,qBAAqB0B,YAGrCkuD,EAAArwE,UAAAme,cAAA,SAAc7Z,EAA4CoxC,EAAoB3iC,GAA9E,IAAAvS,EAAAC,KACI,OAAOA,KAAKggB,qBAAqB8xC,kBAC5B9vD,KAAK,SAAA+tE,GAAyB,OAAAzjE,QAAQmN,KACnCs2D,EAAsBrvD,SAAS7c,GAC/B9D,EAAKigB,qBAAqBwB,qBAE7Bxf,KAAK,SAACY,OAACotE,EAAAptE,EAAA,GAAkBmuD,EAAAnuD,EAAA,GAElB+N,EAAAq/D,EAAA9lE,uBAAA,IAAAyG,EAAA5Q,EAAAkwE,uBAAAh7B,GAAAtkC,EACAO,EAAA8+D,EAAAtmE,sBAAA,IAAAwH,EAAAnR,EAAAkwE,uBAAA39D,GAAApB,EAGJ,OAAOnR,EAAK6qE,UAAS1nE,EAAA,YACd8sE,GACH9lE,gBAAeA,EACfR,eAAcA,IACfqnD,QAIP6e,EAAArwE,UAAAqrE,UAAR,SAAkBphE,EAA2CunD,GAErD,IAAAmf,EAAA1mE,EAAA0mE,SACAxmE,EAAAF,EAAAE,eACAQ,EAAAV,EAAAU,gBACAoU,EAAA9U,EAAA08B,QAEIiqC,EAAAD,EAAAC,UACA1uD,EAAAsvC,EAAAtvC,WAER,OAAOzhB,KAAK0C,eAAe6X,KAAK,iBAC5BzX,SACI0X,OAAQ,YACRC,eAAgB,qCAEpBtY,KAAM9D,OAAAqc,EAAA,EAAArc,EACFunC,aAAcp8B,EAAYvJ,KAC1BsP,MAAO/F,EAAY+F,MACnBoL,SAAU,wBACVrG,OAAQ,wBACRuxB,YAAapkB,EACb7C,iBAAkB5e,KAAKorE,oBAAoB9sD,GAC3C0nB,gBAAiBhmC,KAAKowE,YAAYD,EAAWzmE,GAC7Co8B,iBAAkB9lC,KAAKowE,YAAYD,EAAWjmE,QAKlD0lE,EAAArwE,UAAA0wE,uBAAR,SAA+B19D,GAC3B,OAAKA,GAKD6d,UAAW7d,EAAQ6d,UACnBC,SAAU9d,EAAQ8d,SAClBy7C,YAAav5D,EAAQme,MACrB9O,cAAerP,EAAQsP,SACvBwuD,gBAAiB99D,EAAQuP,SACzB8pD,SAAUr5D,EAAQge,KAClB69C,OAAQ77D,EAAQke,oBAChB9gB,YAAa4C,EAAQ5C,YACrBmL,WAAYvI,EAAQuI,gBAIpB80D,EAAArwE,UAAA6wE,YAAR,SAAoB/pC,EAAe9zB,GAC/B,YAD+B,IAAAA,WAE3B8zB,MAAKA,EACLC,WAAY/zB,EAAQ6d,UACpBmW,UAAWh0B,EAAQ8d,SACnBmW,aAAcj0B,EAAQu5D,YACtBrlC,eAAgBl0B,EAAQqP,cACxB+kB,eAAgBp0B,EAAQ89D,gBACxB9/C,KAAMhe,EAAQq5D,SACdjoE,MAAO4O,EAAQ67D,OACfvnC,aAAct0B,EAAQ5C,YACtBm3B,YAAav0B,EAAQuI,aAIrB80D,EAAArwE,UAAA6rE,oBAAR,SAA4B9sD,GACxB,OACIre,KAAMqe,EAAgBujD,SACtB7/C,OAAQ1D,EAAgByjD,UAGpC6N,EAnHA,GCPc,SAAAU,EACV7pD,EACAJ,GAEA,IAAMU,EAAwB,IAAIC,EAAA,EAAsBP,GAClDQ,EAAsB,IAAIC,EAAA,EAAoBH,GAEpD,OAAO,IAAIwpD,EAAsCtpD,EAAqBZ","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 184);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","module.exports = require(\"rxjs/Observable\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy extends PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { PaymentStrategy } from '../';\nimport {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions\n} from '../../';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy extends PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    GooglePayPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"rxjs/observable/from\");","module.exports = require(\"rxjs/observable/defer\");","import { InvalidArgumentError } from '../common/error/errors';\n\nexport default function parseOrigin(url: string): string {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return `${anchor.protocol}//${anchor.hostname}` + (anchor.port ? `:${anchor.port}` : '');\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/request-sender\");","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}:${options.containerId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize()\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized: { [key: string]: boolean } = {};\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized[options.containerId] = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isInitialized = {};\n\n        return Promise.resolve();\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../..';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy extends CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy extends CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId())\n                .then(() => {\n                    this._walletButton = this._createSignInButton(containerId);\n                })\n            ).then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize());\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n                .then(() => this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress)))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return actions.request.post('/api/storefront/paypal-payment/', { merchantId })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster();\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport {\n    BraintreePaypalButtonStrategy,\n    CheckoutButtonMethodType,\n    CheckoutButtonStrategy,\n    GooglePayButtonStrategy,\n    MasterpassButtonStrategy,\n    PaypalButtonStrategy\n} from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","module.exports = require(\"rxjs\");","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseOrigin(sourceOrigin);\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","import parseOrigin from './parse-origin';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = parseOrigin(targetOrigin);\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: LoadCountriesAction\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: InstrumentAction\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","module.exports = require(\"rxjs/observable/merge\");","module.exports = require(\"iframe-resizer\");","import { IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._iframeCreator.createFrame(this._options.url, this._options.containerId)\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n\n                return this;\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                this._messageListener.trigger({\n                    type: EmbeddedCheckoutEventType.FrameError,\n                    payload: error,\n                });\n\n                this._loadingIndicator.hide();\n\n                throw error;\n            });\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError } from './errors';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError('Unable to embed the iframe because the container element could not be found.');\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseOrigin(iframe.src)) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport parseOrigin from './parse-origin';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseOrigin(options.url);\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: LoadShippingCountriesAction\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: window.location.href +\n                    '??action=set_external_checkout&provider=masterpass&gateway=stripe&from=' +\n                    window.location.pathname,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy extends CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n                .then(() => this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress)))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    GooglePayCustomerStrategy,\n    MasterpassCustomerStrategy,\n    SquareCustomerStrategy\n} from './strategies';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"rxjs/observable/empty\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: K): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"messageformat\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n\n        this._messagePoster.post(message);\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs/observable/from';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}