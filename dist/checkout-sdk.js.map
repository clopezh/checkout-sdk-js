{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","OrderActionType","StandardError","_super","message","_this","this","type","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","tslib__WEBPACK_IMPORTED_MODULE_0__","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","InstrumentActionType","CheckoutButtonActionType","MissingDataErrorType","MissingDataError","subtype","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ContentType","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","error","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","OrderFinalizationNotRequiredError","external_tslib_","standard_error","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactory","payment_method_types","_isLegacyMethod","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","top","location","href","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","post","Accept","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","handleSuccess","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_methodId","_googlePayOptions","_getGooglePayOptions","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","removeEventListener","_getPayment","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","event","preventDefault","bind_decorator","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancel","cancellable_promise","iframe","promise","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","country","endpoint","ChasePayEventType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","chasepay","_configureWallet","_chasePayClient","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","KlarnaScriptLoader","Klarna","Credit","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_script_loader","wepay_risk_client","create_googlepay_payment_processor","googlepay_braintree_initializer","wepay_payment_strategy","masterpass_script_loader","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","getCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","AmountTransformer","_dp","toInteger","Math","floor","pow","isIframeEvent","InvalidArgumentError","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","CheckoutButtonStrategy","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","push","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","split","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","checkout_button_strategy","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","_createSignInButton","parentNode","removeChild","buttonContainer","createElement","src","appendChild","cartAmount","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","googlePayButton","createButton","_onPaymentSelectComplete","_onError","PaypalButtonStrategy","clientId","actions","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","reduce","result","item","mapToInternalLineItemType","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodInvalidError","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","slice","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","imageUrl","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","step","storeCredit","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","origin","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","postMessage","setTarget","INTERNAL_USE_ONLY","CheckoutButtonSelector","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","InvalidLoginTokenError","title","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_attemptLogin","createFrame","_iframe","hide","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","test","parse_url","pathname","invalid_login_token_error","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","visibility","opacity","handleTransitionEnd","bottom","left","height","width","position","right","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","NotEmbeddableError","ResizableIframeCreator","not_embeddable_error","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","mapToInternalCart","promotions","notifications","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","CheckoutRequestSender","params","include","put","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","DEFAULT_PARAMS","ConsignmentRequestSender","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutIncludes","consignment_action_creator_ConsignmentActionCreator","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","consignment_actions","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","isAddressEqual","lodash__WEBPACK_IMPORTED_MODULE_0__","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","omitDeep","predicate","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_3__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","customerStrategyReducer","customer_strategy_actions","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","toSingleLine","input","line","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","SquareCustomerStrategy","MasterpassCustomerStrategy","masterpassOptions","Masterpass","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","DefaultCustomerStrategy","_customerActionCreator","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","encodeURIComponent","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","parse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 179);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy extends PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { PaymentStrategy } from '../';\nimport {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions\n} from '../../';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy extends PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    GooglePayPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CheckoutDefaultIncludes } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}:${options.containerId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","import { createAction } from '@bigcommerce/data-store';\nimport { concat, defer, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Observable<InitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n            this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n            defer(() => this._registry.get(options.methodId).initialize(options)\n                .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n        );\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize()\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized: { [key: string]: boolean } = {};\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized[options.containerId] = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isInitialized = {};\n\n        return Promise.resolve();\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../..';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy extends CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy extends CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId())\n                .then(() => {\n                    this._walletButton = this._createSignInButton(containerId);\n                })\n            ).then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize());\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n\n                return Promise.resolve();\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return actions.request.post('/api/storefront/paypal-payment/', { merchantId })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport {\n    BraintreePaypalButtonStrategy,\n    CheckoutButtonMethodType,\n    CheckoutButtonStrategy,\n    GooglePayButtonStrategy,\n    MasterpassButtonStrategy,\n    PaypalButtonStrategy\n} from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._attemptLogin()\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n\n                return this;\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                this._messageListener.trigger({\n                    type: EmbeddedCheckoutEventType.FrameError,\n                    payload: error,\n                });\n\n                this._loadingIndicator.hide();\n\n                throw error;\n            });\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError('Unable to embed the iframe because the container element could not be found.');\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CHECKOUT_DEFAULT_INCLUDES.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CHECKOUT_DEFAULT_INCLUDES.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: LoadCountriesAction\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: InstrumentAction\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: LoadShippingCountriesAction\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy extends CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n\n                return Promise.resolve();\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    GooglePayCustomerStrategy,\n    MasterpassCustomerStrategy,\n    SquareCustomerStrategy\n} from './strategies';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: K): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n\n        this._messagePoster.post(message);\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}