{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/checkout/index.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout-buttons/index.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/index.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/action/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/action/is-action-options.ts","webpack://checkoutKit/./src/common/action/cache-action.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CheckoutActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","OrderActionType","StandardError","message","_utility__WEBPACK_IMPORTED_MODULE_1__","_newTarget","Error","captureStackTrace","stack","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","CheckoutButtonActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ErrorActionCreator","clearError","error","error_actions","ClearError","payload","CountryActionCreator","_countryRequestSender","loadCountries","options","external_rxjs_","observer","next","data_store_","country_actions","LoadCountriesRequested","then","response","LoadCountriesSucceeded","body","data","complete","catch","LoadCountriesFailed","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","PaymentStrategyType","OrderFinalizationNotRequiredError","external_tslib_","standard_error","payment_strategy_type","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","getByMethod","NO_PAYMENT_DATA_REQUIRED","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","FinalizeRequested","_loadOrderPaymentsIfNeeded","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","paymentStrategies","isInitialized","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","authenticateThreeDS","AuthenticateThreeDSRequested","AuthenticateThreeDSSucceeded","AuthenticateThreeDSFailed","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","paymentData","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactoryForMethod","payment_method_types","OFFLINE","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","_hasFactory","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","invalid_argument_error","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_paymentMethodActionCreator","_affirmScriptLoader","dispatch","loadPaymentMethod","clientToken","testMode","publicKey","load","affirm","_affirm","not_initialized_error","PaymentNotInitialized","payment_argument_invalid_error","submitOrder","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","payment_method_invalid_error","onSuccess","successObject","ui","on","result","paymentPayload","nonce","checkout_token","consignment","selectedShippingOption","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","shipping","_getShippingAddress","billing","_getBillingAddress","items","_getItems","discounts","_getDiscounts","metadata","shipping_type","order_id","toString","shipping_amount","shippingCostTotal","tax_amount","taxTotal","total","orderAmount","first","firstName","last","lastName","full","address","line1","address1","line2","address2","city","stateOrProvinceCode","zipcode","postalCode","country","countryCode","phone_number","phone","email","getCart","_i","lineItems","physicalItems","length","item","push","display_name","sku","unit_price","salePrice","qty","quantity","item_image_url","imageUrl","item_url","url","_b","_c","digitalItems","customItems","_d","_e","listPrice","_f","_g","amount","line","code","discount_amount","discountedAmount","discount_display_name","displayName","affirmJs","Function","AffirmScriptLoader","_window","window","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_checkoutValidator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","initializePayment","_displayModal","loadSettings","afterpay","remoteCheckout","settings","orderPayload","countryName","display","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","_scriptLoader","loadScript","AfterPay","AmazonPayPaymentStrategy","_billingAddressActionCreator","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","Overlay","_element","_createElement","show","parentElement","_registerClick","appendChild","setTimeout","style","opacity","remove","_unregisterClick","_removeAfterTransition","element","createElement","background","transitionDuration","height","left","position","top","transition","width","zIndex","onClick","onClick_1","addEventListener","removeEventListener","handeTransition","event","propertyName","removeChild","BraintreePaymentProcessor","_braintreeSDKCreator","_overlay","_threeDSecureOptions","threeDSecure","preloadPaypal","getPaypal","tokenizeCard","requestData","_mapToCreditCard","getClient","client","creditCards","paypal","storeLanguage","currency","offerCredit","focusWindow","tokenize","enableShippingAddress","flow","useraction","verifyCard","addFrame","removeFrame","all","get3DS","cancelVerifyCard","verification","cancel","cancellable_promise","iframe","promise","appendSessionId","processedPayment","getDataCollector","deviceData","deviceSessionId","teardown","creditCard","streetAddress","cardholderName","ccName","number","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","card","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","getGrandTotal","BraintreeVisaCheckoutPaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","subtotal","currencyCode","visaCheckout","visaInitOptions","init","paymentSuccessPayload","_paymentInstrumentSelected","handleSuccess","loadCurrentCheckout","queueId","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_chasePayScriptLoader","_wepayRiskClient","_walletEvent$","_methodId","chasepay","walletButton","_walletButton","_handleWalletButtonClick","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","subscribe","merchantRequestId","post","Accept","Content-Type","to_form_url_encoded","action","provider","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","preventDefault","bind_decorator","ConvergePaymentStrategy","CreditCardPaymentStrategy","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_googlePayOptions","_getGooglePayOptions","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","card_information","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","client_token","show_form","authorize","res","approved","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","_masterpassScriptLoader","masterpass","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","callbackUrl","get_callback_url","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","loadPaypal","_paypalSdk","setup","button","environment","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","href","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_setExternalCheckoutData","requestShippingAddress","requestBillingInfo","label","storeName","String","pending","JSON","stringify","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","onComplete","onCheckout","openModal","parse","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","config_action_creator","config_request_sender","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","paypal_script_loader","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","form_poster_","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","BRAINTREE_PAYPAL","braintree_paypal_payment_strategy","BRAINTREE_PAYPAL_CREDIT","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","create_googlepay_payment_processor","googlepay_braintree_initializer","WE_PAY","wepay_payment_strategy","MASTERPASS","masterpass_script_loader","STRIPE_GOOGLE_PAY","googlepay_stripe_initializer","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_actions","LoadInstrumentsRequested","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","LoadInstrumentsSucceeded","LoadInstrumentsFailed","deleteInstrument","DeleteInstrumentRequested","DeleteInstrumentSucceeded","DeleteInstrumentFailed","_isValidVaultAccessToken","date","newDate","valueOf","Date","now","isFuture","vaultAccessExpiry","getTime","setMinutes","getMinutes","getVaultAccessToken","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaultedInstruments","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","map","bigpayToken","bigpay_token","defaultInstrument","default_instrument","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","errorResponse","loadInstrumentsWithAddress","checkout_store_selector","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","company","stateOrProvince","customFields","getShippingOptions","availableShippingOptions","getSelectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","checkout_store_error_selector","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","checkout_store_status_selector","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","statuses","ErrorMessageTransformer","_messageCustomizer","transform","to_single_line","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","_state","_errorTransformer","get_environment","error_message_transformer","isCheckoutServiceError","CustomerNotInitialized","ShippingNotInitialized","notifyState","subscriber","filters","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","DEFAULT_RESPONSE","RequestError","ConfigActionType","selectorDecorator","target","decoratedTarget","class_1","getOwnPropertyNames","forEach","descriptor","getOwnPropertyDescriptor","resolver","_utility__WEBPACK_IMPORTED_MODULE_2__","memoizedMethod","lodash__WEBPACK_IMPORTED_MODULE_1__","args","getKey","_utility__WEBPACK_IMPORTED_MODULE_3__","cachedValue","getUsedCount","newValue","_utility__WEBPACK_IMPORTED_MODULE_4__","keyFilter","_utility__WEBPACK_IMPORTED_MODULE_5__","cache","set","selectorMethodDecorator","ContentType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","PaymentActionType","clearErrorReducer","_utility__WEBPACK_IMPORTED_MODULE_0__","_error_actions__WEBPACK_IMPORTED_MODULE_1__","isClearErrorAction","objectA","objectB","Array","isArray","index","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keysA","keys","keysB","length_2","isObjectEqual","CustomerActionType","InvalidArgumentError","HOSTED","AmountTransformer","_dp","toInteger","Math","floor","pow","isIframeEvent","PaymentMethodInvalidError","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","containerIds","containerId","test","selector","idPrefix","querySelectorAll","slice","setUniqueElementId","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","useCache","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","checkout_button_method_type","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","split","first_name","last_name","address_line_1","address_line_2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_getMethodId","_createSignInButton","parentNode","googlePayButton","createButton","_onPaymentSelectComplete","_onError","masterpass_button_strategy","MasterpassButtonStrategy","_signInButton","buttonContainer","src","cartAmount","PaypalButtonStrategy","_host","clientId","actions","X-API-INTERNAL","internal_api_headers","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","formPoster","checkout_button_initializer","checkout_button_strategy_action_creator","braintree_paypal_button_strategy","GOOGLEPAY_BRAINTREE","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutIncludes","mapToInternalLineItems","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","itemMap","decimalPlaces","idKey","reduce","mapToInternalLineItemType","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","_is_equal__WEBPACK_IMPORTED_MODULE_0__","CacheKeyResolver","_lastId","_maps","_resolveMap","parentMaps","cacheKey","usedCount","_generateKey","isMatched","parentMaps_1","maps","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","postMessage","setTarget","createActionTransformer","requestErrorFactory","action$","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","detail","createError","CheckoutSelector","storeCredit","max","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","_common_error__WEBPACK_IMPORTED_MODULE_4__","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_9__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_8__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_7__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","mapGiftCertificateToInternalLineItem","___WEBPACK_IMPORTED_MODULE_0__","amountTransformer","amountAfterDiscount","discount","integerAmount","integerAmountAfterDiscount","integerDiscount","sender","recipient","attributes","variantId","mapToInternalLineItem","_amount_transformer__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","billing_address_selector","BillingAddressSelector","continueAsGuestError","config_selector","ConfigSelector","getExternalSource","form_selector","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","country_selector","CountrySelector","payment_selector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","replace","step","payments","providerType","payment_method_selector","PaymentMethodSelector","loadMethodId","loadMethodError","payment_strategy_selector","PaymentStrategySelector","payment_strategy_state","initializeMethodId","initializeError","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","remote_checkout_selector","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","cart_selector","checkout_button_selector","coupon_selector","customer_selector","customer_strategy_selector","gift_certificate_selector","instrument_selector","shipping_address_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","create_freeze_proxy","setPrototypeOf","__proto__","isPrivate","indexOf","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","ErrorActionType","PaymentMethodActionCreator","rxjs__WEBPACK_IMPORTED_MODULE_2__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_action__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","JsonV1","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","splice","trigger","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","_common_utility__WEBPACK_IMPORTED_MODULE_2__","INTERNAL_USE_ONLY","CheckoutButtonSelector","initializedContainers","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","DEFAULT_DATA_STATE","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","a","withNamespace","removeItem","getItemOnce","setItem","InvalidLoginTokenError","title","NotEmbeddableError","UnknownError","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","_allowCookie","_attemptLogin","createFrame","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","pathname","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","handleTransitionEnd","bottom","right","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","STORAGE_PREFIX","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","mapToInternalCart","promotions","notifications","amount_transformer","map_to_internal_line_items","coupon","sum","map_to_internal_coupon","discountNotifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","lineItem","isShippingRequired","taxSubtotal","taxes","handling","handlingCostTotal","CheckoutActionCreator","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","ConsignmentActionCreator","_consignmentRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","DEFAULT_PARAMS","ConsignmentRequestSender","put","delete","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","UnrecoverableError","joinErrors","map_from_payment_error_response_joinErrors","PAYMENT_ERROR_CODES","RequestErrorFactory","_factoryMethods","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","factoryMethod","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","storefrontErrorResponse","internalErrorResponse","billingAddressReducer","clear_error_reducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","merge_or_push","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","factory","actionTransformer","create_action_transformer","request_error_factory","unrecoverable_error","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","isAddressEqual","addressA","addressB","normalize","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","mapToInternalCoupon","couponTypes","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","joinIncludes","includes","NotInitializedErrorType","NotInitializedError","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","hash","hostname","port","search","cachableActionDecorator","memoizedMethods","WeakMap","decorateMethod","param","lastArg","fn","instanceMethods","cache_key_resolver","createFreezeProxies","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","CustomerStrategyActionCreator","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","_common_error__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_4__","CustomerActionCreator","_customerRequestSender","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerSucceeded","SignOutCustomerFailed","CustomerRequestSender","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_7__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_5__","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_5__","_order__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_6__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_4__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","mergeOrPush","array","newArray","shippingCountryReducer","_common_error__WEBPACK_IMPORTED_MODULE_2__","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_3__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","_coupon__WEBPACK_IMPORTED_MODULE_3__","customerCanBeCreated","mapToInteralOrderPayment","baseAmount","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","customerStrategyReducer","customer_strategy_actions","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","getCallbackUrl","omitPrivate","_is_private__WEBPACK_IMPORTED_MODULE_0__","_omit_deep__WEBPACK_IMPORTED_MODULE_1__","getEnvironment","process","NODE_ENV","e","OrderRequestSender","OrderActionCreator","_orderRequestSender","_order_actions__WEBPACK_IMPORTED_MODULE_6__","_getCurrentOrderId","SubmitOrderRequested","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","toSingleLine","input","trim","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponActionCreator","_couponRequestSender","_checkout__WEBPACK_IMPORTED_MODULE_0__","_checkout__WEBPACK_IMPORTED_MODULE_1__","_common_http_request__WEBPACK_IMPORTED_MODULE_2__","_common_http_request__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateActionCreator","_giftCertificateRequestSender","GiftCertificateRequestSender","giftCertificateCode","CancellablePromise","cancellable","race","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","toLowerCase","precision","round","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","currency_service","checkout_buttons","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","RemoteCheckoutRequestSender","methodName","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","RemoteCheckoutActionCreator","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","getDefaultLogger","isEnabled","logger","console_logger","console","noop_logger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 191);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CONVERGE = 'converge',\n    CREDIT_CARD = 'creditcard',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n}\n\nexport default PaymentStrategyType;\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport {\n    AuthenticateThreeDSAction,\n    InitializeOffsitePaymentAction,\n    PaymentActionType,\n    SubmitPaymentAction,\n} from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n\n    authenticateThreeDS(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<AuthenticateThreeDSAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._getPaymentRequestBody({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.AuthenticateThreeDSRequested)),\n                this._paymentRequestSender.authenticateThreeDS(payload)\n                    .then(() => createAction(PaymentActionType.AuthenticateThreeDSSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.AuthenticateThreeDSFailed, error))\n            );\n        };\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(state.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    authenticateThreeDS(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.authenticateThreeDS(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation(useStoreCredit));\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(useStoreCredit: boolean = false): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!consignments) {\n            throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n        }\n\n        const consignment = consignments[0];\n\n        if (!consignment || !consignment.selectedShippingOption) {\n            throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n        }\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress(),\n            billing: this._getBillingAddress(),\n            items: this._getItems(),\n            discounts: this._getDiscounts(),\n            metadata: {\n                shipping_type: consignment.selectedShippingOption.type,\n                mode: 'modal',\n            },\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: order.shippingCostTotal * 100,\n            tax_amount: order.taxTotal * 100,\n            total: order.orderAmount * 100,\n        };\n\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingShippingAddress);\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(): AffirmItem[] {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n        const items: AffirmItem[] = [];\n\n        for (const item of cart.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: item.salePrice,\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        for (const item of cart.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: item.salePrice,\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n            });\n        }\n\n        if (cart.lineItems.customItems) {\n            for (const item of cart.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: item.listPrice,\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        for (const item of cart.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: item.amount,\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(): AffirmDiscount {\n        const state = this._store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const discounts: AffirmDiscount = {};\n        for (const line of cart.coupons) {\n            discounts[line.code] = {\n                discount_amount: line.discountedAmount,\n                discount_display_name: line.displayName,\n            };\n        }\n        for (const line of cart.discounts) {\n            discounts[line.id] = {\n                discount_amount: line.discountedAmount,\n                discount_display_name: line.id,\n            };\n        }\n\n        return discounts;\n    }\n\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getGrandTotal(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.authenticateThreeDS(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _zipScriptLoader: ZipScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._zipScriptLoader.load()\n            .then(zip => {\n                this._zipClient = zip;\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n            })\n            .then(()  => {\n                return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n                    .then(() => new Promise<string>((resolve, reject) => {\n                        zipClient.Checkout.init({\n                            onComplete: ({ checkoutId, state }) => {\n                                if (state === ZipModalEvent.CancelCheckout) {\n                                    return reject(new PaymentMethodCancelledError());\n                                }\n\n                                if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                                    return resolve(checkoutId);\n                                }\n\n                                reject(new PaymentMethodInvalidError());\n                            },\n                            onCheckout: openModal => {\n                                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                openModal(JSON.parse(this._paymentMethod.clientToken));\n                            },\n                        });\n                    })\n                    .then(nonce =>\n                        this._store.dispatch(this._paymentActionCreator.submitPayment({\n                            methodId: payment.methodId,\n                            paymentData: { nonce },\n                        }))\n                    ));\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator);\n    const paymentActionCreator = new PaymentActionCreator(new PaymentRequestSender(paymentClient), orderActionCreator);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new ZipScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n    new ConvergePaymentStrategy(\n        store,\n        orderActionCreator,\n        paymentActionCreator\n    )\n);\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddress, BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        // tslint:disable-next-line:cyclomatic-complexity\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","export * from './checkout-actions';\n\nexport { default as Checkout, CheckoutPayment } from './checkout';\nexport { default as CHECKOUT_DEFAULT_INCLUDES } from './checkout-default-includes';\nexport { default as CheckoutActionCreator } from './checkout-action-creator';\nexport { default as CheckoutParams, CheckoutIncludes } from './checkout-params';\nexport { default as checkoutReducer } from './checkout-reducer';\nexport { default as CheckoutRequestSender } from './checkout-request-sender';\nexport { default as CheckoutSelector } from './checkout-selector';\nexport { default as CheckoutSelectors } from './checkout-selectors';\nexport { default as CheckoutService } from './checkout-service';\nexport { default as CheckoutState } from './checkout-state';\nexport { default as CheckoutStoreErrorSelector } from './checkout-store-error-selector';\nexport { default as CheckoutStoreSelector } from './checkout-store-selector';\nexport { default as CheckoutStoreState } from './checkout-store-state';\nexport { default as CheckoutStoreStatusSelector } from './checkout-store-status-selector';\nexport { default as CheckoutStore, CheckoutStoreOptions, ReadableCheckoutStore } from './checkout-store';\nexport { default as CheckoutValidator } from './checkout-validator';\nexport { default as InternalCheckoutSelectors } from './internal-checkout-selectors';\n\nexport { default as createActionTransformer } from './create-action-transformer';\nexport { default as createCheckoutService } from './create-checkout-service';\nexport { default as createCheckoutStore } from './create-checkout-store';\nexport { default as createCheckoutSelectors } from './create-checkout-selectors';\nexport { default as createInternalCheckoutSelectors } from './create-internal-checkout-selectors';\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any; };\n    errors: Array<{ code: string, message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string, message?: string }>,\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n\n    AuthenticateThreeDSRequested = 'AUTHENTICATE_3DS_REQUESTED',\n    AuthenticateThreeDSSucceeded = 'AUTHENTICATE_3DS_SUCCEEDED',\n    AuthenticateThreeDSFailed = 'AUTHENTICATE_3DS_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport type AuthenticateThreeDSAction =\n    AuthenticateThreeDSRequestedAction |\n    AuthenticateThreeDSSucceededAction |\n    AuthenticateThreeDSFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n\nexport interface AuthenticateThreeDSRequestedAction extends Action {\n    type: PaymentActionType.AuthenticateThreeDSRequested;\n}\n\nexport interface AuthenticateThreeDSSucceededAction extends Action {\n    type: PaymentActionType.AuthenticateThreeDSSucceeded;\n}\n\nexport interface AuthenticateThreeDSFailedAction extends Action<Error> {\n    type: PaymentActionType.AuthenticateThreeDSFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\n\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","export { default as createCheckoutButtonInitializer } from './create-checkout-button-initializer';\nexport { default as checkoutButtonReducer } from './checkout-button-reducer';\nexport { default as CheckoutButtonSelector } from './checkout-button-selector';\nexport { default as CheckoutButtonState } from './checkout-button-state';\n\nexport { CheckoutButtonOptions, CheckoutButtonInitializeOptions } from './checkout-button-options';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","module.exports = require(\"local-storage-fallback\");","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import isEqual from './is-equal';\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (!isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getGrandTotal(useStoreCredit?: boolean): number | undefined {\n        const checkout = this.getCheckout();\n\n        if (!checkout) {\n            return;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : grandTotal;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import AmountTransformer from './amount-transformer';\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const grandTotal = this._checkout.getGrandTotal(useStoreCredit);\n\n        return grandTotal ? grandTotal > 0 : false;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._paymentStrategies.data[methodId] &&\n            this._paymentStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean {\n        const method = this._checkoutButton.data[methodId];\n\n        if (!method) {\n            return false;\n        }\n\n        if (!containerId) {\n            return some(method.initializedContainers, isInitialized => isInitialized === true);\n        }\n\n        return method.initializedContainers[containerId] === true;\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return {\n            ...data,\n            initializedContainers: {\n                ...data.initializedContainers,\n                [action.meta.containerId]: true,\n            },\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...data,\n            initializedContainers: {},\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export { default as embedCheckout } from './embed-checkout';\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string, message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n\nexport const PAYMENT_ERROR_CODES = [\n    'payment',\n    'transaction_declined',\n];\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse, { PAYMENT_ERROR_CODES } from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && PAYMENT_ERROR_CODES.indexOf(error.code) !== -1) {\n            return 'payment';\n        }\n\n        return error && error.code ? error.code : 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CountryActionType.LoadCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return action.payload ? action.payload.vaultedInstruments : [];\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return { ...statuses, isLoading: false };\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): RequestError | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): RequestError | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._customerStrategies.data[methodId] &&\n            this._customerStrategies.data[methodId].isInitialized\n        );\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n\n    isInitialized(methodId: string): boolean {\n        return !!(\n            this._shippingStrategies.data[methodId] &&\n            this._shippingStrategies.data[methodId].isInitialized\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean,\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        };\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...data,\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        };\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError} from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\n\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\n\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/action';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.grandTotal, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}