{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs/Observable\"","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-types.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/external \"rxjs/observable/concat\"","webpack://checkoutKit/external \"rxjs/observable/of\"","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/strategies/payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-action-types.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"rxjs/observable/defer\"","webpack://checkoutKit/./src/embedded-checkout/parse-origin.ts","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/external \"rxjs/observable/from\"","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/selector/cache-key-resolver.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/external \"rxjs/observable/empty\"","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/external \"rxjs/observable/throw\"","webpack://checkoutKit/external \"rxjs/observable/merge\"","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/cart/amount-transformer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/strategies/shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/common/http-request/to-form-url-encoded.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","standard_error_StandardError","_super","StandardError","message","_this","this","type","setPrototypeOf","__proto__","_newTarget","Error","captureStackTrace","stack","external_tslib_","ConsignmentActionType","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","CouponActionType","BillingAddressActionType","GiftCertificateActionType","PaymentMethodActionType","LOAD_INSTRUMENTS_REQUESTED","LOAD_INSTRUMENTS_SUCCEEDED","LOAD_INSTRUMENTS_FAILED","DELETE_INSTRUMENT_REQUESTED","DELETE_INSTRUMENT_SUCCEEDED","DELETE_INSTRUMENT_FAILED","CheckoutButtonActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","ContentType","__webpack_exports__","CountryActionCreator","_countryRequestSender","loadCountries","options","Observable_","observer","next","data_store_","country_action_types","then","response","body","data","complete","catch","error","CountryRequestSender","_requestSender","_config","_a","timeout","headers","Accept-Language","locale","OrderFinalizationNotRequiredError","standard_error","PaymentStrategyActionCreator","_strategyRegistry","_orderActionCreator","execute","payload","store","strategy","state","getState","payment","useStoreCredit","meta","methodId","isPaymentDataRequired","method","paymentMethods","getPaymentMethod","gatewayId","missing_data_error","MissingPaymentMethod","getByMethod","payment_strategy_actions","ExecuteRequested","undefined","ExecuteSucceeded","ExecuteFailed","finalize","concat_","of_","FinalizeRequested","_loadOrderPaymentsIfNeeded","defer_","getPaymentId","order_finalization_not_required_error","providerId","id","gateway","FinalizeSucceeded","pipe","operators_","throw_error_action","FinalizeFailed","initialize","InitializeRequested","InitializeSucceeded","InitializeFailed","deinitialize","DeinitializeRequested","DeinitializeSucceeded","DeinitializeFailed","widgetInteraction","WidgetInteractionStarted","WidgetInteractionFinished","WidgetInteractionFailed","checkout","getCheckout","orderId","loadOrderPayments","empty_","CartChangedError","CheckoutValidator","_checkoutRequestSender","validate","MissingCheckout","loadCheckout","comparator","cart_comparator","grandTotal","_compareCoupons","coupons","_compareGiftCertificates","giftCertificates","isEqual","cart","cart_changed_error","couponsA","couponsB","external_lodash_","giftCertificatesA","giftCertificatesB","isVaultedInstrument","instrument","Boolean","instrumentId","CardBrand","DigitalWalletType","PaymentActionCreator","_paymentRequestSender","submitPayment","payment_actions","SubmitPaymentRequested","from_","_getPaymentRequestBody","loadCurrentOrder","SubmitPaymentSucceeded","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","paymentData","invalid_argument_error","billingAddress","getBillingAddress","customer","getCustomer","order","getOrder","paymentMethod","_getPaymentMethod","shippingAddress","getShippingAddress","consignments","getConsignments","shippingOption","getShippingOption","storeConfig","config","getStoreConfig","contextConfig","getContextConfig","instrumentMeta","instruments","getInstrumentsMeta","paymentMeta","getPaymentMethodsMeta","orderMeta","getOrderMeta","internalCustomer","map_to_internal_customer","authToken","getPaymentToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","request","geoCountryCode","source","storeProfile","paymentMethodSelector","initializationData","PaymentRequestSender","_client","Promise","resolve","reject","_transformResponse","status","statusText","PaymentStrategyRegistry","_store","token","_getToken","cacheToken","_hasFactory","payment_method_types","_isLegacyMethod","MissingCheckoutConfig","clientSidePaymentProviders","paymentSettings","registry_registry","PaymentArgumentInvalidError","invalidFields","join","PaymentStrategy","_isInitialized","AfterpayPaymentStrategy","_checkoutValidator","_paymentActionCreator","_paymentMethodActionCreator","_remoteCheckoutActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","load","_mapCountryToISO2","afterpaySdk","_afterpaySdk","paymentId","payment_argument_invalid_error","dispatch","initializePayment","loadPaymentMethod","_displayModal","loadSettings","afterpay","remoteCheckout","settings","not_initialized_error","PaymentNotInitialized","orderPayload","paymentPayload","nonce","submitOrder","countryName","clientToken","countryCode","display","payment_strategy","AmazonPayPaymentStrategy","_billingAddressActionCreator","_scriptLoader","_window","window","amazonOptions","amazon","_walletOptions","_paymentMethod","loadWidget","_createWallet","referenceId","_getOrderReferenceId","_b","request_error","_getMerchantId","merchantId","container","onError","onPaymentSelect","_c","onReady","document","getElementById","OffAmazonPayments","walletOptions","amazonOrderReferenceId","design","designMode","scope","sellerId","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","initializeBilling","remoteAddress","billing","address","internalBillingAddress","is_internal_address_equal","updateAddress","map_from_internal_address","updateCheckout","getAmazonOrderReferenceId","CreditCardPaymentStrategy","PaymentMethodCancelledError","KlarnaPaymentStrategy","_klarnaScriptLoader","klarnaCredit","_klarnaCredit","_unsubscribe","subscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","onLoad","init","client_token","show_form","payment_method_invalid_error","authorize","res","approved","payment_method_cancelled_error","LegacyPaymentStrategy","OfflinePaymentStrategy","action","OffsitePaymentStrategy","_shouldSubmitFullPayload","getPaymentStatus","payment_status_types","finalizeOrder","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_isInContextEnabled","loadPaypal","paypal","_paypalSdk","setup","button","environment","testMode","closeFlow","_isAcknowledgedOrFinalized","redirectUrl","getPaymentRedirectUrl","location","assign","initXO","startFlow","SagePayPaymentStrategy","_formPoster","errors","code","postForm","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","UnsupportedBrowserError","SquarePaymentStrategy","_checkoutActionCreator","_paymentStrategyActionCreator","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","orderRequest","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","timeout_error","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","masterpass","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","_paymentInstrumentSelected","_setExternalCheckoutData","all","loadCurrentCheckout","queueId","requestShippingAddress","requestBillingInfo","currencyCode","currency","total","label","storeName","amount","String","subtotal","pending","post","Accept","Content-Type","to_form_url_encoded","provider","JSON","stringify","postalCode","setPostalCode","element","masterpassBtn","elementId","style","NoPaymentDataRequiredPaymentStrategy","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","braintree","_is3dsEnabled","is3dsEnabled","_handleError","_preparePaymentData","_isUsingVaulting","card","ccName","ccNumber","ccType","ccExpiry","month","year","isCreditCardLike","shouldSaveInstrument","tokenizedCard","verifyCard","tokenizeCard","appendSessionId","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","preloadPaypal","storeLanguage","BraintreeVisaCheckoutPaymentStrategy","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","visaCheckoutOptions","braintreevisacheckout","initOptions","collectShipping","visaCheckout","visaInitOptions","on","paymentSuccessPayload","handleSuccess","GooglePayPaymentStrategy","_googlePayPaymentProcessor","_methodId","_googlePayOptions","_getGooglePayOptions","walletButton","_walletButton","addEventListener","_handleWalletButtonClick","removeEventListener","_getPayment","cardInformation","displayWallet","statusCode","googlepaybraintree","googlepaystripe","MissingPayment","card_information","event","preventDefault","bind_decorator","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","_wepayRiskClient","getRiskToken","payloadWithToken","deviceSessionId","credit_card_payment_strategy","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","scriptURI","_getScriptURI","loadScript","AfterPay","promise","cancellable","cancel","race","BraintreePaymentProcessor","_braintreeSDKCreator","_threeDSecureOptions","threeDSecure","getPaypal","requestData","_mapToCreditCard","getClient","client","creditCards","offerCredit","tokenize","enableShippingAddress","flow","useraction","addFrame","removeFrame","get3DS","cancelVerifyCard","verification","cancellable_promise","iframe","processedPayment","getDataCollector","deviceData","teardown","creditCard","streetAddress","address1","address2","cardholderName","number","cvv","ccCvv","expirationDate","country","endpoint","ChasePayEventType","ChasePayPaymentStrategy","_chasePayScriptLoader","_walletEvent$","external_rxjs_","chasepay","_configureWallet","_chasePayClient","subtype","_displayWallet","_createOrder","ChasePay","logoContainer","insertBrandings","color","containers","configure","language","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","sessionToken","showLoadingAnimation","startCheckout","digitalSessionId","take","merchantRequestId","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","toString","substr","accountNum","accountMask","extraData","KlarnaScriptLoader","Klarna","Credit","MasterpassPaymentStrategy","_masterpassScriptLoader","_masterpassClient","_createMasterpassPayload","checkoutId","allowedCardTypes","toFixed","cartId","suppressShippingAddress","SquareScriptLoader","SqPaymentForm","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","createPaymentStrategyRegistry","paymentClient","requestSender","registry","payment_strategy_registry","defaultToken","scriptLoader","script_loader_","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","braintreeScriptLoader","braintree_script_loader","braintreeSDKCreator","braintree_sdk_creator","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkout_request_sender","checkoutValidator","checkout_validator","order_action_creator","order_request_sender","payment_action_creator","payment_request_sender","paymentMethodActionCreator","payment_method_action_creator","payment_method_request_sender","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configRequestSender","config_request_sender","configActionCreator","config_action_creator","checkoutActionCreator","checkout_action_creator","paymentStrategyActionCreator","payment_strategy_action_creator","register","afterpay_payment_strategy","afterpay_script_loader","amazon_pay_payment_strategy","amazon_pay_script_loader","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","paypal_pro_payment_strategy","paypal_express_payment_strategy","paypal_script_loader","sage_pay_payment_strategy","form_poster_","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","braintree_visacheckout_payment_strategy","create_braintree_visacheckout_payment_processor","visacheckout_script_loader","chasepay_payment_strategy","chasepay_script_loader","wepay_risk_client","googlepay_payment_strategy","create_googlepay_payment_processor","googlepay_braintree_initializer","wepay_payment_strategy","masterpass_payment_strategy","masterpass_script_loader","googlepay_stripe_initializer","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","instrument_action_types","session","_getSessionContext","_getCurrentAccessToken","_getShippingAddress","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","valueOf","Date","now","isFuture","newDate","getTime","setMinutes","getMinutes","addMinutes","vaultAccessExpiry","getVaultAccessToken","expires_at","getCart","MissingCart","customerId","storeId","InstrumentResponseTransformer","transformResponse","vaulted_instruments","vaultedInstruments","_transformVaultedInstruments","transformErrorResponse","map","bigpayToken","bigpay_token","iin","last4","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","brand","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","CheckoutStoreSelector","selectors","_billingAddress","_cart","_checkout","_consignments","_countries","countries","_coupons","_customer","_form","form","_giftCertificates","_instruments","_order","_payment","_paymentMethods","_shippingAddress","_shippingCountries","shippingCountries","getConfig","context","firstName","lastName","company","city","stateOrProvince","stateOrProvinceCode","phone","customFields","getShippingOptions","length","availableShippingOptions","getSelectedShippingOption","selectedShippingOption","getShippingCountries","getBillingCountries","getCountries","getPaymentMethods","getSelectedPaymentMethod","getCoupons","getGiftCertificates","isPaymentDataSubmitted","getInstruments","getBillingAddressFields","getShippingAddressFields","selector_decorator","CheckoutStoreErrorSelector","_customerStrategies","customerStrategies","_paymentStrategies","paymentStrategies","_shippingStrategies","shippingStrategies","getError","getLoadCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getLoadShippingOptionsError","getSelectShippingOptionError","getSignInError","getSignOutError","getInitializeCustomerError","getUpdateShippingAddressError","getUpdateBillingAddressError","getContinueAsGuestError","getUpdateConsignmentError","getCreateConsignmentsError","getDeleteConsignmentError","getInitializeShippingError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","getLoadError","getUpdateCheckoutError","getUpdateError","getExecuteError","getFinalizeError","getLoadMethodError","getInitializeError","consignmentId","getSelectOptionError","getUpdateShippingOptionError","getUpdateAddressError","getDeleteError","getCreateError","getApplyError","getRemoveError","CheckoutStoreStatusSelector","isPending","isLoadingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isLoadingShippingOptions","isSelectingShippingOption","isSigningIn","isSigningOut","isInitializingCustomer","isUpdatingBillingAddress","isContinuingAsGuest","isUpdatingShippingAddress","isUpdatingConsignment","isCreatingConsignments","isDeletingConsignment","isInitializingShipping","isApplyingCoupon","isRemovingCoupon","isApplyingGiftCertificate","isRemovingGiftCertificate","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","isCustomerStepPending","isPaymentStepPending","isLoading","isUpdatingCheckout","isUpdating","isExecuting","isFinalizing","isLoadingMethod","isInitializing","isSelectingOption","isUpdatingShippingOption","isUpdatingAddress","isDeleting","isCreating","isApplying","isRemoving","isWidgetInteracting","createCheckoutSelectors","checkout_store_selector","checkout_store_error_selector","statuses","checkout_store_status_selector","ErrorMessageTransformer","_messageCustomizer","transform","input","split","line","replace","trim","toSingleLine","CheckoutService","_configActionCreator","_consignmentActionCreator","_countryActionCreator","_couponActionCreator","_customerStrategyActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","_state","_errorTransformer","isDevelopment","get_environment","error_message_transformer","isCheckoutServiceError","MissingConsignments","MissingOrder","MissingOrderId","CustomerNotInitialized","ShippingNotInitialized","createCheckoutServiceErrorTransformer","notifyState","subscriber","filters","_i","arguments","apply","concat","filter","_dispatch","loadDefaultCheckout","loadOrder","loadCheckoutAction","loadConfigAction","loadConfig","finalizeOrderIfNeeded","loadPaymentMethods","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","credentials","signInCustomer","signIn","signOutCustomer","signOut","loadShippingOptions","initializeShipping","deinitializeShipping","selectShippingOption","shippingOptionId","selectOption","updateShippingAddress","createConsignments","deleteConsignment","updateConsignment","consignment","assignItemsToAddress","assignItemsByAddress","unassignItemsToAddress","unassignItemsByAddress","selectConsignmentShippingOption","updateShippingOption","updateBillingAddress","applyCoupon","removeCoupon","applyGiftCertificate","removeGiftCertificate","createCheckoutService","protocol","get_default_logger","warn","externalSource","shouldWarnMutation","request_sender_","host","create_checkout_store","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","checkout_service","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","create_customer_strategy_registry","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","create_shipping_strategy_registry","ConfigActionType","LOAD_COUNTRIES_REQUESTED","LOAD_COUNTRIES_SUCCEEDED","LOAD_COUNTRIES_FAILED","ShippingCountryActionType","parseOrigin","url","test","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","anchor","createElement","href","hostname","port","ACKNOWLEDGE","FINALIZE","DEFAULT_STATE","CustomerActionType","PaymentActionType","HOSTED","OFFLINE","isIframeEvent","CacheKeyResolver","_lastId","_maps","getKey","args","_resolveMap","index","parentMaps","cacheKey","usedCount","_generateKey","slice","getUsedCount","isMatched","parentMaps_1","maps","push","CheckoutButtonErrorSelector","_checkoutButton","checkoutButton","getInitializeButtonError","getDeinitializeButtonError","getDeinitializeError","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","isDeinitializing","createCheckoutButtonSelectors","checkout_button_error_selector","checkout_button_status_selector","CheckoutButtonMethodType","CheckoutButtonInitializer","_buttonStrategyActionCreator","initializeButton","deinitializeButton","CheckoutButtonStrategyActionCreator","_registry","checkout_button_actions","InitializeButtonRequested","InitializeButtonSucceeded","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonSucceeded","DeinitializeButtonFailed","CheckoutButtonStrategy","containerId","BraintreePaypalButtonStrategy","_paypalScriptLoader","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","getPaypalCheckout","paypalCheckout","_paypalCheckout","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","commit","shouldProcessPayment","funding","allowed","disallowed","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","keys","addresses","CheckoutButtonNotInitialized","createPayment","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","tokenizePayment","payment_type","device_data","shipping_address","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","checkout_button_strategy","MasterpassButtonStrategy","_signInButton","_createSignInButton","parentNode","removeChild","buttonContainer","querySelector","src","appendChild","cartAmount","GooglePayButtonStrategy","_getMethodId","googlePayButton","createButton","_onPaymentSelectComplete","_onError","PaypalButtonStrategy","clientId","actions","paymentID","payerID","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","checkout_button_initializer","checkout_button_strategy_action_creator","formPoster","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_button_strategy","GOOGLEPAY_BRAINTREE","googlepay_button_strategy","GOOGLEPAY_STRIPE","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","CheckoutActionType","OrderActionType","DEFAULT_RESPONSE","RequestError","Array","isArray","reduce","result","joinErrors","detail","title","tslib__WEBPACK_IMPORTED_MODULE_0__","CheckoutButtonSelector","lodash__WEBPACK_IMPORTED_MODULE_1__","initializeError","deinitializeError","_common_selector__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","item","_map_gift_certificate_to_internal_line_item__WEBPACK_IMPORTED_MODULE_0__","_map_to_internal_line_item__WEBPACK_IMPORTED_MODULE_1__","mapToInternalLineItemType","createActionTransformer","requestErrorFactory","action$","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_1__","rxjs_operators__WEBPACK_IMPORTED_MODULE_2__","every","isResponse","createError","CheckoutSelector","loadError","updateError","_common_selector__WEBPACK_IMPORTED_MODULE_1__","checkoutReducer","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","dataReducer","errorsReducer","statusesReducer","reducer","_checkout_actions__WEBPACK_IMPORTED_MODULE_8__","LoadCheckoutSucceeded","UpdateCheckoutSucceeded","_billing__WEBPACK_IMPORTED_MODULE_3__","UpdateBillingAddressSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_4__","ApplyCouponSucceeded","RemoveCouponSucceeded","_shipping__WEBPACK_IMPORTED_MODULE_7__","CreateConsignmentsSucceeded","UpdateConsignmentSucceeded","DeleteConsignmentSucceeded","UpdateShippingOptionSucceeded","_coupon__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","lodash__WEBPACK_IMPORTED_MODULE_2__","_order__WEBPACK_IMPORTED_MODULE_6__","SubmitOrderSucceeded","LoadCheckoutRequested","LoadCheckoutFailed","UpdateCheckoutRequested","UpdateCheckoutFailed","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","_checkout_button_actions__WEBPACK_IMPORTED_MODULE_2__","mapGiftCertificateToInternalLineItem","amountTransformer","___WEBPACK_IMPORTED_MODULE_0__","imageUrl","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapToInternalLineItem","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","categoryNames","productId","option","addedByPromotion","BillingAddressSelector","continueAsGuestError","createFreezeProxy","target","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","getOwnPropertyNames","forEach","charAt","createProxy","ConfigSelector","getExternalSource","FormSelector","selectedCountry","formFields","shippingAddressFields","field","_processField","billingAddressFields","_processCountry","_processProvince","_processsPostCode","items","default","fieldType","itemtype","subdivisions","required","hasPostalCodes","CountrySelector","PaymentSelector","internalPayment","_getInternalPayment","_getHostedPayment","_getGatewayPayment","step","storeCredit","payments","providerType","PaymentMethodSelector","loadMethodId","loadMethodError","PaymentStrategySelector","payment_strategy_state","initializeMethodId","executeMethodId","executeError","finalizeMethodId","finalizeError","getWidgetInteractingError","widgetInteractionMethodId","widgetInteractionError","InstrumentSelector","failedInstrument","deleteError","deletingInstrument","RemoteCheckoutSelector","_remoteCheckout","createInternalCheckoutSelectors","billing_address_selector","cart_selector","checkout_button_selector","config_selector","country_selector","coupon_selector","customer_selector","customer_strategy_selector","form_selector","gift_certificate_selector","instrument_selector","payment_method_selector","payment_strategy_selector","shipping_address_selector","remote_checkout_selector","shipping_country_selector","shipping_strategy_selector","consignment_selector","checkout_selector","order_selector","payment_selector","createFreezeProxies","mapToInternalCart","amount_transformer","map_to_internal_line_items","lineItems","coupon","discountedAmount","sum","map_to_internal_coupon","discountNotifications","promotions","notifications","promotion","banners","banner","placeholders","discountType","messageHtml","text","mapToDiscountNotifications","giftCertificate","totalDiscountedAmount","certificate","used","appliedGiftCertificates","map_to_internal_gift_certificate","shipping","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","physicalItems","lineItem","isShippingRequired","taxSubtotal","taxTotal","taxes","handling","handlingCostTotal","objectA","objectB","length_1","isArrayEqual","isDateEqual","RegExp","isRegExpEqual","keyFilter","keysA","keysB","length_2","isObjectEqual","selectorDecorator","decoratedTarget","class_1","descriptor","getOwnPropertyDescriptor","resolver","cache_key_resolver","memoizedMethod","cachedValue","newValue","is_private","cache","set","selectorMethodDecorator","PaymentMethodInvalidError","CheckoutRequestSender","params","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","JsonV1","include","_checkout_default_includes__WEBPACK_IMPORTED_MODULE_1__","put","CheckoutActionCreator","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_1__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_4__","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","_checkout_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_merge__WEBPACK_IMPORTED_MODULE_3__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_5__","_common_error__WEBPACK_IMPORTED_MODULE_7__","_common_error_errors__WEBPACK_IMPORTED_MODULE_8__","rxjs_Observable__WEBPACK_IMPORTED_MODULE_6__","_common_error_errors__WEBPACK_IMPORTED_MODULE_9__","DEFAULT_PARAMS","ConsignmentRequestSender","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","delete","PaymentMethodActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_2__","LoadPaymentMethodsRequested","sessionHash","LoadPaymentMethodsSucceeded","LoadPaymentMethodsFailed","LoadPaymentMethodRequested","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","PaymentMethodRequestSender","X-API-INTERNAL","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_parse_origin__WEBPACK_IMPORTED_MODULE_3__","_isListening","_listeners","listen","_handleMessage","stopListen","addListener","listener","listeners","removeListener","indexOf","splice","trigger","origin","_is_iframe_event__WEBPACK_IMPORTED_MODULE_2__","_common_utility__WEBPACK_IMPORTED_MODULE_1__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","_parse_origin__WEBPACK_IMPORTED_MODULE_0__","postMessage","setTarget","UnrecoverableError","RequestErrorFactory","_factoryMethods","factoryMethod","_getType","billingAddressReducer","billing_address_actions","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","config_reducer_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","country_reducer_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","paymentReducer","payment_reducer_dataReducer","payment_method_reducer_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","predicate","newArray","mergeOrPush","paymentStrategyReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","deinitializeMethodId","instrument_reducer_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","remote_checkout_reducer_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","InitializeRemoteShippingSucceeded","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","createCheckoutStore","initialState","actionTransformer","create_action_transformer","factory","request_error_factory","unrecoverable_error","createRequestErrorFactory","cart_reducer","checkout_reducer","checkout_button_reducer","consignment_reducer","coupon_reducer","customer_reducer","customer_strategy_reducer","gift_certificate_reducer","order_reducer","shipping_country_reducer","shipping_strategy_reducer","stateTransformer","create_internal_checkout_selectors","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","createFrame","_iframe","hide","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","DEFAULT_STYLES","size","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","visibility","opacity","handleTransitionEnd","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","NotEmbeddableError","ResizableIframeCreator","not_embeddable_error","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","parse_origin","is_iframe_event","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","embedded_checkout","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","CheckoutIncludes","consignment_action_creator_ConsignmentActionCreator","ConsignmentActionCreator","_consignmentRequestSender","existingConsignment","getConsignmentByAddress","_removeLineItems","_createOrUpdateConsignment","_addLineItems","consignmentUpdateBody","consignmentMeta","consignment_actions","UpdateShippingOptionRequested","UpdateShippingOptionFailed","LoadShippingOptionsRequested","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","_getConsignmentRequestBody","CreateConsignmentsRequested","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentFailed","DeleteConsignmentRequested","DeleteConsignmentFailed","_isUpdateConsignmentRequest","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","CartSelector","CouponSelector","_coupon","removeCouponError","applyCouponError","CustomerSelector","CustomerStrategySelector","signInMethodId","signInError","signOutMethodId","signOutError","getWidgetInteractionError","GiftCertificateSelector","_giftCertificate","removeGiftCertificateError","applyGiftCertificateError","ShippingAddressSelector","ShippingCountrySelector","ShippingStrategySelector","updateAddressMethodId","updateAddressError","selectOptionMethodId","selectOptionError","ConsignmentSelector","getConsignmentById","_address__WEBPACK_IMPORTED_MODULE_2__","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getItemAssignmentError","updateShippingOptionError","isAssigningItems","_common_selector__WEBPACK_IMPORTED_MODULE_3__","isAddressEqual","addressA","addressB","lodash__WEBPACK_IMPORTED_MODULE_0__","normalize","OrderSelector","cartReducer","_billing_billing_address_actions__WEBPACK_IMPORTED_MODULE_2__","_checkout__WEBPACK_IMPORTED_MODULE_3__","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","_coupon_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_coupon_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","consignmentReducer","_checkout__WEBPACK_IMPORTED_MODULE_2__","_consignment_actions__WEBPACK_IMPORTED_MODULE_4__","_customer__WEBPACK_IMPORTED_MODULE_3__","SignOutCustomerSucceeded","couponReducer","_coupon_actions__WEBPACK_IMPORTED_MODULE_4__","_order__WEBPACK_IMPORTED_MODULE_3__","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","customerReducer","giftCertificateReducer","_shipping_consignment_actions__WEBPACK_IMPORTED_MODULE_3__","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_5__","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","orderReducer","_order_actions__WEBPACK_IMPORTED_MODULE_3__","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","callbackUrl","orderToken","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","shippingCountryReducer","_shipping_country_actions__WEBPACK_IMPORTED_MODULE_2__","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","CustomerStrategyActionCreator","_customer_strategy_actions__WEBPACK_IMPORTED_MODULE_2__","SignInRequested","SignInSucceeded","SignInFailed","SignOutRequested","SignOutSucceeded","SignOutFailed","BraintreeScriptLoader","loadClient","load3DS","loadDataCollector","dataCollector","loadPaypalCheckout","loadVisaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","_clientToken","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","authorization","_paypal","_3ds","cached","kount","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","mod","CustomerActionCreator","_customerRequestSender","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_3__","_customer_actions__WEBPACK_IMPORTED_MODULE_6__","SignInCustomerRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_2__","rxjs_operators__WEBPACK_IMPORTED_MODULE_4__","SignInCustomerSucceeded","_common_error__WEBPACK_IMPORTED_MODULE_5__","SignInCustomerFailed","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","isGuest","fullName","AmountTransformer","_dp","Math","floor","pow","mapToInternalCoupon","couponTypes","displayName","couponType","mapToInternalGiftCertificate","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_cart__WEBPACK_IMPORTED_MODULE_2__","customerCanBeCreated","isDefaultOrderPayment","mapToInternalPaymentStatus","helpText","instructions","returnUrl","mapToInteralOrderPayment","baseAmount","_coupon__WEBPACK_IMPORTED_MODULE_3__","mapToGiftCertificates","socialData","socialDataObject","digitalItems","socialMedia","image","link","shareText","sharingLink","channelName","channel","channelCode","mapToInternalSocialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","mapToStoreCredit","orderAmount","orderAmountAsInteger","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","postCode","customerStrategyReducer","customer_strategy_actions","shippingStrategyReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","SelectOptionFailed","bindDecorator","bindMethodDecorator","bindClassDecorator","boundMethod","isPrivate","OrderRequestSender","OrderActionCreator","_orderRequestSender","rxjs_Observable__WEBPACK_IMPORTED_MODULE_7__","_order_actions__WEBPACK_IMPORTED_MODULE_10__","rxjs_observable_defer__WEBPACK_IMPORTED_MODULE_3__","_getCurrentOrderId","rxjs_observable_concat__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_5__","SubmitOrderRequested","rxjs_observable_from__WEBPACK_IMPORTED_MODULE_4__","_mapToOrderRequestBody","customerMessage","rxjs_operators__WEBPACK_IMPORTED_MODULE_6__","_common_error__WEBPACK_IMPORTED_MODULE_8__","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","CartComparator","cartA","cartB","_normalize","giftWrapping","InvalidArgumentError","CouponActionCreator","_couponRequestSender","_common_error_errors__WEBPACK_IMPORTED_MODULE_2__","_coupon_actions__WEBPACK_IMPORTED_MODULE_3__","CouponRequestSender","couponCode","_checkout__WEBPACK_IMPORTED_MODULE_0__","GiftCertificateActionCreator","_giftCertificateRequestSender","_gift_certificate_actions__WEBPACK_IMPORTED_MODULE_3__","GiftCertificateRequestSender","giftCertificateCode","mapFromInternalAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","rxjs_Observable__WEBPACK_IMPORTED_MODULE_2__","_shipping_strategy_actions__WEBPACK_IMPORTED_MODULE_3__","mergedOptions","NotImplementedError","CustomerStrategy","AmazonPayCustomerStrategy","_remoteCheckoutRequestSender","not_implemented_error","useAmazonAddressBook","_handleAuthorization","generateToken","Login","popup","tokenPrefix","trackAuthorizationEvent","customer_strategy","BraintreeVisaCheckoutCustomerStrategy","_buttonClassName","signInButton","buttonClass","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","chasePayOptions","JPMC","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","COMPLETE_CHECKOUT","requestId","_reloadPage","sendRequest","fromChasePay","SquareCustomerStrategy","MasterpassCustomerStrategy","masterpassOptions","Masterpass","GooglePayCustomerStrategy","googlePayOptions","DefaultCustomerStrategy","_customerActionCreator","createCustomerStrategyRegistry","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","googlepay_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","ShippingStrategy","AmazonPayShippingStrategy","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","shipping_strategy","DefaultShippingStrategy","createShippingStrategyRegistry","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","omitPrivate","omitDeep","isInternalAddressEqual","ignoredKeys","INTERNAL_USE_ONLY","TimeoutError","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_2__","ConfigRequestSender","MissingDataErrorType","MissingDataError","MissingBillingAddress","MissingOrderConfig","getErrorMessage","_standard_error__WEBPACK_IMPORTED_MODULE_1__","throwErrorAction","isErrorAction","rxjs_observable_of__WEBPACK_IMPORTED_MODULE_2__","rxjs_observable_throw__WEBPACK_IMPORTED_MODULE_3__","NotInitializedErrorType","NotInitializedError","BillingAddressActionCreator","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","_getInstance","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","toFormUrlEncoded","encodeURIComponent","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","parse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","transactionInfo","totalPriceStatus","totalPrice","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","googleMerchantId","googleMerchantName","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","PaypalScriptLoader","isCustomError","IframeEmbeddedCheckoutMessenger","postComplete","postError","_transformError","postFrameError","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parent","noop_embedded_checkout_messenger","iframe_embedded_checkout_messenger","parentOrigin","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","language_service","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","_decimalPlaces","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","abs","decimalAmount","parsedIntegerAmount","decimalPadding","toLowerCase","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","shopperCurrency","_storeFormatter","toCustomerCurrency","exchangeRate","parseFloat","toStoreCurrency","createCurrencyService","currency_service","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","onClick","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_postForm","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","_getCardInformation","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","info","companyName","address3","locality","administrativeArea","phoneNumber","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","getEnvironment","process","NODE_ENV","e","RemoteCheckoutRequestSender","methodName","RemoteCheckoutActionCreator","_remote_checkout_actions__WEBPACK_IMPORTED_MODULE_2__","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","AmazonPayScriptLoader","onPaymentReady","region","_configureWidget","onLoginReady","setClientId","setUseCookie","onAmazonLoginReady","onAmazonPaymentsReady","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","ConsoleLogger","_console","log","messages","_logToConsole","debug","NoopLogger","logger","isEnabled","console_logger","console","noop_logger","createLogger","getDefaultLogger","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","paymentRequest","braintreeVisaCheckout","tokenizedPayload","_toVisaCheckoutAddress","userData","userEmail","_getAddress","extendedAddress","createBraintreeVisaCheckoutPaymentProcessor","braintree_visacheckout_payment_processor"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 174);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs/Observable\");","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<Error> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<Error> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<Error> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","export const LOAD_INSTRUMENTS_REQUESTED = 'LOAD_INSTRUMENTS_REQUESTED';\nexport const LOAD_INSTRUMENTS_SUCCEEDED = 'LOAD_INSTRUMENTS_SUCCEEDED';\nexport const LOAD_INSTRUMENTS_FAILED = 'LOAD_INSTRUMENTS_FAILED';\n\nexport const DELETE_INSTRUMENT_REQUESTED = 'DELETE_INSTRUMENT_REQUESTED';\nexport const DELETE_INSTRUMENT_SUCCEEDED = 'DELETE_INSTRUMENT_SUCCEEDED';\nexport const DELETE_INSTRUMENT_FAILED = 'DELETE_INSTRUMENT_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","module.exports = require(\"rxjs/operators\");","module.exports = require(\"rxjs/observable/concat\");","module.exports = require(\"rxjs/observable/of\");","export enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n\nexport interface EmbeddedCheckoutError {\n    message: string;\n    type?: string;\n    subtype?: string;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryRequestSender from './country-request-sender';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(actionTypes.LOAD_COUNTRIES_REQUESTED));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(actionTypes.LOAD_COUNTRIES_SUCCEEDED, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_COUNTRIES_FAILED, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.type = 'order_finalization_not_required';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\n\nimport Payment from './payment';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction, InternalCheckoutSelectors> {\n        return store => new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n            const state = store.getState();\n            const { payment = {} as Payment, useStoreCredit } = payload;\n            const meta = { methodId: payment.methodId };\n\n            let strategy: PaymentStrategy;\n\n            if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                strategy = this._strategyRegistry.getByMethod(method);\n            } else {\n                strategy = this._strategyRegistry.get('nopaymentdatarequired');\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n            strategy\n                .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                });\n        });\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                if (!payment) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                const method = state.paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n\n                if (!method) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: payment.providerId }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.grandTotal === response.body.grandTotal\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport interface SquarePaymentFormConstructor {\n    new(options: SquareFormOptions): SquarePaymentForm;\n}\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { pick } from 'lodash';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { InvalidArgumentError, StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder, OrderActionCreator } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\nimport PaymentRequestSender from './payment-request-sender';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._getPaymentRequestBody(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(payment: Payment): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store =>\n            Observable.create((observer: Observer<InitializeOffsitePaymentAction>) => {\n                observer.next(createAction(PaymentActionType.InitializeOffsitePaymentRequested));\n\n                return this._paymentRequestSender.initializeOffsitePayment(\n                    this._getPaymentRequestBody(payment, store.getState())\n                )\n                    .then(() => {\n                        observer.next(createAction(PaymentActionType.InitializeOffsitePaymentSucceeded));\n                        observer.complete();\n                    })\n                    .catch(() => {\n                        observer.error(createErrorAction(PaymentActionType.InitializeOffsitePaymentFailed));\n                    });\n            });\n    }\n\n    private _getPaymentRequestBody(payment: Payment, state: InternalCheckoutSelectors): PaymentRequestBody {\n        if (!payment.paymentData) {\n            throw new InvalidArgumentError('Unable to construct payment request because `payment.paymentData` is not provided.');\n        }\n\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const checkout = state.checkout.getCheckout();\n        const customer = state.customer.getCustomer();\n        const order = state.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(payment, state.paymentMethods);\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const consignments = state.consignments.getConsignments();\n        const shippingOption = state.consignments.getShippingOption();\n        const storeConfig = state.config.getStoreConfig();\n        const contextConfig = state.config.getContextConfig();\n        const instrumentMeta = state.instruments.getInstrumentsMeta();\n        const paymentMeta = state.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = state.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && isVaultedInstrument(payment.paymentData) ?\n            `${state.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            state.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(payment: Payment, paymentMethodSelector: PaymentMethodSelector): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): string {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactory(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return 'offline';\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return 'legacy';\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return 'offsite';\n        }\n\n        return 'creditcard';\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderRequestBody } from '../../order';\nimport { OrderFinalizationNotRequiredError } from '../../order/errors';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../payment-request-options';\n\nexport default abstract class PaymentStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy extends PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName))\n            .then(afterpaySdk => {\n                this._afterpaySdk = afterpaySdk;\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        const useStoreCredit = !!payload.useStoreCredit;\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentId, { useStoreCredit })\n        )\n            .then(state => this._checkoutValidator.validate(state.checkout.getCheckout(), options))\n            .then(() => this._store.dispatch(\n                this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n            ))\n            .then(state => this._displayModal(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId)))\n            // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n            .then(() => new Promise<never>(() => {}));\n    }\n\n    finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._remoteCheckoutActionCreator.loadSettings(options.methodId))\n            .then(state => {\n                const payment = state.payment.getPaymentId();\n                const config = state.config.getContextConfig();\n                const afterpay = state.remoteCheckout.getCheckout('afterpay');\n\n                if (!payment) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config || !config.payment.token) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!afterpay || !afterpay.settings) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const orderPayload = {\n                    useStoreCredit: afterpay.settings.useStoreCredit,\n                };\n\n                const paymentPayload = {\n                    methodId: payment.providerId,\n                    paymentData: { nonce: config.payment.token },\n                };\n\n                return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload)));\n            });\n    }\n\n    private _displayModal(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.display({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { noop } from 'lodash';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, mapToInternalAddress } from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, RequestError, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWidgetError from './amazon-pay-widget-error';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._walletOptions = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n\n        if (!referenceId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the Amazon Pay payment\n * method.\n *\n * When AmazonPay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface AmazonPayPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the payment options.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the customer selects one of the payment\n     * options provided by the widget.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onPaymentSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class CreditCardPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor() {\n        super('Payment process was cancelled.');\n\n        this.type = 'payment_cancelled';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaLoadResponse } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy extends PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    () => this._isInitialized && this._loadWidget(options),\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.grandTotal;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n\n                    if (!response.show_form) {\n                        reject(new PaymentMethodInvalidError());\n                    } else {\n                        resolve(response);\n                    }\n                });\n            }));\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            this._klarnaCredit.authorize({}, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n\n/**\n * A set of options that are required to initialize the Klarna payment method.\n *\n * When Klarna is initialized, a widget will be inserted into the DOM. The\n * widget has a list of payment options for the customer to choose from.\n */\nexport interface KlarnaPaymentInitializeOptions {\n    /**\n     * The ID of a container which the payment widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param response - The result of the initialization. It indicates whether\n     * or not the widget is loaded successfully.\n     */\n    onLoad?(response: KlarnaLoadResponse): void;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class LegacyPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OfflinePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class OffsitePaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\n\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy extends PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!this._isInContextEnabled() || this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        window.location.assign(redirectUrl);\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { RequestError } from '../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentArgumentInvalidError } from '../errors';\nimport PaymentActionCreator from '../payment-action-creator';\nimport { PaymentRequestOptions } from '../payment-request-options';\nimport * as paymentStatusTypes from '../payment-status-types';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class SagePayPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {\n        super(store);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return super.finalize();\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\n\nimport { PaymentStrategy } from '../';\nimport {\n    NonceInstrument,\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator\n} from '../../';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { SquarePaymentForm, SquareScriptLoader } from '.';\nimport {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\n\nexport default class SquarePaymentStrategy extends PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(errors?: NonceGenerationError[], nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): void {\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(this._paymentMethod.id, nonce, cardData, billingContact, shippingContact)\n                .then(() => this._squareOptions && this._squareOptions.onPaymentSelect && this._squareOptions.onPaymentSelect())\n                .catch(error => this._squareOptions && this._squareOptions.onError && this._squareOptions.onError(error));\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (errors && this._squareOptions && this._squareOptions.onError) {\n            this._squareOptions.onError(errors);\n            this._deferredRequestNonce.reject(errors);\n        } else if (nonce) {\n            this._deferredRequestNonce.resolve({ nonce });\n        }\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            }),\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../order';\nimport { PaymentRequestOptions } from '../payment-request-options';\n\nimport PaymentStrategy from './payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy extends PaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {\n        super(store);\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n}\n","import { Payment, PaymentMethodActionCreator } from '../..';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy extends PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return super.initialize(options);\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const checkout = state.checkout.getCheckout();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, checkout.grandTotal) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccType === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreePaypalPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return super.initialize(options);\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => super.initialize(options))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const config = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(checkout.grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","import {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethod,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions,\n    PaymentStrategyActionCreator,\n} from '../..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '.';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy extends PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n\n/**\n * A set of options that are required to initialize the Visa Checkout payment\n * method provided by Braintree.\n *\n * If the customer chooses to pay with Visa Checkout, they will be asked to\n * enter their payment details via a modal. You can hook into events emitted by\n * the modal by providing the callbacks listed below.\n */\nexport interface BraintreeVisaCheckoutPaymentInitializeOptions {\n    /**\n     * A callback that gets called when Visa Checkout fails to initialize or\n     * selects a payment option.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: Error): void;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy extends PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => paypal.tokenize({\n                amount,\n                currency,\n                enableShippingAddress: true,\n                flow: 'checkout',\n                locale: storeLanguage,\n                offerCredit,\n                useraction: 'commit',\n            }));\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy extends PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store);\n\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$.take(1)\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            }),\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { PaymentStrategy } from '../';\nimport {\n    PaymentActionCreator,\n    PaymentInitializeOptions,\n    PaymentMethodActionCreator,\n    PaymentRequestOptions\n} from '../../';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentMethod from '../../payment-method';\n\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy extends PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const gateway = this._paymentMethod.initializationData.gateway;\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        if (!gateway) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.gateway\" argument is not provided.');\n        }\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(gateway)))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ methodId: gateway, paymentData })));\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: true,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport {\n    AfterpayPaymentStrategy,\n    AmazonPayPaymentStrategy,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeVisaCheckoutPaymentStrategy,\n    CreditCardPaymentStrategy,\n    GooglePayPaymentStrategy,\n    KlarnaPaymentStrategy,\n    LegacyPaymentStrategy,\n    NoPaymentDataRequiredPaymentStrategy,\n    OfflinePaymentStrategy,\n    OffsitePaymentStrategy,\n    PaypalExpressPaymentStrategy,\n    PaypalProPaymentStrategy,\n    SagePayPaymentStrategy,\n    SquarePaymentStrategy,\n    WepayPaymentStrategy,\n} from './strategies';\nimport { AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from './strategies/googlepay';\nimport { KlarnaScriptLoader } from './strategies/klarna';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { PaypalScriptLoader } from './strategies/paypal';\nimport { SquareScriptLoader } from './strategies/square';\nimport { WepayRiskClient } from './strategies/wepay';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: 'creditcard' });\n    const scriptLoader = getScriptLoader();\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const orderActionCreator = new OrderActionCreator(\n        new OrderRequestSender(requestSender),\n        checkoutValidator\n    );\n    const paymentActionCreator = new PaymentActionCreator(\n        new PaymentRequestSender(paymentClient),\n        orderActionCreator\n    );\n\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(\n        new RemoteCheckoutRequestSender(requestSender)\n    );\n    const configRequestSender = new ConfigRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(configRequestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n\n    registry.register('afterpay', () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('amazon', () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('creditcard', () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('klarna', () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('legacy', () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offline', () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('offsite', () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypal', () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register('paypalexpress', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('paypalexpresscredit', () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('sagepay', () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            createFormPoster()\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('nopaymentdatarequired', () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register('braintree', () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypal', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register('braintreepaypalcredit', () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register('wepay', () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator);\n}\n","import { createAction, createErrorAction, Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport * as actionTypes from './instrument-action-types';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_REQUESTED));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(actionTypes.LOAD_INSTRUMENTS_SUCCEEDED, body, currentToken));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.LOAD_INSTRUMENTS_FAILED, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<Action, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_REQUESTED, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({ ...session, authToken: currentToken.vaultAccessToken }, instrumentId)\n                        .then(() => {\n                            observer.next(createAction(actionTypes.DELETE_INSTRUMENT_SUCCEEDED, undefined, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(actionTypes.DELETE_INSTRUMENT_FAILED, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token)\n            ? Promise.resolve(token)\n            : this._instrumentRequestSender.getVaultAccessToken()\n                .then(({ body = {} }: any) => ({\n                    vaultAccessToken: body.data.token,\n                    vaultAccessExpiry: body.data.expires_at,\n                }));\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n\n        return {\n            customerId,\n            storeId,\n        };\n    }\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport Instrument from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    RawInstrumentResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(response: Response<RawInstrumentsResponseBody>): Response<InstrumentsResponseBody> {\n        const payload = this._transformResponse(response);\n        const { vaulted_instruments } = payload.body;\n\n        payload.body = {\n            vaultedInstruments: this._transformVaultedInstruments(vaulted_instruments),\n        };\n\n        return payload;\n    }\n\n    transformErrorResponse(response: Response<RawInstrumentErrorResponseBody>): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: RawInstrumentResponseBody[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse({ data: body, status, statusText }: any): Response {\n        return {\n            headers: {},\n            body,\n            status,\n            statusText,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\n\nimport { InstrumentRequestContext } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    RawInstrumentsResponseBody,\n    RawInstrumentErrorResponseBody,\n    VaultAccessTokenResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken({ timeout }: RequestOptions = {}): Promise<Response<VaultAccessTokenResponseBody>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    loadInstruments(requestContext: InstrumentRequestContext, shippingAddress?: Address): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(requestContext: InstrumentRequestContext, instrumentId: string): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstruments(requestContext: InstrumentRequestContext): Promise<Response<InstrumentsResponseBody | InstrumentErrorResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(requestContext, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n\n    private _loadInstrumentsWithAddress(requestContext: InstrumentRequestContext, shippingAddress: Address): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(payload, (error: Response<RawInstrumentErrorResponseBody>, response: Response<RawInstrumentsResponseBody>) => {\n                if (error) {\n                    reject(this._transformer.transformErrorResponse(error));\n                } else {\n                    resolve(this._transformer.transformResponse(response));\n                }\n            });\n        });\n    }\n}\n","import { Address } from '../address';\nimport { BillingAddressSelector } from '../billing';\nimport { Cart, CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, CouponSelector, GiftCertificate, GiftCertificateSelector } from '../coupon';\nimport { Customer, CustomerSelector } from '../customer';\nimport { FormField, FormSelector } from '../form';\nimport { Country, CountrySelector } from '../geography';\nimport { Order, OrderSelector } from '../order';\nimport { PaymentMethod, PaymentMethodSelector, PaymentSelector } from '../payment';\nimport { Instrument, InstrumentSelector } from '../payment/instrument';\nimport {\n    Consignment,\n    ConsignmentSelector,\n    ShippingAddressSelector,\n    ShippingCountrySelector,\n    ShippingOption,\n} from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\n@selector\nexport default class CheckoutStoreSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customer: CustomerSelector;\n    private _form: FormSelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _payment: PaymentSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _shippingAddress: ShippingAddressSelector;\n    private _shippingCountries: ShippingCountrySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customer = selectors.customer;\n        this._form = selectors.form;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._payment = selectors.payment;\n        this._paymentMethods = selectors.paymentMethods;\n        this._shippingAddress = selectors.shippingAddress;\n        this._shippingCountries = selectors.shippingCountries;\n    }\n\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined {\n        return this._checkout.getCheckout();\n    }\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined {\n        return this._order.getOrder();\n    }\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined {\n        return this._config.getStoreConfig();\n    }\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined {\n        const shippingAddress = this._shippingAddress.getShippingAddress();\n        const context = this._config.getContextConfig();\n\n        if (!shippingAddress) {\n            if (!context || !context.geoCountryCode) {\n                return;\n            }\n\n            return {\n                firstName: '',\n                lastName: '',\n                company: '',\n                address1: '',\n                address2: '',\n                city: '',\n                stateOrProvince: '',\n                stateOrProvinceCode: '',\n                postalCode: '',\n                country: '',\n                phone: '',\n                customFields: [],\n                countryCode: context.geoCountryCode,\n            };\n        }\n\n        return shippingAddress;\n    }\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (consignments && consignments.length) {\n            return consignments[0].availableShippingOptions;\n        }\n\n        return;\n    }\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.getConsignments();\n    }\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.getConsignments();\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return consignments[0].selectedShippingOption;\n    }\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.getShippingCountries();\n    }\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): Address | undefined {\n        return this._billingAddress.getBillingAddress();\n    }\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined {\n        return this._countries.getCountries();\n    }\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.getPaymentMethods();\n    }\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return this._paymentMethods.getPaymentMethod(methodId, gatewayId);\n    }\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined {\n        const payment = this._payment.getPaymentId();\n\n        return payment && this._paymentMethods.getPaymentMethod(payment.providerId, payment.gatewayId);\n    }\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined {\n        return this._cart.getCart();\n    }\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined {\n        return this._coupons.getCoupons();\n    }\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificates.getGiftCertificates();\n    }\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined {\n        return this._customer.getCustomer();\n    }\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean {\n        return this._payment.isPaymentDataRequired(useStoreCredit);\n    }\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean {\n        return this._payment.isPaymentDataSubmitted(this.getPaymentMethod(methodId, gatewayId));\n    }\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.getInstruments();\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[] {\n        return this._form.getBillingAddressFields(this.getBillingCountries(), countryCode);\n    }\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[] {\n        return this._form.getShippingAddressFields(this.getShippingCountries(), countryCode);\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\n@selector\nexport default class CheckoutStoreErrorSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Gets the error of any checkout action that has failed.\n     *\n     * @returns The error object if unable to perform any checkout action,\n     * otherwise undefined.\n     */\n    getError(): Error | undefined {\n        return this.getLoadCheckoutError() ||\n            this.getSubmitOrderError() ||\n            this.getFinalizeOrderError() ||\n            this.getLoadOrderError() ||\n            this.getLoadCartError() ||\n            this.getLoadBillingCountriesError() ||\n            this.getLoadShippingCountriesError() ||\n            this.getLoadPaymentMethodsError() ||\n            this.getLoadPaymentMethodError() ||\n            this.getInitializePaymentError() ||\n            this.getLoadShippingOptionsError() ||\n            this.getSelectShippingOptionError() ||\n            this.getSignInError() ||\n            this.getSignOutError() ||\n            this.getInitializeCustomerError() ||\n            this.getUpdateShippingAddressError() ||\n            this.getUpdateBillingAddressError() ||\n            this.getContinueAsGuestError() ||\n            this.getUpdateConsignmentError() ||\n            this.getCreateConsignmentsError() ||\n            this.getDeleteConsignmentError() ||\n            this.getInitializeShippingError() ||\n            this.getApplyCouponError() ||\n            this.getRemoveCouponError() ||\n            this.getApplyGiftCertificateError() ||\n            this.getRemoveGiftCertificateError() ||\n            this.getLoadInstrumentsError() ||\n            this.getDeleteInstrumentError() ||\n            this.getLoadConfigError();\n    }\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined {\n        return this._checkout.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined {\n        return this._checkout.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined {\n        return this._paymentStrategies.getExecuteError();\n    }\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined {\n        return this._paymentStrategies.getFinalizeError();\n    }\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined {\n        return this._order.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined {\n        return this._cart.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined {\n        return this._countries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined {\n        return this._shippingCountries.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined {\n        return this._paymentMethods.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined {\n        return this._paymentMethods.getLoadMethodError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined {\n        return this._paymentStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined {\n        return this._customerStrategies.getSignInError();\n    }\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined {\n        return this._customerStrategies.getSignOutError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined {\n        return this._customerStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.getLoadShippingOptionsError();\n    }\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined {\n        return this._shippingStrategies.getSelectOptionError() ||\n            this._consignments.getUpdateShippingOptionError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.getContinueAsGuestError();\n    }\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined {\n        return this._billingAddress.getUpdateError();\n    }\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined {\n        return this._shippingStrategies.getUpdateAddressError();\n    }\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getDeleteError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined {\n        return this._consignments.getUpdateError(consignmentId);\n    }\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined {\n        return this._consignments.getCreateError();\n    }\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined {\n        return this._shippingStrategies.getInitializeError(methodId);\n    }\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): Error | undefined {\n        return this._coupons.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): Error | undefined {\n        return this._coupons.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getApplyError();\n    }\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): Error | undefined {\n        return this._giftCertificates.getRemoveError();\n    }\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined {\n        return this._instruments.getLoadError();\n    }\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined {\n        return this._instruments.getDeleteError(instrumentId);\n    }\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined {\n        return this._config.getLoadError();\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerStrategySelector } from '../customer';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { ConsignmentSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\n@selector\nexport default class CheckoutStoreStatusSelector {\n    private _billingAddress: BillingAddressSelector;\n    private _cart: CartSelector;\n    private _checkout: CheckoutSelector;\n    private _config: ConfigSelector;\n    private _consignments: ConsignmentSelector;\n    private _countries: CountrySelector;\n    private _coupons: CouponSelector;\n    private _customerStrategies: CustomerStrategySelector;\n    private _giftCertificates: GiftCertificateSelector;\n    private _instruments: InstrumentSelector;\n    private _order: OrderSelector;\n    private _paymentMethods: PaymentMethodSelector;\n    private _paymentStrategies: PaymentStrategySelector;\n    private _shippingCountries: ShippingCountrySelector;\n    private _shippingStrategies: ShippingStrategySelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._billingAddress = selectors.billingAddress;\n        this._cart = selectors.cart;\n        this._checkout = selectors.checkout;\n        this._config = selectors.config;\n        this._consignments = selectors.consignments;\n        this._countries = selectors.countries;\n        this._coupons = selectors.coupons;\n        this._customerStrategies = selectors.customerStrategies;\n        this._giftCertificates = selectors.giftCertificates;\n        this._instruments = selectors.instruments;\n        this._order = selectors.order;\n        this._paymentMethods = selectors.paymentMethods;\n        this._paymentStrategies = selectors.paymentStrategies;\n        this._shippingCountries = selectors.shippingCountries;\n        this._shippingStrategies = selectors.shippingStrategies;\n    }\n\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean {\n        return this.isLoadingCheckout() ||\n            this.isSubmittingOrder() ||\n            this.isFinalizingOrder() ||\n            this.isLoadingOrder() ||\n            this.isLoadingCart() ||\n            this.isLoadingBillingCountries() ||\n            this.isLoadingShippingCountries() ||\n            this.isLoadingPaymentMethods() ||\n            this.isLoadingPaymentMethod() ||\n            this.isInitializingPayment() ||\n            this.isLoadingShippingOptions() ||\n            this.isSelectingShippingOption() ||\n            this.isSigningIn() ||\n            this.isSigningOut() ||\n            this.isInitializingCustomer() ||\n            this.isUpdatingBillingAddress() ||\n            this.isContinuingAsGuest() ||\n            this.isUpdatingShippingAddress() ||\n            this.isUpdatingConsignment() ||\n            this.isCreatingConsignments() ||\n            this.isDeletingConsignment() ||\n            this.isInitializingShipping() ||\n            this.isApplyingCoupon() ||\n            this.isRemovingCoupon() ||\n            this.isApplyingGiftCertificate() ||\n            this.isRemovingGiftCertificate() ||\n            this.isLoadingInstruments() ||\n            this.isDeletingInstrument() ||\n            this.isLoadingConfig() ||\n            this.isCustomerStepPending() ||\n            this.isPaymentStepPending();\n    }\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean {\n        return this._checkout.isLoading();\n    }\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean {\n        return this._checkout.isUpdating();\n    }\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean {\n        return this._paymentStrategies.isExecuting();\n    }\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean {\n        return this._paymentStrategies.isFinalizing();\n    }\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean {\n        return this._order.isLoading();\n    }\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean {\n        return this._cart.isLoading();\n    }\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean {\n        return this._countries.isLoading();\n    }\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean {\n        return this._shippingCountries.isLoading();\n    }\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean {\n        return this._paymentMethods.isLoading();\n    }\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean {\n        return this._paymentMethods.isLoadingMethod(methodId);\n    }\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean {\n        return this._paymentStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean {\n        return this._customerStrategies.isSigningIn(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean {\n        return this._customerStrategies.isSigningOut(methodId);\n    }\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean {\n        return this._customerStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.isLoadingShippingOptions();\n    }\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean {\n        return this._shippingStrategies.isSelectingOption() ||\n            this._consignments.isUpdatingShippingOption(consignmentId);\n    }\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean {\n        return this._billingAddress.isUpdating();\n    }\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean {\n        return this._billingAddress.isContinuingAsGuest();\n    }\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean {\n        return this._shippingStrategies.isUpdatingAddress();\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isUpdating(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean {\n        return this._consignments.isDeleting(consignmentId);\n    }\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean {\n        return this._consignments.isCreating();\n    }\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string) {\n        return this._shippingStrategies.isInitializing(methodId);\n    }\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean {\n        return this._coupons.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean {\n        return this._coupons.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean {\n        return this._giftCertificates.isApplying();\n    }\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean {\n        return this._giftCertificates.isRemoving();\n    }\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean {\n        return this._instruments.isLoading();\n    }\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean {\n        return this._instruments.isDeleting(instrumentId);\n    }\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean {\n        return this._config.isLoading();\n    }\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean {\n        return this._customerStrategies.isInitializing() ||\n            this._customerStrategies.isSigningIn() ||\n            this._customerStrategies.isSigningOut() ||\n            this._customerStrategies.isWidgetInteracting();\n    }\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean {\n        return this._paymentStrategies.isInitializing() ||\n            this._paymentStrategies.isExecuting() ||\n            this._paymentStrategies.isFinalizing() ||\n            this._paymentStrategies.isWidgetInteracting();\n    }\n}\n","import {\n    CheckoutSelectors,\n    CheckoutStoreErrorSelector,\n    CheckoutStoreSelector,\n    CheckoutStoreStatusSelector,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    const data = new CheckoutStoreSelector(selectors);\n    const errors = new CheckoutStoreErrorSelector(selectors);\n    const statuses = new CheckoutStoreStatusSelector(selectors);\n\n    return {\n        data,\n        errors,\n        statuses,\n    };\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport createCheckoutSelectors from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\nexport default class CheckoutService {\n    private _state: CheckoutSelectors;\n    private _errorTransformer: ErrorMessageTransformer;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator\n    ) {\n        this._state = createCheckoutSelectors(this._store.getState());\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._state;\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._store.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutSelectors(state)))\n        );\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     methodId: 'braintree',\n     *     payment: {\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccType: 'visa',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: BillingAddressRequestBody, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const orderActionCreator = new OrderActionCreator(orderRequestSender, new CheckoutValidator(checkoutRequestSender));\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","export const LOAD_COUNTRIES_REQUESTED = 'LOAD_COUNTRIES_REQUESTED';\nexport const LOAD_COUNTRIES_SUCCEEDED = 'LOAD_COUNTRIES_SUCCEEDED';\nexport const LOAD_COUNTRIES_FAILED = 'LOAD_COUNTRIES_FAILED';\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"rxjs/observable/defer\");","import { InvalidArgumentError } from '../common/error/errors';\n\nexport default function parseOrigin(url: string): string {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return `${anchor.protocol}//${anchor.hostname}` + (anchor.port ? `:${anchor.port}` : '');\n}\n","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/request-sender\");","module.exports = require(\"@bigcommerce/script-loader\");","module.exports = require(\"rxjs/observable/from\");","export default interface PaymentStrategyState {\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","const DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default DEFAULT_INCLUDES;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export default class CacheKeyResolver {\n    private _lastId = 0;\n    private _maps: CacheKeyMap[] = [];\n\n    getKey(...args: any[]): string {\n        const { index, map, parentMaps } = this._resolveMap(...args);\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n\n            return map.cacheKey;\n        }\n\n        return this._generateKey(parentMaps, args.slice(index));\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMaps = this._maps;\n\n        while (parentMaps.length) {\n            let isMatched = false;\n\n            for (const map of parentMaps) {\n                if (map.value !== args[index]) {\n                    continue;\n                }\n\n                if ((args.length === 0 || index === args.length - 1) && map.cacheKey) {\n                    return { index, map, parentMaps };\n                }\n\n                isMatched = true;\n                parentMaps = map.maps;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMaps };\n    }\n\n    private _generateKey(maps: CacheKeyMap[], args: any[]): string {\n        let index = 0;\n        let parentMaps = maps;\n        let map!: CacheKeyMap;\n\n        do {\n            map = {\n                usedCount: 1,\n                value: args[index],\n                maps: [],\n            };\n\n            parentMaps.push(map);\n\n            parentMaps = map.maps;\n            index++;\n        } while (index < args.length);\n\n        map.cacheKey = `${++this._lastId}`;\n\n        return map.cacheKey;\n    }\n}\n\ninterface CacheKeyMap {\n    maps: CacheKeyMap[];\n    value: any;\n    usedCount: number;\n    cacheKey?: string;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMaps: CacheKeyMap[];\n    map?: CacheKeyMap;\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.initialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n\n        return this._store.dispatch(action, { queueId: `${options.methodId}ButtonStrategy` })\n            .then(() => this.getState());\n    }\n}\n","export enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { empty } from 'rxjs/observable/empty';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction> {\n        return store => {\n            const meta = { methodId: options.methodId };\n            const { paymentMethods } = store.getState();\n            const paymentMethod = paymentMethods.getPaymentMethod(options.methodId);\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                paymentMethod ?\n                    empty() :\n                    this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, options),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): Observable<DeinitializeButtonAction> {\n        const meta = { methodId: options.methodId };\n\n        return concat(\n            of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n            defer(() => this._registry.get(options.methodId).deinitialize()\n                .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n        );\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nexport default abstract class CheckoutButtonStrategy {\n    protected _isInitialized: { [key: string]: boolean } = {};\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        this._isInitialized[options.containerId] = true;\n\n        return Promise.resolve();\n    }\n\n    deinitialize(): Promise<void> {\n        this._isInitialized = {};\n\n        return Promise.resolve();\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.grandTotal,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { CheckoutButtonInitializeOptions } from '../';\nimport { CheckoutActionCreator, CheckoutStore } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport { Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../payment/strategies/masterpass';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy extends CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n\n                return super.initialize(options);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.querySelector(`#${containerId}`);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: true,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy extends CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        if (this._isInitialized[containerId]) {\n            return super.initialize(options);\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId())\n                .then(() => {\n                    this._walletButton = this._createSignInButton(containerId);\n                })\n            ).then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!this._isInitialized) {\n            return super.deinitialize();\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize());\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n                .then(() => this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress)))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutStore } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod } from '../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken } from '../../payment/strategies/paypal';\nimport { PaypalScriptLoader } from '../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../checkout-button-options';\n\nimport CheckoutButtonStrategy from './checkout-button-strategy';\n\nexport default class PaypalButtonStrategy extends CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster\n    ) {\n        super();\n    }\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        if (this._isInitialized[options.containerId]) {\n            return super.initialize(options);\n        }\n\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(): Promise<void> {\n        if (!Object.keys(this._isInitialized).length) {\n            return super.deinitialize();\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return actions.request.post('/api/storefront/paypal-payment/', { merchantId })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host: options && options.host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\n\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport {\n    BraintreePaypalButtonStrategy,\n    CheckoutButtonMethodType,\n    CheckoutButtonStrategy,\n    GooglePayButtonStrategy,\n    MasterpassButtonStrategy,\n    PaypalButtonStrategy\n} from './strategies';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    return registry;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n    statusText: '',\n};\n\nexport default class RequestError extends StandardError {\n    body: any;\n    headers: { [key: string]: any; };\n    status: number;\n    statusText: string;\n\n    constructor({ body = {}, headers, status, statusText }: Response = DEFAULT_RESPONSE, message?: string) {\n        super(joinErrors(body.errors) || body.detail || body.title || message || 'An unexpected error has occurred.');\n\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.statusText = statusText;\n    }\n}\n\nfunction joinErrors(errors: Array<string | { code: string, message: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (typeof error === 'string') {\n            return [...result, error];\n        }\n\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { find, some, values } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonState from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonSelector {\n    constructor(\n        private _checkoutButton: CheckoutButtonState\n    ) {}\n\n    getState(): CheckoutButtonState {\n        return this._checkoutButton;\n    }\n\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isInitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isInitializing: true });\n    }\n\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean {\n        if (methodId) {\n            const method = this._checkoutButton.statuses[methodId];\n\n            return (method && method.isDeinitializing) === true;\n        }\n\n        return some(this._checkoutButton.statuses, { isDeinitializing: true });\n    }\n\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.initializeError));\n\n        return method && method.initializeError;\n    }\n\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        const method = methodId ?\n            this._checkoutButton.errors[methodId] :\n            find(values(this._checkoutButton.errors), method => !!(method && method.deinitializeError));\n\n        return method && method.deinitializeError;\n    }\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from } from 'rxjs/observable/from';\nimport { catchError } from 'rxjs/operators';\nimport { Observable, Subscribable } from 'rxjs/Observable';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            throw { ...action, payload: requestErrorFactory.createError(action.payload) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { selector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState from './checkout-state';\n\n@selector\nexport default class CheckoutSelector {\n    constructor(\n        private _checkout: CheckoutState,\n        private _billingAddress: BillingAddressSelector,\n        private _cart: CartSelector,\n        private _consignments: ConsignmentSelector,\n        private _coupons: CouponSelector,\n        private _customer: CustomerSelector,\n        private _giftCertificates: GiftCertificateSelector\n    ) {}\n\n    getCheckout(): Checkout | undefined {\n        const { data } = this._checkout;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const cart = this._cart.getCart();\n        const customer = this._customer.getCustomer();\n        const consignments = this._consignments.getConsignments() || [];\n        const coupons = this._coupons.getCoupons() || [];\n        const giftCertificates = this._giftCertificates.getGiftCertificates() || [];\n\n        if (!data || !cart || !customer) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            cart,\n            customer,\n            consignments,\n            coupons,\n            giftCertificates,\n        };\n    }\n\n    getLoadError(): Error | undefined {\n        return this._checkout.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return this._checkout.statuses.isLoading === true;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._checkout.errors.updateError;\n    }\n\n    isUpdating(): boolean {\n        return this._checkout.statuses.isUpdating === true;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState } from './checkout-state';\n\nconst DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction | GiftCertificateAction | OrderAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'cart', 'consignments', 'customer', 'coupons', 'giftCertifcates'])\n            : data;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload && data\n            ? { ...data, orderId: action.payload.order.orderId }\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...errors,\n            loadError: undefined,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return {\n            ...errors,\n            loadError: action.payload,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...errors,\n            updateError: undefined,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return {\n            ...errors,\n            updateError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return {\n            ...statuses,\n            isLoading: true,\n        };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return {\n            ...statuses,\n            isLoading: false,\n        };\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return {\n            ...statuses,\n            isUpdating: true,\n        };\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return {\n            ...statuses,\n            isUpdating: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonErrorsState, CheckoutButtonStatusesState } from './checkout-button-state';\n\nconst DEFAULT_STATE: CheckoutButtonState = {\n    errors: {},\n    statuses: {},\n};\n\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n        };\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n        };\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","import InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\nimport { AmountTransformer } from '.';\n\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import { selector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState from './billing-address-state';\n\n@selector\nexport default class BillingAddressSelector {\n    constructor(\n        private _billingAddress: BillingAddressState\n    ) {}\n\n    getBillingAddress(): BillingAddress | undefined {\n        return this._billingAddress.data;\n    }\n\n    getUpdateError(): Error | undefined {\n        return this._billingAddress.errors.updateError;\n    }\n\n    getContinueAsGuestError(): Error | undefined {\n        return this._billingAddress.errors.continueAsGuestError;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._billingAddress.errors.loadError;\n    }\n\n    isUpdating(): boolean {\n        return !!this._billingAddress.statuses.isUpdating;\n    }\n\n    isContinuingAsGuest(): boolean {\n        return !!this._billingAddress.statuses.isContinuingAsGuest;\n    }\n\n    isLoading(): boolean {\n        return !!this._billingAddress.statuses.isLoading;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState from './config-state';\n\n@selector\nexport default class ConfigSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getConfig(): Config | undefined {\n        return this._config.data;\n    }\n\n    getStoreConfig(): StoreConfig | undefined {\n        return this._config.data && this._config.data.storeConfig;\n    }\n\n    getContextConfig(): ContextConfig | undefined {\n        return this._config.data && this._config.data.context;\n    }\n\n    getExternalSource(): string | undefined {\n        return this._config.meta && this._config.meta.externalSource;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._config.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._config.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\n@selector\nexport default class FormSelector {\n    constructor(\n        private _config: ConfigState\n    ) {}\n\n    getShippingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.shippingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    getBillingAddressFields(countries: Country[] = [], countryCode: string): FormField[] {\n        const selectedCountry = find(countries, { code: countryCode });\n        const fields = this._config.data ? this._config.data.storeConfig.formFields.billingAddressFields : [];\n\n        return fields.map((field: any) => this._processField(field, countries, selectedCountry));\n    }\n\n    private _processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return this._processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return this._processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return this._processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    private _processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    private _processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState from './country-state';\n\n@selector\nexport default class CountrySelector {\n    constructor(\n        private _countries: CountryState\n    ) {}\n\n    getCountries(): Country[] | undefined {\n        return this._countries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._countries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._countries.statuses.isLoading;\n    }\n}\n","import { find } from 'lodash';\n\nimport { CheckoutPayment, CheckoutSelector } from '../checkout';\nimport { selector } from '../common/selector';\nimport { GatewayOrderPayment, InternalOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\n@selector\nexport default class PaymentSelector {\n    constructor(\n        private _checkout: CheckoutSelector,\n        private _order: OrderSelector\n    ) {}\n\n    getPaymentId(): { providerId: string, gatewayId?: string } | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.id) {\n            return {\n                providerId: internalPayment.id,\n                gatewayId: internalPayment.gateway,\n            };\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment && payment.providerId) {\n            return {\n                providerId: payment.providerId,\n                gatewayId: payment.gatewayId,\n            };\n        }\n    }\n\n    getPaymentStatus(): string | undefined {\n        const internalPayment = this._getInternalPayment();\n\n        if (internalPayment && internalPayment.status) {\n            return internalPayment.status.replace('PAYMENT_STATUS_', '');\n        }\n\n        const payment = this._getHostedPayment() || this._getGatewayPayment();\n\n        if (payment) {\n            return payment.detail.step;\n        }\n    }\n\n    getPaymentToken(): string | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.token;\n    }\n\n    getPaymentRedirectUrl(): string | undefined {\n        const payment = this._getInternalPayment();\n\n        return payment && payment.redirectUrl;\n    }\n\n    isPaymentDataRequired(useStoreCredit: boolean = false): boolean {\n        const checkout = this._checkout.getCheckout();\n\n        if (!checkout) {\n            return false;\n        }\n\n        const grandTotal = checkout.grandTotal || 0;\n        const storeCredit = checkout.customer.storeCredit || 0;\n\n        return (useStoreCredit ? grandTotal - storeCredit : grandTotal) > 0;\n    }\n\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean {\n        if (paymentMethod && paymentMethod.nonce) {\n            return true;\n        }\n\n        return this.getPaymentStatus() === ACKNOWLEDGE || this.getPaymentStatus() === FINALIZE;\n    }\n\n    private _getInternalPayment(): InternalOrderPayment | undefined {\n        const meta = this._order.getOrderMeta();\n\n        return meta && meta.payment;\n    }\n\n    private _getGatewayPayment(): GatewayOrderPayment | undefined {\n        const order = this._order.getOrder();\n\n        return find(order && order.payments, ({ providerId }) =>\n            providerId !== 'giftcertificate' && providerId !== 'storecredit'\n        ) as GatewayOrderPayment;\n    }\n\n    private _getHostedPayment(): CheckoutPayment | undefined {\n        const checkout = this._checkout.getCheckout();\n\n        return find(checkout && checkout.payments, ({ providerType }) =>\n            providerType === HOSTED\n        );\n    }\n}\n","import { find } from 'lodash';\n\nimport { selector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState from './payment-method-state';\n\n@selector\nexport default class PaymentMethodSelector {\n    constructor(\n        private _paymentMethods: PaymentMethodState\n    ) {}\n\n    getPaymentMethods(): PaymentMethod[] | undefined {\n        return this._paymentMethods.data;\n    }\n\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined {\n        return this._paymentMethods.meta;\n    }\n\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined {\n        return gatewayId ?\n            find(this._paymentMethods.data, { id: methodId, gateway: gatewayId }) :\n            find(this._paymentMethods.data, { id: methodId });\n    }\n\n    getLoadError(): Error | undefined {\n        return this._paymentMethods.errors && this._paymentMethods.errors.loadError;\n    }\n\n    getLoadMethodError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentMethods.errors.loadMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentMethods.errors.loadMethodError;\n    }\n\n    isLoading(): boolean {\n        return !!this._paymentMethods.statuses.isLoading;\n    }\n\n    isLoadingMethod(methodId?: string): boolean {\n        if (methodId && this._paymentMethods.statuses.loadMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentMethods.statuses.isLoadingMethod;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\n@selector\nexport default class PaymentStrategySelector {\n    constructor(\n        private _paymentStrategies: PaymentStrategyState = DEFAULT_STATE\n    ) {}\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.initializeError;\n    }\n\n    getExecuteError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.executeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.executeError;\n    }\n\n    getFinalizeError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.finalizeMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.finalizeError;\n    }\n\n    getWidgetInteractingError(methodId?: string): Error | undefined {\n        if (methodId && this._paymentStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._paymentStrategies.errors.widgetInteractionError;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isInitializing;\n    }\n\n    isExecuting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.executeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isExecuting;\n    }\n\n    isFinalizing(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.finalizeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isFinalizing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._paymentStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._paymentStrategies.statuses.isWidgetInteracting;\n    }\n}\n","import Instrument from './instrument';\nimport InstrumentState, { InstrumentMeta } from './instrument-state';\n\nexport default class InstrumentSelector {\n    constructor(\n        private _instruments: InstrumentState\n    ) {}\n\n    getInstruments(): Instrument[] | undefined {\n        return this._instruments.data;\n    }\n\n    getInstrumentsMeta(): InstrumentMeta | undefined {\n        return this._instruments.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._instruments.errors && this._instruments.errors.loadError;\n    }\n\n    getDeleteError(instrumentId?: string): Error | undefined {\n        if (!this._instruments.errors || (instrumentId && this._instruments.errors.failedInstrument !== instrumentId)) {\n            return;\n        }\n\n        return this._instruments.errors.deleteError;\n    }\n\n    isLoading(): boolean {\n        return !!(this._instruments.statuses && this._instruments.statuses.isLoading);\n    }\n\n    isDeleting(instrumentId?: string): boolean {\n        if (!this._instruments.statuses || (instrumentId && this._instruments.statuses.deletingInstrument !== instrumentId)) {\n            return false;\n        }\n\n        return !!this._instruments.statuses.isDeleting;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\n@selector\nexport default class RemoteCheckoutSelector {\n    constructor(\n        private _remoteCheckout: RemoteCheckoutState\n    ) {}\n\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined {\n        return this._remoteCheckout.data[methodId];\n    }\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { CheckoutButtonSelector } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { ConfigSelector } from '../config';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector, CustomerStrategySelector } from '../customer';\nimport { FormSelector } from '../form';\nimport { CountrySelector } from '../geography';\nimport { OrderSelector } from '../order';\nimport { PaymentSelector } from '../payment';\nimport { PaymentMethodSelector, PaymentStrategySelector } from '../payment';\nimport { InstrumentSelector } from '../payment/instrument';\nimport { RemoteCheckoutSelector } from '../remote-checkout';\nimport { ConsignmentSelector, ShippingAddressSelector, ShippingCountrySelector, ShippingStrategySelector } from '../shipping';\n\nimport CheckoutSelector from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default function createInternalCheckoutSelectors(state: CheckoutStoreState, options: CheckoutStoreOptions = {}): InternalCheckoutSelectors {\n    const billingAddress = new BillingAddressSelector(state.billingAddress);\n    const cart = new CartSelector(state.cart);\n    const checkoutButton = new CheckoutButtonSelector(state.checkoutButton);\n    const config = new ConfigSelector(state.config);\n    const countries = new CountrySelector(state.countries);\n    const coupons = new CouponSelector(state.coupons);\n    const customer = new CustomerSelector(state.customer);\n    const customerStrategies = new CustomerStrategySelector(state.customerStrategies);\n    const form = new FormSelector(state.config);\n    const giftCertificates = new GiftCertificateSelector(state.giftCertificates);\n    const instruments = new InstrumentSelector(state.instruments);\n    const paymentMethods = new PaymentMethodSelector(state.paymentMethods);\n    const paymentStrategies = new PaymentStrategySelector(state.paymentStrategies);\n    const shippingAddress = new ShippingAddressSelector(state.consignments);\n    const remoteCheckout = new RemoteCheckoutSelector(state.remoteCheckout);\n    const shippingCountries = new ShippingCountrySelector(state.shippingCountries);\n    const shippingStrategies = new ShippingStrategySelector(state.shippingStrategies);\n\n    // Compose selectors\n    const consignments = new ConsignmentSelector(state.consignments, cart);\n    const checkout = new CheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n    const order = new OrderSelector(state.order, billingAddress, coupons);\n    const payment = new PaymentSelector(checkout, order);\n\n    const selectors = {\n        billingAddress,\n        cart,\n        checkout,\n        checkoutButton,\n        config,\n        consignments,\n        countries,\n        coupons,\n        customer,\n        customerStrategies,\n        form,\n        giftCertificates,\n        instruments,\n        order,\n        payment,\n        paymentMethods,\n        paymentStrategies,\n        remoteCheckout,\n        shippingAddress,\n        shippingCountries,\n        shippingStrategies,\n    };\n\n    return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport { AmountTransformer } from '.';\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate } from '../utility';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'There is a problem processing your payment. Please try again later.');\n\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CheckoutDefaultIncludes from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: CheckoutDefaultIncludes.concat(params && params.include || []).join(','),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { merge } from 'rxjs/observable/merge';\nimport { of } from 'rxjs/observable/of';\nimport { catchError } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig()(store),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig()(store),\n            defer(() => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                return this._checkoutRequestSender.loadCheckout(context.checkoutId, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body));\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options)(store);\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","module.exports = require(\"rxjs/observable/empty\");","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseOrigin(sourceOrigin);\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","import parseOrigin from './parse-origin';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = parseOrigin(targetOrigin);\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, message || 'An unexpected error has occurred. The checkout process cannot continue as a result.');\n\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): Error {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (response.body && typeof response.body.type === 'string') {\n            return last(response.body.type.split('/')) || 'default';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        return error && error.code ? error.code : 'default';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => Error;\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState } from './billing-address-state';\n\nconst DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState, CheckoutAction | BillingAddressAction | OrderAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.billingAddress : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...errors, updateError: undefined };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return { ...errors, updateError: action.payload };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...errors, continueAsGuestError: undefined };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return { ...errors, continueAsGuestError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return { ...statuses, isUpdating: true };\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return { ...statuses, isUpdating: false };\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return { ...statuses, isContinuingAsGuest: true };\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return { ...statuses, isContinuingAsGuest: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState } from './config-state';\n\nconst DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: LoadConfigAction\n): ConfigState {\n    const reducer = combineReducers<ConfigState, LoadConfigAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return action.payload ? action.payload : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ConfigActionType.LoadConfigFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\nimport * as actionTypes from './country-action-types';\nimport CountryState, { CountryErrorsState, CountryStatusesState } from './country-state';\n\nconst DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action\n */\nexport default function countryReducer(state: CountryState = DEFAULT_STATE, action: Action): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Country[] | undefined, action: Action): Country[] | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(errors: CountryErrorsState = DEFAULT_STATE.errors, action: Action): CountryErrorsState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: CountryStatusesState = DEFAULT_STATE.statuses, action: Action): CountryStatusesState {\n    switch (action.type) {\n    case actionTypes.LOAD_COUNTRIES_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.LOAD_COUNTRIES_SUCCEEDED:\n    case actionTypes.LOAD_COUNTRIES_FAILED:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { mergeOrPush } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nconst DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return action.payload ?\n            mergeOrPush(data || [], action.payload, {\n                id: action.payload.id,\n                gateway: action.payload.gateway,\n            }) :\n            data;\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.payload ? action.payload : [];\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return action.meta ? { ...meta, ...action.meta } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return {\n            ...errors,\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...errors,\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return { ...statuses, isLoading: true };\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return { ...statuses, isLoading: false };\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return {\n            ...statuses,\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        };\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return {\n            ...statuses,\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { assign, findIndex, isPlainObject, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item: T,\n    predicate: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : predicate);\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        newArray[index] = isPlainObject(item) ? assign({}, array[index], item) : item;\n    }\n\n    return newArray;\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: PaymentStrategyAction\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...errors,\n            executeError: undefined,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return {\n            ...errors,\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...errors,\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return {\n            ...errors,\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return {\n            ...statuses,\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return {\n            ...statuses,\n            isExecuting: false,\n            executeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return {\n            ...statuses,\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return {\n            ...statuses,\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        };\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    return {\n        ...statuses,\n        isWidgetInteracting: true,\n        widgetInteractionMethodId: action.meta.methodId,\n     };\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n     return {\n        ...statuses,\n        isWidgetInteracting: false,\n        widgetInteractionMethodId: undefined,\n     };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport * as actionTypes from './instrument-action-types';\n\nimport Instrument from './instrument';\nimport InstrumentState, { InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nconst DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n\nexport default function instrumentReducer(state: InstrumentState = DEFAULT_STATE, action: Action): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: Instrument[] = DEFAULT_STATE.data, action: Action): Instrument[] {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return action.payload.vaultedInstruments || [];\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return data.filter(instrument =>\n            instrument.bigpayToken !== action.meta.instrumentId\n        );\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(meta: InstrumentMeta | undefined, action: Action): InstrumentMeta | undefined {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return { ...meta, ...action.meta };\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(errors: InstrumentErrorState = DEFAULT_STATE.errors, action: Action): InstrumentErrorState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n        return { ...errors, loadError: undefined };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n        return {\n            ...errors,\n            deleteError: undefined,\n            failedInstrument: undefined,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...errors, loadError: action.payload };\n\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...errors,\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(statuses: InstrumentStatusState = DEFAULT_STATE.statuses, action: Action): InstrumentStatusState {\n    switch (action.type) {\n    case actionTypes.LOAD_INSTRUMENTS_REQUESTED:\n        return { ...statuses, isLoading: true };\n\n    case actionTypes.DELETE_INSTRUMENT_REQUESTED:\n        return {\n            ...statuses,\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        };\n\n    case actionTypes.LOAD_INSTRUMENTS_SUCCEEDED:\n    case actionTypes.LOAD_INSTRUMENTS_FAILED:\n        return { ...statuses, isLoading: false };\n\n    case actionTypes.DELETE_INSTRUMENT_SUCCEEDED:\n    case actionTypes.DELETE_INSTRUMENT_FAILED:\n        return {\n            ...statuses,\n            isDeleting: false,\n            deletingInstrument: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { RemoteCheckoutStateData } from './remote-checkout-state';\n\nconst DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout = DEFAULT_STATE.data,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return action.payload ? { ...data, billing: action.payload.billing } : data;\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return action.payload ? { ...data, shipping: action.payload.shipping } : data;\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return { ...data, settings: action.payload };\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return { ...data, ...action.payload };\n\n    default:\n        return data;\n    }\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport createInternalCheckoutSelectors from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n    });\n}\n","import { IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._iframeCreator.createFrame(this._options.url, this._options.containerId)\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n\n                return this;\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                this._messageListener.trigger({\n                    type: EmbeddedCheckoutEventType.FrameError,\n                    payload: error,\n                });\n\n                this._loadingIndicator.hide();\n\n                throw error;\n            });\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.type = 'not_embeddable';\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError } from './errors';\nimport isIframeEvent from './is-iframe-event';\nimport parseOrigin from './parse-origin';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError('Unable to embed the iframe because the container element could not be found.');\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseOrigin(iframe.src)) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport parseOrigin from './parse-origin';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseOrigin(options.url);\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState from './cart-state';\n\n@selector\nexport default class CartSelector {\n    constructor(\n        private _cart: CartState\n    ) {}\n\n    getCart(): Cart | undefined {\n        return this._cart.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._cart.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._cart.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState from './coupon-state';\n\n@selector\nexport default class CouponSelector {\n    constructor(\n        private _coupon: CouponState\n    ) {}\n\n    getCoupons(): Coupon[] | undefined {\n        return this._coupon.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._coupon.errors.removeCouponError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._coupon.errors.applyCouponError;\n    }\n\n    isApplying(): boolean {\n        return !!this._coupon.statuses.isApplyingCoupon;\n    }\n\n    isRemoving(): boolean {\n        return !!this._coupon.statuses.isRemovingCoupon;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\n@selector\nexport default class CustomerSelector {\n    constructor(\n        private _customer: CustomerState\n    ) {}\n\n    getCustomer(): Customer | undefined {\n        return this._customer.data;\n    }\n}\n","import CustomerStrategyState from './customer-strategy-state';\n\nexport default class CustomerStrategySelector {\n    constructor(\n        private _customerStrategies: CustomerStrategyState\n    ) {}\n\n    getSignInError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signInMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signInError;\n    }\n\n    getSignOutError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.signOutMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.signOutError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.initializeError;\n    }\n\n    getWidgetInteractionError(methodId?: string): Error | undefined {\n        if (methodId && this._customerStrategies.errors.widgetInteractionMethodId !== methodId) {\n            return;\n        }\n\n        return this._customerStrategies.errors.widgetInteractionError;\n    }\n\n    isSigningIn(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signInMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningIn;\n    }\n\n    isSigningOut(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.signOutMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isSigningOut;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isInitializing;\n    }\n\n    isWidgetInteracting(methodId?: string): boolean {\n        if (methodId && this._customerStrategies.statuses.widgetInteractionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._customerStrategies.statuses.isWidgetInteracting;\n    }}\n","import { selector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState from './gift-certificate-state';\n\n@selector\nexport default class GiftCertificateSelector {\n    constructor(\n        private _giftCertificate: GiftCertificateState\n    ) {}\n\n    getGiftCertificates(): GiftCertificate[] | undefined {\n        return this._giftCertificate.data;\n    }\n\n    getRemoveError(): Error | undefined {\n        return this._giftCertificate.errors.removeGiftCertificateError;\n    }\n\n    getApplyError(): Error | undefined {\n        return this._giftCertificate.errors.applyGiftCertificateError;\n    }\n\n    isApplying(): boolean {\n        return !!this._giftCertificate.statuses.isApplyingGiftCertificate;\n    }\n\n    isRemoving(): boolean {\n        return !!this._giftCertificate.statuses.isRemovingGiftCertificate;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport { Address } from '../address';\n\nimport ConsignmentState from './consignment-state';\n\n@selector\nexport default class ShippingAddressSelector {\n    constructor(\n        private _consignments: ConsignmentState\n    ) {}\n\n    getShippingAddress(): Address | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments[0]) {\n            return;\n        }\n\n        return consignments[0].shippingAddress;\n    }\n}\n","import { selector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState from './shipping-country-state';\n\n@selector\nexport default class ShippingCountrySelector {\n    constructor(\n        private _shippingCountries: ShippingCountryState\n    ) {}\n\n    getShippingCountries(): Country[] | undefined {\n        return this._shippingCountries.data;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._shippingCountries.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._shippingCountries.statuses.isLoading;\n    }\n}\n","import { selector } from '../common/selector';\n\nimport ShippingStrategyState from './shipping-strategy-state';\n\n@selector\nexport default class ShippingStrategySelector {\n    constructor(\n        private _shippingStrategies: ShippingStrategyState\n    ) {}\n\n    getUpdateAddressError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.updateAddressMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.updateAddressError;\n    }\n\n    getSelectOptionError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.selectOptionMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.selectOptionError;\n    }\n\n    getInitializeError(methodId?: string): Error | undefined {\n        if (methodId && this._shippingStrategies.errors.initializeMethodId !== methodId) {\n            return;\n        }\n\n        return this._shippingStrategies.errors.initializeError;\n    }\n\n    isUpdatingAddress(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.updateAddressMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isUpdatingAddress;\n    }\n\n    isSelectingOption(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.selectOptionMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isSelectingOption;\n    }\n\n    isInitializing(methodId?: string): boolean {\n        if (methodId && this._shippingStrategies.statuses.initializeMethodId !== methodId) {\n            return false;\n        }\n\n        return !!this._shippingStrategies.statuses.isInitializing;\n    }\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { selector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState from './consignment-state';\nimport ShippingOption from './shipping-option';\n\n@selector\nexport default class ConsignmentSelector {\n    constructor(\n        private _consignments: ConsignmentState,\n        private _cart: CartSelector\n    ) {}\n\n    getConsignments(): Consignment[] | undefined {\n        return this._consignments.data;\n    }\n\n    getConsignmentById(id: string): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, { id });\n    }\n\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined {\n        const consignments = this._consignments.data;\n\n        if (!consignments || !consignments.length) {\n            return;\n        }\n\n        return find(consignments, consignment =>\n            isAddressEqual(consignment.shippingAddress, address)\n        );\n    }\n\n    getShippingOption(): ShippingOption | undefined {\n        const consignments = this._consignments.data;\n\n        if (consignments && consignments.length) {\n            return consignments[0].selectedShippingOption;\n        }\n    }\n\n    getLoadError(): Error | undefined {\n        return this._consignments.errors.loadError;\n    }\n\n    getCreateError(): Error | undefined {\n        return this._consignments.errors.createError;\n    }\n\n    getLoadShippingOptionsError(): Error | undefined {\n        return this._consignments.errors.loadShippingOptionsError;\n    }\n\n    getUnassignedItems(): PhysicalItem[] {\n        const cart = this._cart.getCart();\n\n        if (!cart) {\n            return [];\n        }\n\n        const assignedLineItemIds = (this.getConsignments() || []).reduce(\n            (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n            [] as string[]\n        );\n\n        return (cart.lineItems.physicalItems || []).filter(\n            item => assignedLineItemIds.indexOf(item.id as string) < 0\n        );\n    }\n\n    getUpdateError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateError);\n    }\n\n    getDeleteError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.deleteError[consignmentId];\n        }\n\n        return find(this._consignments.errors.deleteError);\n    }\n\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.getUpdateError(consignment.id) : this.getCreateError();\n    }\n\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined {\n        if (consignmentId) {\n            return this._consignments.errors.updateShippingOptionError[consignmentId];\n        }\n\n        return find(this._consignments.errors.updateShippingOptionError);\n    }\n\n    isLoading(): boolean {\n        return this._consignments.statuses.isLoading === true;\n    }\n\n    isLoadingShippingOptions(): boolean {\n        return this._consignments.statuses.isLoadingShippingOptions === true;\n    }\n\n    isCreating(): boolean {\n        return this._consignments.statuses.isCreating === true;\n    }\n\n    isUpdating(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdating[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdating) === true;\n    }\n\n    isDeleting(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isDeleting[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isDeleting) === true;\n    }\n\n    isAssigningItems(address: AddressRequestBody): boolean {\n        const consignment = this.getConsignmentByAddress(address);\n\n        return consignment ? this.isUpdating(consignment.id) : this.isCreating();\n    }\n\n    isUpdatingShippingOption(consignmentId?: string): boolean {\n        if (consignmentId) {\n            return this._consignments.statuses.isUpdatingShippingOption[consignmentId] === true;\n        }\n\n        return find(this._consignments.statuses.isUpdatingShippingOption) === true;\n    }\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { BillingAddressSelector } from '../billing';\nimport { selector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { OrderMetaState } from './order-state';\n\n@selector\nexport default class OrderSelector {\n    constructor(\n        private _order: OrderState,\n        private _billingAddress: BillingAddressSelector,\n        private _coupons: CouponSelector\n    ) {}\n\n    getOrder(): Order | undefined {\n        const { data } = this._order;\n        const billingAddress = this._billingAddress.getBillingAddress();\n        const coupons = this._coupons.getCoupons() || [];\n\n        if (!data || !billingAddress) {\n            return;\n        }\n\n        return {\n            ...data,\n            billingAddress,\n            coupons,\n        };\n    }\n\n    getOrderMeta(): OrderMetaState | undefined {\n        return this._order.meta;\n    }\n\n    getLoadError(): Error | undefined {\n        return this._order.errors.loadError;\n    }\n\n    isLoading(): boolean {\n        return !!this._order.statuses.isLoading;\n    }\n}\n","import { combineReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState } from './cart-state';\n\nconst DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? { ...data, ...action.payload.cart } : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState } from './consignment-state';\n\nconst DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        return action.payload ? action.payload.consignments : data;\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...errors, loadError: undefined };\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...errors, loadError: action.payload };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return { ...errors, createError: undefined };\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...errors, createError: action.payload };\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            errors.updateError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            errors.deleteError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = undefined;\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            errors.updateShippingOptionError[action.meta.id] = action.payload;\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return { ...statuses, isLoading: true };\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return { ...statuses, isLoadingShippingOptions: true };\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return { ...statuses, isLoading: false };\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return { ...statuses, isLoadingShippingOptions: false };\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return { ...statuses, isCreating: true };\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return { ...statuses, isCreating: false };\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            statuses.isUpdating[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            statuses.isDeleting[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = true;\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            statuses.isUpdatingShippingOption[action.meta.id] = false;\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState } from './coupon-state';\n\nconst DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: CouponAction | CheckoutAction | OrderAction\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return action.payload ? action.payload.coupons : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return { ...errors, applyCouponError: undefined };\n\n    case CouponActionType.ApplyCouponFailed:\n        return { ...errors, applyCouponError: action.payload };\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return { ...errors, removeCouponError: undefined };\n\n    case CouponActionType.RemoveCouponFailed:\n        return { ...errors, removeCouponError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return { ...statuses, isApplyingCoupon: true };\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return { ...statuses, isApplyingCoupon: false };\n\n    case CouponActionType.RemoveCouponRequested:\n        return { ...statuses, isRemovingCoupon: true };\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return { ...statuses, isRemovingCoupon: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\n\nimport Customer from './customer';\nimport CustomerState from './customer-state';\n\nconst DEFAULT_STATE: CustomerState = {};\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return action.payload ? { ...data, ...action.payload.customer } : data;\n\n    default:\n        return data;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nconst DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return action.payload ? action.payload.giftCertificates : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return { ...errors, applyGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...errors, applyGiftCertificateError: action.payload };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return { ...errors, removeGiftCertificateError: undefined };\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...errors, removeGiftCertificateError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return { ...statuses, isApplyingGiftCertificate: true };\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return { ...statuses, isApplyingGiftCertificate: false };\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return { ...statuses, isRemovingGiftCertificate: true };\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return { ...statuses, isRemovingGiftCertificate: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\n\nconst DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: OrderAction\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: errorsReducer,\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return action.payload\n            ? omit({ ...data, ...action.payload }, ['billingAddress', 'coupons'])\n            : data;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return action.payload ? {\n            ...meta,\n            ...action.meta,\n            callbackUrl: action.payload.order.callbackUrl,\n            orderToken: action.payload.order.token,\n            payment: action.payload.order && action.payload.order.payment,\n        } : meta;\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...errors, loadError: undefined };\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return { ...statuses, isLoading: true };\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nconst DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: LoadShippingCountriesAction\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        errors: errorsReducer,\n        data: dataReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return action.payload || [];\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return { ...errors, loadError: undefined };\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...errors, loadError: action.payload };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return { ...statuses, isLoading: true };\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return { ...statuses, isLoading: false };\n\n    default:\n        return statuses;\n    }\n}\n","module.exports = require(\"rxjs/observable/throw\");","module.exports = require(\"rxjs/observable/merge\");","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): Observable<CustomerStrategyInitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Observable<CustomerStrategyDeinitializeAction> {\n        return Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>,\n        paypal?: Promise<BraintreeDataCollector>,\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","export default class AmountTransformer {\n    constructor(private _dp: number) {}\n\n    toInteger(amount: number): number {\n        return Math.floor(amount * Math.pow(10, this._dp));\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { AmountTransformer, LineItem } from '../cart';\nimport { mapToInternalLineItems } from '../cart';\nimport { Checkout } from '../checkout';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInteralOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInteralOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","module.exports = require(\"iframe-resizer\");","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","export default interface CustomerStrategyState {\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: CustomerStrategyAction\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...errors,\n            signInError: undefined,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n        return {\n            ...errors,\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...errors,\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return {\n            ...errors,\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return {\n            ...errors,\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return {\n            ...errors,\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignInRequested:\n        return {\n            ...statuses,\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return {\n            ...statuses,\n            isSigningIn: false,\n            signInMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return {\n            ...statuses,\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        };\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return {\n            ...statuses,\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        };\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return {\n            ...statuses,\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         };\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n         return {\n            ...statuses,\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         };\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: ShippingStrategyAction\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        errors: errorsReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...errors,\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return {\n            ...errors,\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...errors,\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return {\n            ...errors,\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...errors,\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return {\n            ...errors,\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...errors,\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return {\n            ...errors,\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return {\n            ...statuses,\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return {\n            ...statuses,\n            isInitializing: false,\n            initializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return {\n            ...statuses,\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return {\n            ...statuses,\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return {\n            ...statuses,\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return {\n            ...statuses,\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        };\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return {\n            ...statuses,\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        };\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return {\n            ...statuses,\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        };\n\n    default:\n        return statuses;\n    }\n}\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const params = {\n            include: [\n                'payments',\n                'lineItems.physicalItems.socialMedia',\n                'lineItems.physicalItems.options',\n                'lineItems.digitalItems.socialMedia',\n                'lineItems.digitalItems.options',\n            ].join(','),\n        };\n\n        return this._requestSender.get(url, {\n            params,\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { defer } from 'rxjs/observable/defer';\nimport { from } from 'rxjs/observable/from';\nimport { of } from 'rxjs/observable/of';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(payload, checkout.customerMessage, externalSource), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(payload: OrderRequestBody, customerMessage: string, externalSource?: string): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                })),\n                giftCertificates: cart.lineItems.giftCertificates.map(item => ({\n                    amount: item.amount,\n                    recipient: item.recipient,\n                })),\n                physicalItems: cart.lineItems.physicalItems.map(item => ({\n                    extendedSalePrice: item.extendedSalePrice,\n                    productId: item.productId,\n                    quantity: item.quantity,\n                    variantId: item.variantId,\n                    giftWrapping: item.giftWrapping,\n                })),\n            },\n        };\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.type = 'invalid_argument';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutDefaultIncludes } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: CheckoutDefaultIncludes.join(','),\n            },\n        });\n    }\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerCredentials from '../customer-credentials';\n\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nexport default abstract class CustomerStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors} from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class AmazonPayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\n/**\n * A set of options that are required to initialize the customer step of\n * checkout to support Amazon Pay.\n *\n * When AmazonPay is initialized, a sign-in button will be inserted into the\n * DOM. When the customer clicks on it, they will be redirected to Amazon to\n * sign in.\n */\nexport interface AmazonPayCustomerInitializeOptions {\n    /**\n     * The ID of a container which the sign-in button should insert into.\n     */\n    container: string;\n\n    /**\n     * The colour of the sign-in button.\n     */\n    color?: 'Gold' | 'LightGray' | 'DarkGray';\n\n    /**\n     * The size of the sign-in button.\n     */\n    size?: 'small' | 'medium' | 'large' | 'x-large';\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CustomerStrategyActionCreator } from '..';\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor } from '../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../payment/strategies/braintree/visacheckout';\nimport VisaCheckoutScriptLoader from '../../payment/strategies/braintree/visacheckout-script-loader';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: any): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: any): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n        return visaCheckoutButton;\n    }\n}\n\nexport interface BraintreeVisaCheckoutCustomerInitializeOptions {\n    container: string;\n    onError?(error: Error): void;\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\nimport { toFormUrlEncoded } from '../../common/http-request';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { ChasePayScriptLoader } from '../../payment/strategies/chasepay';\nimport { ChasePaySuccessPayload } from '../../payment/strategies/chasepay/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport {CustomerInitializeOptions, CustomerRequestOptions} from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class ChasePayCustomerStrategy extends CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: toFormUrlEncoded({\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            }),\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n\nexport interface ChasePayCustomerInitializeOptions {\n    container: string;\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { NotImplementedError} from '../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class SquareCustomerStrategy extends CustomerStrategy {\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: any): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { MasterpassScriptLoader } from '../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class MasterpassCustomerStrategy extends CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: true,\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return super.deinitialize(options);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy extends CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {\n        super(store);\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => super.deinitialize(options));\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n                .then(() => this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress)))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport CustomerActionCreator from '../customer-action-creator';\nimport CustomerCredentials from '../customer-credentials';\nimport { CustomerRequestOptions } from '../customer-request-options';\n\nimport CustomerStrategy from './customer-strategy';\n\nexport default class DefaultCustomerStrategy extends CustomerStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {\n        super(store);\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport {\n    AmazonPayCustomerStrategy,\n    BraintreeVisaCheckoutCustomerStrategy,\n    ChasePayCustomerStrategy,\n    CustomerStrategy,\n    DefaultCustomerStrategy,\n    GooglePayCustomerStrategy,\n    MasterpassCustomerStrategy,\n    SquareCustomerStrategy\n} from './strategies';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\n\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nexport default abstract class ShippingStrategy {\n    protected _isInitialized = false;\n\n    constructor(\n        protected _store: CheckoutStore\n    ) {}\n\n    abstract updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    abstract selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors>;\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = true;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._isInitialized = false;\n\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWidgetError, AmazonPayWindow } from '../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../shipping-request-options';\nimport { ShippingStrategyActionType } from '../shipping-strategy-actions';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class AmazonPayShippingStrategy extends ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        super(store);\n\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isInitialized) {\n            return super.initialize(options);\n        }\n\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => super.initialize(options));\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._isInitialized) {\n            return super.deinitialize(options);\n        }\n\n        this._paymentMethod = undefined;\n\n        return super.deinitialize(options);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: any): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n\n/**\n * A set of options that are required to initialize the shipping step of\n * checkout in order to support Amazon Pay.\n *\n * When Amazon Pay is initialized, a widget will be inserted into the DOM. The\n * widget has a list of shipping addresses for the customer to choose from.\n */\nexport interface AmazonPayShippingInitializeOptions {\n    /**\n     * The ID of a container which the address widget should insert into.\n     */\n    container: string;\n\n    /**\n     * A callback that gets called when the customer selects an address option.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onAddressSelect?(reference: AmazonPayOrderReference): void;\n\n    /**\n     * A callback that gets called if unable to initialize the widget or select\n     * one of the address options provided by the widget.\n     *\n     * @param error - The error object describing the failure of the initialization.\n     */\n    onError?(error: AmazonPayWidgetError | StandardError): void;\n\n    /**\n     * A callback that gets called when the widget is loaded and ready to be\n     * interacted with.\n     *\n     * @param reference - The order reference provided by Amazon.\n     */\n    onReady?(reference: AmazonPayOrderReference): void;\n}\n","import { AddressRequestBody } from '../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../checkout';\nimport ConsignmentActionCreator from '../consignment-action-creator';\nimport { ShippingRequestOptions } from '../shipping-request-options';\n\nimport ShippingStrategy from './shipping-strategy';\n\nexport default class DefaultShippingStrategy extends ShippingStrategy {\n    constructor(\n        store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {\n        super(store);\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { AmazonPayShippingStrategy, DefaultShippingStrategy, ShippingStrategy } from './strategies';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (typeof object === 'object') {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","module.exports = require(\"@bigcommerce/bigpay-client\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class TimeoutError extends RequestError {\n    constructor(response?: Response) {\n        super(response, 'The request has timed out or aborted.');\n\n        this.type = 'timeout';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    loadConfig(options?: RequestOptions): ThunkAction<LoadConfigAction> {\n        return store => Observable.create((observer: Observer<LoadConfigAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n\n            if (config) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat } from 'rxjs/observable/concat';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { Observable } from 'rxjs/Observable';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), _throw(createErrorAction(type, error.payload, meta)));\n    }\n\n    return _throw(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: K): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","export default function toFormUrlEncoded(data: { [key: string]: object | string | undefined }): string {\n    return Object.keys(data)\n        .filter(key => data[key] !== undefined)\n        .map(key => {\n            const value = data[key];\n\n            if (typeof value === 'string') {\n                return `${key}=${encodeURIComponent(value)}`;\n            }\n\n            return `${key}=${encodeURIComponent(JSON.stringify(value) || '')}`;\n        })\n        .join('&');\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.merchantName,\n                merchantId: initializationData.merchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.googleMerchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: checkout.grandTotal.toString(),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","module.exports = require(\"rxjs\");","module.exports = require(\"messageformat\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutError,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\n\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postFrameLoaded(): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._messagePoster.post(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n","import EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @alpha\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow)\n    );\n}\n","/// <reference path=\"./messageformat.d.ts\" />\nimport { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = positiveAmount.toString().split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        let decimalPadding = '';\n\n        for (let i = 0; i < this._decimalPlaces; i += 1) {\n            decimalPadding += '0';\n        }\n\n        return [\n            parsedIntegerAmount,\n            `${decimalAmount}${decimalPadding}`.slice(0, this._decimalPlaces),\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = parseFloat(this._storeConfig.shopperCurrency.exchangeRate);\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @alpha\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: {\n                new(options: GooglePayPaymentOptions): GooglePayClient;\n            },\n        },\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        }\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string,\n        nonce: string,\n        cardInformation: {\n            type: string,\n            number: string,\n        },\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        },\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { toFormUrlEncoded } from '../../../common/http-request/';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            }),\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { toFormUrlEncoded } from '../../../common/http-request';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: toFormUrlEncoded({\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            }),\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string, lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n"],"sourceRoot":""}